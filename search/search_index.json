{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AllStarLink 3","text":"<p>AllStarLink\u2019s version 3 (ASL3) is the next generation of AllStar repeater and hot spot software. This version of AllStar has been redesigned to run on Asterisk 20 LTS (Long Term Support), the latest Debian Linux operating system, and modern hardware or virtual machines. The update from Asterisk 1.4 to Asterisk 20 implements over 15 years of Asterisk bug fixes, security improvements and enhancements. It brings with it the latest Asterisk applications, channel drivers and additional functionality.</p> <p></p> <p>This update required <code>app_rpt</code> (the Asterisk application that is AllStar) and it's various modules to be heavily modified. Many memory leaks have been addressed, modules load or refresh more reliably and many bugs have been squashed. This all adds up to improved stability and uptime.</p> <p>In addition to the many <code>app_rpt</code> improvements and fixes, the code base is easier to maintain and enhance. The goal being to make <code>app_rpt</code> code accessible to more AllStar developers. Also, the <code>app_rpt</code> code base has been modified to meet Asterisk\u00ae coding guidelines.</p> <p>Supported Hardware &amp; Software</p> <ul> <li>Any x86_64/amd64 hardware device</li> <li>Any emulated x86_64/amd64 virtual machine</li> <li>Any arm64-based device such as Raspberry Pi</li> <li>Any emulated arm64 virtual machine</li> <li>Debian 12</li> </ul>"},{"location":"#new-features","title":"New Features","text":"<p>In addition to the <code>app_rpt</code> code update, we have added many new features to make ASL3 the best AllStar release yet.</p> <ul> <li>Asterisk runs as non-root for increased security</li> <li>Raspberry Pi image with an attractive landing page, system management, service discovery and reduced microSD wear</li> <li>Packages for Debian 12 Bookworm for any platform running x86_64/amd64 and arm64</li> <li>Worry free <code>apt</code> updates and upgrades. Linux Kernel updates won't break your node!</li> <li>HTTP AllStarLink Registration and DNS IP address resolution with fallback to file</li> <li>USB improvements including live logic view and auto device string discovery</li> <li>Improved menu includes compatibility with user config file edits</li> <li>Access lists configurable on a per node basis, with CLI or menu management</li> <li>Configuration templates to simplify edits and menu updates</li> <li>EchoLink code has been extensively reworked to improve stability. Added chats and doubling prevention</li> </ul>"},{"location":"#allstarlink-manual","title":"AllStarLink Manual","text":"<p>This is the AllStarLink version 3 Manual. No doubt you're you've noticed this is not a Wiki. The ASL Wiki still exists, largely to document ASL2, while this manual covers ASL3 specifics and is the future home for all ASL documentation.</p>"},{"location":"#manual-navigation","title":"Manual Navigation","text":"<p>Did you see the \"Next\" and \"Previous\" buttons at the bottom of the page? Those will move you forward and back through the various pages in each manual section.</p> <p>At the top of the page, you will find the Navigation Bar, to let you jump to a particular section of the manual. </p> <p>Once you are in a section of the manual, a Table of Contents is provided on the left side of the screen, to let you quickly find the topic you are looking for.</p> <p>Click the Next button on the bottom of the page to get right into Installation!</p>"},{"location":"adv-topics/","title":"Advanced Topics","text":"<p>Welcome to the Advanced Topics section of the ASL3 Manual.</p> <p>Here, you will find information on how to configure a number of the different features that ASL3 has to offer. If you are interested, you will also find some information here that provides more in-depth explanations on how things in ASL3 operate \"under the hood\".</p> <p>As you may be aware, there are differences in the the way ASL3 operates compared to previous versions. Please be sure to review the New Commands amd Incompatibilities, Changes, and Known Issues pages to be aware of these changes.</p>"},{"location":"adv-topics/addons/","title":"Add-ons","text":"<p>The following information relates to software and hardware components related to AllStarLink.</p>"},{"location":"adv-topics/addons/#software-add-ons","title":"Software Add-ons","text":"<p>The following are software add-ons known to work with ASL3 :</p> Product Description AllScan AllStar Favorites Management &amp; Scanning Web App"},{"location":"adv-topics/addons/#hardware-add-ons","title":"Hardware Add-ons","text":"<p>The following are software add-ons known to work with ASL3 :</p> Product Description SHARI SA818 Ham Allstar Radio Interface HotSpot Radio Allstarlink Node HotSpotRadio"},{"location":"adv-topics/addons/#note-to-developers-and-vendors","title":"Note to developers and vendors","text":"<p>We are happy to add your AllStarLink-related software or hardware product to the list above. All we ask is that you your product fully support ASL3, that you have documentation that details how to install your product on an ASL3 system, that you provide contact information for those who need support for your product, and that you agree to work with the AllStarLink development team if any issues arise. For more information, please contact us at development@allstarlink.org</p>"},{"location":"adv-topics/allowdenylists/","title":"Allow and Deny Lists","text":"<p>ASL3 provides a way to establish either an \"allowlist\" or a \"denylist\" to limit access to your node(s). New to ASL3 is the capability for nodes on the same server to have different lists. Unlike ASL2, no modifications or scripts are required to the configuration files and there is no need to restart or reload the server. All changes are made to the Asterisk database. As soon as you make a change it takes effect.</p> <p>The \"allowlist\" allows inbound connects and blocks all others. Nodes on the same server are always allowed. If any nodes are on the \"allowlist\" the \"denylist\" is ignored.</p> <p>These lists can easily be updated using the <code>asl-menu</code>. You can also choose to manage the lists using the Asterisk CLI. These lists were previously referred to as \"whitelist\" and \"blacklist\".</p>"},{"location":"adv-topics/allowdenylists/#updating-the-access-list-with-the-asl3-menu","title":"Updating the access list with the ASL3 Menu","text":"<p>All changes to the node access lists can be made with the <code>asl-menu</code>.  From <code>asl-menu</code>, select <code>Node Settings</code>, select <code>AllStar Node Setup Menu</code>, select <code>Update node [your-node]</code>, and lastly select <code>Node access list</code>. Here, you will see if any node access limits have been established. You will also have the option to add, update, or remove nodes from the access lists.</p>"},{"location":"adv-topics/allowdenylists/#updating-the-access-list-with-the-asterisk-cli","title":"Updating the access list with the Asterisk CLI","text":"<p>While not recommended, you can also use the Asterisk CLI to manipulate the node access lists.</p> <p>One important item to note is how the \"allowlist\" and \"denylist\" databases are used. Each database entry has a <code>&lt;family&gt;</code>, <code>&lt;key&gt;</code>, and <code>&lt;value&gt;</code>.  For ASL3, the <code>&lt;family&gt;</code> would be <code>allowlist/[your-node]</code> or <code>denylist/[your-node]</code>, the <code>&lt;key&gt;</code> is the node to be allowed or denied access, and we do not use the <code>&lt;value&gt;</code>.</p>"},{"location":"adv-topics/allowdenylists/#adding-nodes-to-the-allowlist","title":"Adding nodes to the \"allowlist\"","text":"<p>The \"allowlist\" allows inbound connects and blocks all others. Nodes on the same server are always allowed. If any nodes are on the \"allowlist\" then the \"denylist\" is ignored.</p> <ul> <li>Add an allowed node at the Asterisk CLI <code>&gt; database put allowlist/[your-node] [allow-node] \"Our friend\"</code></li> <li>Add another allowed node with CLI <code>&gt; database put allowlist/[your-node] [another-node] \"Another friend\"</code></li> </ul>"},{"location":"adv-topics/allowdenylists/#adding-nodes-to-the-denylist","title":"Adding nodes to the \"denylist\"","text":"<p>The \"denylist\" prevents nodes from connecting to your node. A \"denylist\" works best if you only have a few nodes you want to block.</p> <ul> <li>Add a node to deny at the Asterisk CLI <code>&gt; database put denylist/[your-node] [deny-node] \"Not our friend\"</code></li> <li>Add another node to deny with CLI <code>&gt; database put denylist/[your-node] [another-node] \"Not our other friend\"</code></li> </ul>"},{"location":"adv-topics/allowdenylists/#view-the-access-lists","title":"View the access lists","text":"<p>To see what nodes are in the access lists:</p> <ul> <li>Show entire database at the Asterisk CLI <code>&gt; database show</code></li> <li>Show the \"allowlist\" for all your nodes with CLI <code>&gt; database show allowlist</code></li> <li>Show the \"allowlist\" for one node with CLI <code>&gt; database show allowlist/[your-node]</code></li> <li>Show whether one of your nodes will allow another with CLI <code>&gt; database show allowlist/[your-node] [other-node]</code></li> </ul>"},{"location":"adv-topics/allowdenylists/#removing-nodes-from-the-access-lists","title":"Removing nodes from the access lists","text":"<p>To remove a node from the access lists, or delete the lists entirely:</p> <ul> <li>Remove an allowed node at the Asterisk CLI <code>&gt; database del allowlist/[your-node] [node]</code></li> <li>Remove the \"allowlist\" for your node with CLI <code>&gt; database del allowlist/[your-node]</code></li> <li>Remove the \"allowlist\" for all of your nodes with CLI <code>&gt; database del allowlist</code></li> </ul>"},{"location":"adv-topics/aprs/","title":"APRS","text":"<p><code>app_rpt</code> can post position reports to the APRS\u2122 network via the <code>app_gps</code> application. APRS is an acronym for Automatic Packet Reporting System. APRS is the registered trademark of Bob Bruninga, WB4APR (SK). <code>app_gps</code> supports standard position reports and APRStt (touchtone).</p> <p>For fixed position nodes, like repeaters, reporting your node's position allows visiting operators to easily see the nodes/repeaters in the area. Some radios allow operators to use the position reports to automatically tune their radios to the node's frequency.</p> <p>You can see a map of APRS unit locations at https://aprs.to or https://aprs.fi.</p> <p>An external GPS device can be configured to receive GPS position information. This is needed for mobile nodes to post their live position. Fixed stations do not require a GPS device. <code>app_gps</code> can be configured with a default latitude, longitude, and elevation.</p> <p><code>app_gps</code> posts position report to the global APRS-IS servers. An Internet connection is required.</p>"},{"location":"adv-topics/aprs/#configuration","title":"Configuration","text":""},{"location":"adv-topics/aprs/#enable-app_gps","title":"Enable <code>app_gps</code>","text":"<p>To enable <code>app_gps</code>, edit <code>/etc/asterisk/modules.conf</code> and change <code>noload =&gt; app_gps.so</code> to <code>load =&gt; app_gps.so</code></p>"},{"location":"adv-topics/aprs/#edit-gpsconf","title":"Edit <code>gps.conf</code>","text":"<p>The <code>gps.conf</code> file now uses Asterisk templates. See Templates for more information.</p> <p>Edit <code>/etc/asterisk/gps.conf</code> with your favorite editor. The configuration file is filled with comments to assist you with the configuration.</p> <p>If you will be using a GPS device, set the <code>comport</code> and <code>baudrate</code> for your connected device. If you don't have a GPS device, <code>comport</code> should not have a value.</p> <p>Update <code>call</code> with the node's callsign and SSID.  For example, <code>WB6NIL-1</code>. Additional information on the callsign/SSID format can be found at https://www.aprs-is.net/Connecting.aspx.</p> <p>Update <code>password</code> with your APRS-IS password. This password is a computed number based on the callsign. You can generate the password on-line at https://n5dux.com/ham/aprs-passcode.</p> <p>NOTE: This password must be correct for <code>app_gps</code> to log into the APRS-IS server.</p> <p>The <code>gps.conf</code> contains a number of settings that configure how your node is displayed on APRS maps. The comments in the configuration file will help you configure your node.</p> <p>The <code>comment</code> field can be used to describe your node and/or provide information about your local radio club. See the configuration file for more information.</p> <p>You can configure the map symbol used for your node by changing the <code>icontable</code> and <code>icon</code> values. To display an \"R\" inside a diamond, set <code>icontable = R</code> and <code>icon = &amp;</code>. See http://www.aprs.org/symbols.html for more information.</p> <p>NOTE: <code>app_gps</code> supports multiple nodes. To add additional nodes, add another section to the configuration file. For example <code>[1998](general)</code>.</p>"},{"location":"adv-topics/aprs/#restart-asterisk","title":"Restart Asterisk","text":"<p>After making these initial changes to <code>modules.conf</code> and <code>gps.conf</code>, restart Asterisk at the command line type:</p> <pre><code>sudo systemctl restart asterisk\n</code></pre> <p>Changes made to <code>gps.conf</code> in the future do not require restarting Asterisk. After making changes to the configuration file, you can enter these commands in the Asterisk CLI. </p> <pre><code>module unload app_gps  \nmodule load app_gps \n</code></pre>"},{"location":"adv-topics/aprs/#monitoring-the-gps-device","title":"Monitoring the GPS device","text":"<p>You can get the status of the connected GPS device by typing the following command in the Asterisk CLI:</p> <pre><code>gps show status\n</code></pre> <p>This command will tell you if the GPS device is locked on the satellite signal and the current position. If you are not using a GPS device, it will show the default latitude, longitude, and elevation.</p>"},{"location":"adv-topics/aprs/#aprstt-touchtone","title":"APRStt (touchtone)","text":"<p>APRStt allows operators with analog radios to report to the APRS system. Specially crafted DTMF sequences can be sent to <code>app_rpt</code> to generate APRS position reports.</p> <p>To enable this feature, edit <code>/etc/asterisk/rpt.conf</code> and add or enable <code>aprstt = general</code> for your node. The value after <code>aprstt</code> is the section in <code>gps.conf</code> to use for APRStt. This value can be different for each node. It does require a matching section in <code>gps.conf</code>.</p> <p>Callsigns received by APRStt are reported as objects to APRS using the <code>'-12'</code> SSID.</p> <p>To send WB4APR using APRStt, you would send the DTMF sequence, <code>A9A2B42A7A7C91#</code>. <code>app_rpt</code> will translate the DTMF sequence and send it to <code>app_gps</code> for processing.</p> <p>For more information on the APRStt DTMF format and how to construct DTMF sequences, see http://www.aprs.org/aprstt/aprstt-user.txt.</p> <p>NOTE: Some radios natively support APRStt.</p> <p>NOTE: At the time of this writing, <code>app_rpt</code> only supports the APRStt A format.</p>"},{"location":"adv-topics/audio-level/","title":"Calibrating Audio Levels For The AllStarLink System","text":""},{"location":"adv-topics/audio-level/#introduction","title":"Introduction","text":"<p>Proper audio level calibration is crucial for ensuring good audio quality, and consistent audio levels from node-to-node. Fortunately, the procedure is not that complicated. To properly perform the audio level calibration, you will need the following items:</p> <ul> <li>A service monitor, preferably one capable of simultaneous generation and analysis (e.g. HP8920, HP8921, IFR1200, COM120B, R2600, R8000A, or a separate signal generator and deviation meter), plus associated cabling.</li> <li>An audio signal generator</li> <li>Linux CLI access to the node being calibrated.</li> <li>Tweaking tools if your radio or interface board has physical adjustment pots, or the appropriate service software for your radio.</li> </ul>"},{"location":"adv-topics/audio-level/#assumptions","title":"Assumptions","text":"<ul> <li>The system you are calibrating uses 5kHz deviation (standard NBFM) as the maximum peak deviation. For narrow band systems everything is half. So the steps below which say to use 3kHz should use 1.5kHz.</li> <li>You must know the node number and the channel number of the radio port you wish to test. This can be looked up in <code>rpt.conf</code>.</li> </ul>"},{"location":"adv-topics/audio-level/#procedure","title":"Procedure","text":""},{"location":"adv-topics/audio-level/#checking-the-radios-transmitters-peak-deviation","title":"Checking the Radio's Transmitter's Peak Deviation","text":"<p>If you intend to drive the transmitter at the microphone input, or at another audio input before pre-emphasis and limiting, you must ensure that the peak deviation of the transmitter is no more than what is required to operate on the channel (typically 5KHz). If you driving the modulator directly from a URI, this section can be skipped.</p> <ol> <li>Disable the generation of CTCSS tones in the transmitter. (If you don't encode CTCSS, skip this step and steps 6 and 7)</li> <li>Hook up the audio signal generator to the transmitter microphone input, set it for a 1kHz sine wave, and the lowest output setting. Hook up the service monitor to the transmitter RF output (with appropriate attenuation for protection of your Service Monitor) and key the transmitter.</li> <li>On the service monitor, monitor the peak deviation of the transmitter. Gradually increase the output of the audio signal generator until further adjustment does not increase the deviation. Make a note of the peak deviation at this point.</li> <li>If the peak deviation is more than 5kHz, then adjust the transmitter deviation pot or soft pot so that the peak deviation reading on the service monitor is no more than 5kHz. Check the shape of the audio waveform on the service monitor's scope. It should show evidence of hard limiting (it should look like a square wave with rounded edges)</li> <li>Reduce the level of the audio signal generator so that the service monitor reads 3kHz of peak deviation. The audio waveform should now be a sine wave with no evidence of limiting.</li> <li>Re-enable the generation of CTCSS tones in the transmitter</li> <li>Check that the peak deviation is no more than 3.6 kHz. If it is more than this, adjust the CTCSS level so that a reading of 3.6kHz is attained.</li> </ol>"},{"location":"adv-topics/audio-level/#adjusting-the-transmit-audio-level","title":"Adjusting the Transmit Audio Level","text":"<ol> <li>Disable CTCSS tone generation in the transmitter or at the CTCSS encoder.</li> <li>Enable the test tone generator COP command in <code>rpt.conf</code> and restart Asterisk</li> <li>Connect the radio interface to the transmitter</li> <li>Bring up the Asterisk CLI.</li> <li>From the Asterisk CLI, type <code>rpt fun yournodenumber *904</code> where <code>yournodenumber</code> is the node number assigned to you.</li> <li>The transmitter should key and you may hear a tone. Adjust the TX level until the service monitor indicates 3kHz of peak deviation.</li> <li>From the Asterisk CLI, type <code>rpt fun yournodenumber #</code>. This will kill the test tone and un-key the transmitter.</li> <li>If encoding CTCSS, re-enable the CTCSS encoder in the transmitter, then repeat the previous three steps. You should see no more than 3.6kHz of deviation with the CTCSS tone generator enabled. If it is higher than this, adjust the CTCSS level per your transmitter's service documentation until a 3.6kHz of deviation is seen on the service monitor.</li> </ol>"},{"location":"adv-topics/audio-level/#adjusting-the-receive-audio-level","title":"Adjusting the Receive Audio Level","text":"<p>The procedure depends on what type of radio you have interfaced. If your radio is a repeater, use the full duplex procedure, if your radio is a remote base or simplex node, use the half-duplex procedure. NOTE: If you have a URI, the automated setup procedure should have set the receive level very close to what it needs to be. This section can be used to verify the receive level is correct for a URI, but the URI receive level should always be set using the automated adjustment procedure.</p>"},{"location":"adv-topics/audio-level/#full-duplex-radios","title":"Full Duplex Radios","text":"<p>Adjusting the receive level of a full duplex radio is easy.</p> <ol> <li>Disable the transmitter CTCSS encoder. Bypass the receiver CTCSS decoder so that it is in carrier squelch.</li> <li>Monitor the deviation of the transmitter on the service monitor while simultaneously injecting a 1kHz tone frequency at 3kHz deviation on the receiver.</li> <li>Adjust the receive level pot until you see 3kHz of deviation on the transmit frequency.</li> <li>Disable the signal on the receiver. The receive audio level is now set.</li> </ol>"},{"location":"adv-topics/audio-level/#half-duplex-radios","title":"Half Duplex Radios","text":"<p>Half duplex radios will require the use of a second node which has had the transmit level properly set, and is not transmitting a CTCSS tone. The second node must be receivable by your service monitor or deviation meter but does not need to be co-located with the node undergoing the receive level adjustment. The CODEC used to send audio to the second node must either be uLAW or ADPCM. The GSM codec will give inaccurate results.</p> <ol> <li>Using the Asterisk CLI, connect the node to be adjusted to the transmit node: <code>rpt fun yournodenum *3txnodenum</code></li> <li>Monitor the deviation of the second node's transmitter on the service monitor while simultaneously injecting a 1kHz tone frequency at 3kHz deviation on the receiver on the first node.</li> <li>Adjust the receive level pot until you see 3kHz of deviation on the transmit frequency.</li> <li>Disable the signal on the receiver. The receive audio level is now set.</li> <li>Disconnect the receive node from the transmitter: <code>rpt fun yournodenum *1txnodenum</code></li> </ol>"},{"location":"adv-topics/autopatch/","title":"Autopatch","text":"<p>The autopatch feature in <code>app_rpt</code> allows users on the radio to interconnect with the public switched telephone network (PSTN). This means an amateur radio operator can dial a phone number from the radio and be connected to a phone. The reverse is also possible with someone being able to dial a phone number and be connected to the node. This is achieved using an account with a VOIP service provider and connecting the AllStar node.</p> <p>Regulatory Issues</p> <p>Some countries do not allow third-party traffic through autopatching or telephone interconnection on amateur radio frequencies. In addition, if a system is linked between one country which allows autopatching and one which doesn't, just the passing of the traffic itself across the link could be considered a violation of the rules in the prohibiting country. In countries which permit autopatching, users need be made aware of this and should take the node off-link before using the autopatch.</p> <p>Security Issues</p> <p>The examples provided here do not secure the autopatch against toll fraud. A lot can be done to prevent or reduce toll fraud but the prevention measures vary by where you are located geographically. Most of the prevention measures will be in <code>extensions.conf</code>. You can write contexts (dial plans) to reject certain number sequences. The Asterisk Book should be consulted to see how to do this and should be done before placing any autopatch in service. Please make sure you have secured your system so that toll fraud does not become an issue.</p>"},{"location":"adv-topics/autopatch/#duplex-and-vox","title":"Duplex and VOX","text":"<p>Nodes with duplex set to <code>0</code> or <code>1</code> will use VOX automatically. Nodes with duplex set to <code>2</code> or higher can use phone mode. In phone mode, one can key up the radio by dialing <code>*99</code> and un-key by dialing <code>#</code>. One can configure simplex autopatch to not use VOX, but simplex reverse autopatch must use VOX, so it is preferable to use VOX both ways for simplex nodes. Nodes configured for VOX autopatch should advise callers to mute their phone and un-mute only when talking. Additional info can be found in the Simplex Autopatch section.</p>"},{"location":"adv-topics/autopatch/#selecting-a-voip-provider","title":"Selecting a VOIP Provider","text":"<p>Call termination into the public switched telephone network is a service offered by a Voice Over IP provider (VOIP). This is a highly competitive business, and there are lots of VOIP providers offering termination for Asterisk users. Termination is usually provided using the SIP protocol, while IAX is offered by a few providers.</p> <p>When selecting an VOIP provider, make sure they provide setup instructions with example configurations including usernames, and passwords. Quite a few VOIP providers will  automatically generate a custom SIP or IAX stanza for insertion into <code>pjsip.conf</code>, or <code>iax.conf</code> respectively. Not all providers will supply configuration examples. This guide includes example configuration files that may need adjustments to get working with specific providers and ASL versions.</p> <p>This guide will document the general process for setting up IAX2 and SIP providers with examples for voip.ms IAX and flowroute.com SIP. Any provider should be setup in a similar fashion.</p>"},{"location":"adv-topics/autopatch/#voip-provider-setup","title":"VOIP Provider Setup","text":"<p>Whatever provider one chooses, the same things must be setup. Different providers will have different names for each item, but the setup will be similar.</p> <ul> <li>A phone number or DID must be purchased</li> <li>E911 service should be setup</li> <li>CallerID must be setup for the DID</li> <li>Inbound routing will need to be setup so calls are routed to the node via IAX2 or SIP</li> <li>Authentication for outbound calls must be configured</li> </ul>"},{"location":"adv-topics/autopatch/#firewall-setup","title":"Firewall Setup","text":"<p>If using IAX, the firewall will already be configured properly. If using SIP, you will need to update the firewall rules to allow SIP traffic with:</p> <pre><code>root@localhost:/# firewall-cmd --add-service=SIP --permanent\n</code></pre> <p>On your internet router/firewall, forward/open ports as required:</p> <ul> <li>For traffic from the Internet (from the SIP provider) you need to allow TCP and UDP port <code>5060</code> to the node</li> <li>You will also need to allow the UDP port range <code>10000-20000</code> to the node</li> </ul>"},{"location":"adv-topics/autopatch/#configuration-files","title":"Configuration Files","text":"<p>Four configuration files will be used to setup the autopatch: <code>rpt.conf</code>, <code>extensions.conf</code>, <code>modules.conf</code>, and either <code>iax.conf</code> or <code>pjsip.conf</code>. The VOIP provider should provide a stanza for you to insert in <code>iax.conf</code> or <code>pjsip.conf</code>. The configuration below shows how each of these files are used when an outgoing autopatch or reverse autopatch call is made.</p>"},{"location":"adv-topics/autopatch/#modulesconf","title":"<code>modules.conf</code>","text":"<p>In the <code>/etc/asterisk/modules.conf</code> file, add the following lines at the bottom of the file, but above the <code>[global]</code> stanza:</p> <pre><code>load =&gt; bridge_builtin_features.so\nload =&gt; bridge_builtin_interval_features.so\nload =&gt; bridge_holding.so\nload =&gt; bridge_native_rtp.so\nload =&gt; bridge_simple.so\nload =&gt; bridge_softmix.so\nload =&gt; chan_bridge_media.so\nload =&gt; app_verbose.so\nload =&gt; app_read.so\n</code></pre> <p>If using a SIP trunking provider, add these additional lines at the bottom of <code>modules.conf</code>, above the <code>[global]</code> stanza:</p> <pre><code>;\n; modules for pjsip\n;\nnoload = app_voicemail.so\nload = bridge_builtin_features.so\nload = bridge_builtin_interval_features.so\nload = bridge_holding.so\nload = bridge_native_rtp.so\nload = bridge_simple.so\nload = bridge_softmix.so\nload = chan_bridge_media.so\nload = chan_pjsip.so\nload = func_pjsip_endpoint.so\nload = func_sorcery.so\nload = func_devstate.so\nload = res_pjproject.so\nload = res_pjsip_acl.so\nload = res_pjsip_authenticator_digest.so\nload = res_pjsip_caller_id.so\nload = res_pjsip_dialog_info_body_generator.so\nload = res_pjsip_diversion.so\nload = res_pjsip_dtmf_info.so\nload = res_pjsip_endpoint_identifier_anonymous.so\nload = res_pjsip_endpoint_identifier_ip.so\nload = res_pjsip_endpoint_identifier_user.so\nload = res_pjsip_exten_state.so\nload = res_pjsip_header_funcs.so\nload = res_pjsip_logger.so\nload = res_pjsip_messaging.so\nload = res_pjsip_mwi_body_generator.so\nload = res_pjsip_mwi.so\nload = res_pjsip_nat.so\nload = res_pjsip_notify.so\nload = res_pjsip_one_touch_record_info.so\nload = res_pjsip_outbound_authenticator_digest.so\nload = res_pjsip_outbound_publish.so\nload = res_pjsip_outbound_registration.so\nload = res_pjsip_path.so\nload = res_pjsip_pidf_body_generator.so\nload = res_pjsip_pidf_digium_body_supplement.so\nload = res_pjsip_pidf_eyebeam_body_supplement.so\nload = res_pjsip_publish_asterisk.so\nload = res_pjsip_pubsub.so\nload = res_pjsip_refer.so\nload = res_pjsip_registrar.so\nload = res_pjsip_rfc3326.so\nload = res_pjsip_sdp_rtp.so\nload = res_pjsip_send_to_voicemail.so\nload = res_pjsip_session.so\nload = res_pjsip.so\nnoload = res_pjsip_t38.so\nnoload = res_pjsip_transport_websocket.so\nload = res_pjsip_xpidf_body_generator.so\nload = res_rtp_asterisk.so\nload = res_sorcery_astdb.so\nload = res_sorcery_config.so\nload = res_sorcery_memory.so\nload = res_sorcery_realtime.so\n</code></pre>"},{"location":"adv-topics/autopatch/#rptconf","title":"<code>rpt.conf</code>","text":"<p>In the <code>/etc/asterisk/rpt.conf</code> configuration file, the stanza for the node needs to specify the context for the autopatch. The name of the context should match the name added to <code>extensions.conf</code>:</p> <p><pre><code>[1234]\ncontext = autopatch                ; dialing context for phone\ncallerid = \"Repeater\" &lt;0000000000&gt; ; callerid for phone calls\naccountcode = RADIO                ; account code (optional)\n</code></pre> You should also add entries to the <code>[functions]</code> stanza so that users can bring up or take down the autopatch:</p> <pre><code>[functions]\n61 = autopatchup,noct=1,farenddisconnect=1,dialtime=20000,context=autopatch,quiet=1\n0 = cmd,/var/lib/asterisk/hangupPhones ; Hangup all phone patches\n</code></pre>"},{"location":"adv-topics/autopatch/#autopatch-options","title":"Autopatch Options","text":"<p>There are several options that can be passed to the autopatchup command class. This table summarizes what they do:</p> Option Description context Override the context specified for the autopatch in <code>rpt.conf</code> dialtime The maximum time to wait between DTMF digits when a telephone number is being dialed. The patch will automatically disconnect if this time is exceeded. The value is specified in milliseconds. farenddisconnect When set to 1, the patch will automatically disconnect when the called party hangs up. The default is to send a circuit busy tone until the radio user brings the patch down. noct When set to 1, the courtesy tone during an autopatch call will be disabled. The default is to send the courtesy tone whenever the radio user un-keys. quiet When set to 1, do not send dial tone or voice responses, just try to connect the call. voxalways When set to 1, enables VOX mode. exten Overrides the default autopatch extension. nostar Disables the repeater function prefix"},{"location":"adv-topics/autopatch/#create-a-script-to-handle-terminating-calls","title":"Create a Script to Handle Terminating Calls","text":"<p>Create the following script to handle terminating calls. Without this script, you will be unable to forcefully terminate incoming calls:</p> <pre><code>nano /var/lib/asterisk/hangupPhones\n</code></pre> <p>Paste this script into the file:</p> <pre><code>#!/bin/bash\n# Target pattern to match (adjust as needed for different calls)\nTARGET_PATTERN=\"IAX2/voipms-\"\n# TARGET_PATTERN=\"PJSIP/flowroute-\"\n# Get the list of channels and their concise details\nCHANNELS=$(asterisk -rx \"core show channels concise\")\necho \"Checking for matching channels...\"\necho \"--------------------------------\"\n# Iterate over each line to find the target channel\nwhile IFS= read -r line; do\n    if [[ $line == $TARGET_PATTERN* ]]; then\n        CHANNEL=$(echo \"$line\" | awk -F'!' '{print $1}')\n        CALLERID=$(echo \"$line\" | awk -F'!' '{print $3}')\n        echo \"Found matching channel: $CHANNEL with Caller ID: $CALLERID\"\n        echo \"Hanging up channel: $CHANNEL\"\n        asterisk -rx \"channel request hangup $CHANNEL\"\n    fi\ndone &lt;&lt;&lt; \"$CHANNELS\"\n</code></pre> <p>Save the file and make it executable:</p> <pre><code>sudo chmod +x /var/lib/asterisk/hangupPhones\n</code></pre>"},{"location":"adv-topics/autopatch/#extensionsconf","title":"<code>extensions.conf</code>","text":"<p>In the <code>/etc/asterisk/extensions.conf</code> file, a stanza for the autopatch context is added which refers to the peer stanza in <code>iax.conf</code> or <code>pjsip.conf</code>. These examples will likely need to be adjusted to work with a specific provider: </p> <p>For outbound IAX connections, add an <code>[autopatch]</code> stanza with:</p> <pre><code>[autopatch] \n\n; Match any 10-digit number (e.g., North American local format).\nexten =&gt; _NXXNXXXXXX,1,Dial(IAX2/voipms/${EXTEN})\n; After the call is completed, hang up the line.\nexten =&gt; _NXXNXXXXXX,n,Hangup()\n</code></pre> <p>For outbound SIP connections (using IP auth), add an <code>[autopatch]</code> stanza with:</p> <pre><code>[autopatch]\n\n; Match any 10-digit number (e.g., North American local format).\nexten =&gt; _NXXNXXXXXX,1,Dial(PJSIP/flowroute-endpoint/sip:[tech-prefix]*+1${EXTEN}@us-east-va.sip.flowroute.com)\n; After the call is completed, hang up the line.\nexten =&gt; _NXXNXXXXXX,n,Hangup()\n</code></pre> <p>To setup the 911 extension, add the following lines to the <code>[autopatch]</code> stanza:</p> <pre><code>; Match 911\nexten =&gt; 911,1,Dial(IAX2/voipms/${EXTEN})\n; The Dial command routes the call through the IAX2 channel to the \"voipms\" trunk,\n; passing the dialed number (${EXTEN}) to the provider.\n\n; After the call is completed, hang up the line.\nexten =&gt; 911,n,Hangup()\n\n; Optional: Reroute 911 to another number\n; Uncomment the following lines to enable this feature:\n; Instead of routing 911 directly, reroute it to the specified number (e.g., 1234567890).\n; This could be used to route emergency calls to a different service or internal security.\n; exten =&gt; 911,1,Dial(IAX2/voipms/1234567890)\n; After the rerouted call is completed, hang up the line.\n; exten =&gt; 911,n,Hangup()\n</code></pre> <p>You will also want to add a <code>[reverse-autopatch]</code> stanza with the following lines:</p> <pre><code>; REVERSE-AUTOPATCH - REPEATER RECEIVES INCOMING CALLS\n\n[reverse-autopatch]\n; Change below to the voip DID number\nVOIPDID = 5555554321\n\nexten =&gt; _X.,1,Verbose(1, Caller ${CALLERID(all)} has entered IVR menu)\n; wait a bit before answering\nexten =&gt; _X.,n,Wait(2)\n\n; Answer the incoming call.\nexten =&gt; _X.,n,Answer()\n\n; Wait for 1 second to ensure the line is stable before playing the prompt.\nexten =&gt; _X.,n,Wait(1)\n\n; Optional: Bypass PIN for trusted caller\n; Uncomment the below line to enable this feature:\n; If the incoming call is from a trusted number (5551234567 or 5559876543 in this example),\n; skip the PIN code and go directly to the \"${VOIPDID}\" label.\n;exten =&gt; _X.,n,GotoIf($[\"${CALLERID(num)}\" = \"+15555551234\"]?5555554321,1)\n; Example of how to \"trust\" two (or more) phone numbers\n; exten =&gt; _X.,n,GotoIf($[\"${CALLERID(num)}\" = \"5551234567\" | \"${CALLERID(num)}\" = \"5559876543\"]?${VOIPDID},1)\n\n; Initialize an attempt counter\nexten =&gt; _X.,n,Set(ATTEMPTS=0)\n; Play a message that asks the caller to enter their PIN followed by the pound/hash key, along with other information like mute/unmute procedure, ID with callsign, etc.\nexten =&gt; _X.,n(start),Playback(message)\n\n; Wait for the caller to enter a 4-digit PIN.\n; - \"PIN\" is the variable where the entered digits will be stored.\n; - \"beep\" will play a beep sound to prompt the user.\n; - \"4\" specifies the PIN length (4 digits).\n; - \",,5\" sets a 5-second timeout for the user to start entering the PIN.\nexten =&gt; _X.,n,Read(PIN,beep,4,,,5)\n\n; SET YOUR PIN(s) HERE! THESE PIN(s) WILL BE USED TO PATCH INTO THE REPEATER\n; Check if the entered PIN is one of the valid PINs.\n; - If the PIN is correct, the call will go to the label \"wait-for-pound\".\n; - If not, it will continue to the next step.\nexten =&gt; _X.,n,GotoIf($[\"${PIN}\" = \"1234\"]?wait-for-pound)\n; Example of how to set up two (or more) PINs:\n; exten =&gt; _X.,n,GotoIf($[\"${PIN}\" = \"1234\" | \"${PIN}\" = \"5678\"]?wait-for-pound)\n\n; Increment the attempt counter\nexten =&gt; _X.,n,Set(ATTEMPTS=$[${ATTEMPTS}+1])\n\n; If the PIN is invalid, play a message saying it was incorrect.\n; \"confbridge-invalid\" says: \"You have entered an invalid option.\"\nexten =&gt; _X.,n,Playback(confbridge-invalid)\n\n; Check if the attempt counter has reached 3\nexten =&gt; _X.,n,GotoIf($[${ATTEMPTS} &gt;= 3]?too-many-failures)\n\n; Go back to the start and ask the user to enter the PIN again.\n; This gives the user another chance to enter a valid PIN.\nexten =&gt; _X.,n,Goto(start)\n\n; If the user fails to enter a valid PIN after 3 attempts, play a message saying they have entered too many invalid PINs.\n; \"confbridge-pin-bad\" says: \"You have entered too many invalid personal identification numbers.\"\nexten =&gt; _X.,n(too-many-failures),Playback(confbridge-pin-bad)\n\n; Hang up the call after the failure message.\nexten =&gt; _X.,n,Hangup()\n\n; After the valid PIN is entered, wait for the user to press the \"#\" key.\n; - This command waits for the user to press \"#\" to confirm the PIN entry.\n; - The 5-second timeout will give the user time to press \"#\".\nexten =&gt; _X.,n(wait-for-pound),WaitExten(5)\n\n; If the user presses \"#\", go to the \"${VOIPDID}\" label.\nexten =&gt; #,1,Goto(${VOIPDID},1)\n\n; If \"#\" is not pressed, go to the start label.\nexten =&gt; _X.,89,Goto(start)\n\n; If the correct PIN was entered and \"#\" was pressed, play a message confirming the connection.\n; \"rpt/connected\" could say something like: \"You are now connected.\"\nexten =&gt; ${VOIPDID},1,Playback(rpt/connected)\n\n; Connect the caller to the repeater using the \"rpt\" command.\n; The \"|P\" option is used to specify \"phone\" mode in app_rpt.\nexten =&gt; ${VOIPDID},n,rpt(${NODE}|Pv)\n\n; Hang up the call after the connection is made.\nexten =&gt; ${VOIPDID},n,Hangup()\n</code></pre>"},{"location":"adv-topics/autopatch/#iaxconf","title":"<code>iax.conf</code>","text":"<p>If using an IAX provider, you will need to update the <code>/etc/asterisk/iax.conf</code> file. Items in between brackets should be replaced with specific account info, except the stanza names themselves:</p> <p>First, add the following lines to the <code>[general]</code> stanza:</p> <pre><code>; ENTER YOUR VOIP.MS CREDENTIALS AND SERVER HERE\nregister =&gt; [VOIPMS_ID]:[VOIPMS_PASSWORD]@[VOIPMS_HOST]\n; Example: register =&gt; 123456:supersecretpassword@dallas1.voip.ms\n</code></pre> <p>Then, add this new stanza:</p> <pre><code>[voipms]\nusername=[VOIPMS_ID]; ENTER YOUR 6-DIGIT VOIP.MS USERNAME HERE\ntype=friend\ncontext=reverse-autopatch\nhost=[VOIPMS_HOST]; ENTER THE VOIP.MS SERVER ADDRESS YOU SELECTED FOR YOUR DID HERE\nsecret=[VOIPMS_PASSWORD]; ENTER YOUR VOIP.MS IAX PASSWORD HERE\ndisallow=all\nallow=ulaw\nallow=g726aal2\nallow=gsm\ncodecpriority=host\ninsecure=port,invite\nrequirecalltoken=yes\n</code></pre>"},{"location":"adv-topics/autopatch/#pjsipconf","title":"<code>pjsip.conf</code>","text":"<p>If using a SIP provider, replace (or create) the <code>/etc/asterisk/pjsip.conf</code> file. The file (below) is based on a node behind NAT and should be updated for specific providers and accounts:</p> <pre><code>;===============TRANSPORT\n\n[sip-trans]\ntype=transport\nprotocol=udp\nbind=0.0.0.0\nlocal_net=[LAN Network IP]/24\nlocal_net=127.0.0.1/32\nexternal_media_address=[INET IP]\nexternal_signaling_address=[INET IP]\n\n;===============TRUNK\n\n[flowroute-reg]\ntype=registration\noutbound_auth=flowroute-auth\nserver_uri=sip:us-east-va.sip.flowroute.com\nclient_uri=sip:[Tech Prefix]@us-east-va.sip.flowroute.com\nretry_interval=60\ncontact_user=[VOIP DID]@[WAN IP]\n\n[flowroute-auth]\ntype=auth\nauth_type=userpass\npassword=[password]\nusername=[Tech Prefix]\n;realm=us-west-or.sip.flowroute.com\n\n[flowroute-aor]\ntype=aor\ncontact=sip:[WAN IP]:5060\n\n[flowroute-endpoint]\ntype=endpoint\ncontext=reverse-autopatch\ndisallow=all\nallow=ulaw\nallow=g726aal2\nallow=alaw\nallow=gsm\n;outbound_auth=flowroute-auth\naors=flowroute-aor\n;outbound_proxy = sip:us-west-or.sip.flowroute.com\nfrom_domain=[WAN IP]\n\n[flowroute-id]\ntype=identify\nendpoint=flowroute-endpoint\nmatch=us-east-va.sip.flowroute.com\n</code></pre>"},{"location":"adv-topics/autopatch/#simplex-autopatch","title":"Simplex Autopatch","text":"<p>For nodes with duplex set to <code>0</code> or <code>1</code>, simplex autopatch operation is supported. This is accomplished by using a VOX on the audio coming from the telephone call,  because of the half-duplex nature of the node. To avoid having audio from the telephone call keep the transmitter engaged for extended periods of time (if there  is some source of continuous audio), there are two time-out values. </p> <p>VOX timeout, which is the maximum amount of time that the VOX can hold the transmitter engaged, which by default is 10 seconds. The other one is the VOX recovery time, which is the amount of time that the VOX is disabled during times of continuous audio, after the VOX timeout, which is 2 seconds. During continuous audio, it transmits for  10 seconds, then stops for 2 seconds (so that you can transmit to it and perhaps disconnect the call), then transmits for another 10 seconds, then stops for 2 seconds. This repeats until the call is disconnected.</p> <p>Additionally, to prevent \"chop-off\" of the first syllable or two of the audio from the telephone call, the audio is delayed to allow for the transmitter to start transmitting  and any CTCSS tones to be decoded. This delay is typically 500ms, but can be adjusted using the <code>simplexpatchdelay</code> parameter. It is specified in units of 20 milliseconds.</p> <p>These time-out values may be overridden by using the following configuration parameters located in the [nodenumber] section of <code>rpt.conf</code>:</p> <pre><code>[1999]\nvoxtimeout = 10000     ; VOX timeout time in ms\nvoxrecover = 2000      ; VOX recover time in ms\nsimplexpatchdelay = 25 ; Delay for transmit while in patch in 20ms increments\nsimplexphonedelay = 25 ; Delay for phone while in patch for 20ms increments\n</code></pre>"},{"location":"adv-topics/broadcastify/","title":"Streaming Node Audio to Broadcastify","text":"<p>To broadcast your node's audio on Broadcastify, you will need a Broadcastify account. You can then apply for a feed. This link provides information on applying for a feed.</p> <p>After you have your account and feed credentials, you a ready to setup AllStarLink.</p>"},{"location":"adv-topics/broadcastify/#setup-a-feed","title":"Setup a Feed","text":"<ul> <li>Log into your node either using <code>Cockpit</code> or SSH and type the following commands:</li> </ul> <pre><code>sudo apt update\nsudo apt install libshout-dev libtagc0-dev lame ezstream\n</code></pre> <ul> <li>Edit <code>/etc/ezstream.xml</code> with your favorite editor, for example <code>sudo nano -w /etc/ezstream.xml</code>. You will be creating a new file. Copy, paste, and edit the following contents into the file:</li> </ul> <pre><code>&lt;ezstream&gt;\n    &lt;servers&gt;\n        &lt;server&gt;\n            &lt;protocol&gt;HTTP&lt;/protocol&gt;\n            &lt;hostname&gt;Replace with Broadcastify URL&lt;/hostname&gt;\n            &lt;port&gt;80&lt;/port&gt;\n            &lt;password&gt;Replace with your stream password&lt;/password&gt;\n            &lt;tls&gt;none&lt;/tls&gt;\n        &lt;/server&gt;\n    &lt;/servers&gt;\n\n    &lt;streams&gt;\n        &lt;stream&gt;\n            &lt;mountpoint&gt;Replace with your mount point path&lt;/mountpoint&gt;\n            &lt;format&gt;MP3&lt;/format&gt;\n                &lt;stream_name&gt;Replace with your feed name&lt;/stream_name&gt;\n                &lt;stream_url&gt;Your web page&lt;/stream_url&gt;\n                &lt;stream_genre&gt;Amateur Radio&lt;/stream_genre&gt;\n                &lt;stream_description&gt;Replace with your stream description&lt;/stream_description&gt;\n                &lt;stream_bitrate&gt;16&lt;/stream_bitrate&gt;\n                &lt;stream_channels&gt;1&lt;/stream_channels&gt;\n                &lt;stream_samplerate&gt;22050&lt;/stream_samplerate&gt;\n                &lt;stream_public&gt;Yes&lt;/stream_public&gt;\n        &lt;/stream&gt;\n    &lt;/streams&gt;\n\n    &lt;intakes&gt;\n        &lt;intake&gt;\n            &lt;type&gt;stdin&lt;/type&gt;\n        &lt;/intake&gt;\n    &lt;/intakes&gt;\n&lt;/ezstream&gt;\n</code></pre> <ul> <li> <p>Save the file</p> </li> <li> <p>Ensure the file is owned and readable only by the Asterisk user:</p> </li> </ul> <pre><code>sudo chown asterisk:asterisk /etc/ezstream.xml\nsudo chmod 660 /etc/ezstream.xml\n</code></pre> <ul> <li> <p>Edit <code>/etc/asterisk/rpt.conf</code> with your favorite editor, i.e. <code>sudo nano -w /etc/asterisk/rpt.conf</code></p> </li> <li> <p>Locate the node stanza for the node from which to stream to Broadcastify. The stanza is <code>[NNNNN](node-main)</code>. For example, if your node is 63001 then look for <code>[63001](node-main)</code>. Within that configuration stanza, add the following line:</p> </li> </ul> <pre><code>outstreamcmd = /bin/sh,-c,/usr/bin/lame --preset cbr 16 -r -m m -s 8 --bitwidth 16 - - | /usr/bin/ezstream -qvc /etc/ezstream.xml\n</code></pre> <p>The above parameters have these meanings:</p> <pre><code>-- preset cbr 16` = use constant bit rate 16\n-r = Assume the input file is raw pcm\n-m m = Mode mono\n-s 8 = sample rate 8\n--bitwidth 16 = bit width is 16 (default)   \n</code></pre> <ul> <li>After these changes have been made, you will need to restart Asterisk:</li> </ul> <pre><code>sudo systemctl restart asterisk\n</code></pre> <p>If you experience any problems, look at <code>/var/log/ezstream.log</code> for error messages</p>"},{"location":"adv-topics/broadcastify/#migrating-an-existing-feed","title":"Migrating an Existing Feed","text":"<p>If you have an existing feed, you will need to upgrade your existing <code>xml</code> configuration file to the new format. You can use the following commands:</p> <pre><code>cd /etc\nezstream-cfgmigrate -0 ezstream.xml &gt; ezstream.xml.new\ncp ezstream.xml ~/\nmv ezstream.new ezstream.xml\n</code></pre>"},{"location":"adv-topics/commands/","title":"New Commands","text":"<p>ASL3 is overall very similar to older versions (ASL2). However, due to the upgrade to Asterisk 20 (and newer), there are things that have changed. In addition, some new commands are now available.</p> <p>New and different commands to interact with ASL3 are documented here. Older ASL2 commands are still documented on the AllStarLink Wiki, and may still be applicable (with some modifications) to ASL3. The Wiki documentation will remain as a reference, until all the documentation can be updated for ASL3, and added to this manual. </p> <p>All these commands are available when using the Asterisk Command Line Interface (CLI), also known as the Asterisk Console. This can be accessed through the <code>Cockpit</code> Terminal, from <code>asl-menu</code>, or directly from the Linux terminal with <code>asterisk -rvvv</code> or <code>sudo asterisk -rvvv</code>, depending on your system configuration. </p>"},{"location":"adv-topics/commands/#app_rpt-commands","title":"<code>app_rpt</code> commands","text":"<p>These commands interact with the <code>app_rpt</code> application itself:</p> <ul> <li> <p><code>rpt show channels &lt;node&gt;</code> shows the channel driver information associated with the node</p> </li> <li> <p><code>rpt show variables &lt;node&gt;</code> (replaces <code>rpt showvars</code>) shows the current value of all the <code>app_rpt</code> variables for the node</p> </li> <li> <p><code>rpt show version</code> shows the current version of the <code>app_rpt</code> module specifically</p> </li> <li> <p><code>rpt show registrations</code> is the new command to show HTTP registrations. ASL3 uses a new HTTP registration system. The old IAX registration system and <code>iax2 show registry</code> command still exist, but HTTP registration should be used in its place.</p> </li> <li> <p><code>rpt lookup &lt;node&gt;</code> can be used to lookup the IP address of a node. In addition to the new registration system, ASL3 now implements a DNS lookup of node information. By default, ASL3 will first query the AllStarLink DNS servers to resolve node information. It will fall back to the external <code>rpt_extnodes</code> file, if the node cannot be resolved by DNS.</p> </li> </ul> <p>For example, <code>rpt lookup 2000</code> will show the IP of node 2000. If you have the <code>bind9-host</code> package installed on your system, the equivalent Linux CLI command to query the IP would be <code>host 2000.nodes.allstarlink.org</code>.</p> <p>The node lookup routines will output debug information showing the node lookups, if the <code>debug</code> level is set to <code>4</code> or higher.</p> <p>The operation of this ASL3 feature can be controlled by changing the following information in <code>rpt.conf</code>:</p> <pre><code>[general]\nnode_lookup_method = both   ;method used to lookup nodes\n                            ;both = dns lookup first, followed by external file (default)\n                            ;dns = dns lookup only\n                            ;file = external file lookup only\n</code></pre>"},{"location":"adv-topics/commands/#chan_simpleusb-commands","title":"chan_simpleusb commands","text":"<p>The command <code>susb show settings</code> is used to interact with the <code>SimpleUSB</code> channel driver, and will show the current node's settings. This replaces <code>susb tune</code>. The module must be loaded for this command to work.</p>"},{"location":"adv-topics/commands/#chan_usbradio-commands","title":"chan_usbradio commands","text":"<p>The command <code>radio show settings</code> is used to interact with the <code>USBRadio</code> channel driver, and will show the current node's settings. This replaces <code>radio tune</code>. The module must be loaded for this command to work.</p>"},{"location":"adv-topics/commands/#simpleusb-and-usbradio-tune-menus","title":"SimpleUSB and USBRadio Tune Menus","text":"<p>The <code>simpleusb-tune-menu</code> and <code>radio-tune-menu</code> utility programs have been updated with new options. These are accessed from the Linux CLI (not the Asterisk CLI). The new options allow you change the operation of the respective channel driver, in realtime, without having to manually edit the <code>simpleusb.conf</code> or <code>usbradio.conf</code> files.</p> <p>In addition to the updating settings, you can now view the live status of the COS, CTCSS inputs and PTT output. This allows you to easily view and change their settings.</p>"},{"location":"adv-topics/commands/#chan_echolink-commands","title":"chan_echolink commands","text":"<p>The Echolink channel driver (module) must be loaded for these commands to work. These commands interact directly with the <code>chan_echolink</code> channel driver: </p> <p><code>echolink show nodes</code>  is used to view the currently connected Echolink users.</p> <p><code>echolink show stats</code>  is used to view the channel statistics for Echolink. It shows the number of in-bound and out-bound connections. It also shows the cumulative system statistics, along with the statistics for each connected nodes.</p>"},{"location":"adv-topics/commands/#app_gps-commands","title":"app_gps commands","text":"<p>The <code>app_gps</code> module must be loaded for this command to work. This command interacts directly with the <code>app_gps</code> application: </p> <p><code>gps show status</code> is used to view the status of the GPS device. It will show if the GPS is locked on the satellites and the current position. It also shows the default location configured.</p> <p>The <code>app_gps</code> module is used with APRStt and for reporting the position of (mobile) nodes to APRS-IS, in conjunction with an attached GPS.</p>"},{"location":"adv-topics/commands/#verbosity-and-debug-levels","title":"Verbosity and Debug Levels","text":"<p>Previously, <code>app_rpt</code>, associated applications, and channel drivers supported setting the debug level with a unique command for those modules. These unique commands have been removed in ASL3, and replaced with the stock Asterisk <code>debug</code> commands.</p> <p>See how to set verbosity and debug levels in the CLI for more information.</p> <p>Examples:</p> <pre><code>core set debug 5 app_rpt\ncore set debug 3 chan_simpleusb\n</code></pre>"},{"location":"adv-topics/commands/#helper-scripts","title":"Helper Scripts","text":"<p>There are some new helper utilities that have been introduced with ASL3. See the ASL Commands and Tools page for further details.</p>"},{"location":"adv-topics/commands/#usb-eeprom-operation","title":"USB EEPROM Operation","text":"<p>Both <code>chan_simpleusb</code> and <code>chan_usbradio</code> allow users to store configuration information in the EEPROM attached to their interface (if equipped). </p> <p>The CM119A can have manufacturer information in the same area that stores the user configuration. </p> <p>The CM119B does not have manufacturer data in the area that stores user configuration. The manufacturer data cannot be overwritten. </p> <p>The user configuration data has been moved higher in memory to prevent overwriting manufacturer data. </p> <p>If you use the EEPROM to store configuration data, you will need to save it to the EEPROM after upgrading to ASL3. Use the <code>susb tune save</code> or <code>radio tune save</code> Asterisk CLI commands, as applicable to your installation.</p>"},{"location":"adv-topics/conftmpl/","title":"Asterisk Templates","text":"<p>ASL3 now uses templates for configuration files. This can make editing Asterisk config files less tedious. So far, ASL3 is using templated configurations in the <code>rpt.conf</code>, <code>simpleusb.conf</code>, <code>usbradio.conf</code>, and <code>gps.conf</code> files.</p>"},{"location":"adv-topics/conftmpl/#etcasteriskrptconf","title":"<code>/etc/asterisk/rpt.conf</code>","text":"<p>The <code>rpt.conf</code> file remains basically the same as it was in ASL2. However, the organization has changed to make it easier to maintain, particularly for multi-node systems.</p> <p>The template for a node in <code>rpt.conf</code> is named <code>[node-main]</code>, it contains all the \"default\" settings for all nodes on your system. Every node tagged with <code>(node-main)</code> inherits all the template settings. Settings changed in the node-specific stanza will override the same settings in the <code>[node-main]</code> template.</p> <p>As you will see, adding a new node requires the addition of just a few lines.  For example, adding three nodes to your system may need nothing more than:</p> <pre><code>[node-main](!)\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;; Template for all your nodes ;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; Set the defaults for your node(s) here.\n; Add your nodes below the line that says\n; Add you nodes below.\n\n...\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;; Configure your nodes here ;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;\n; Note: there is no need to duplicate entire settings. Only\n;       place settings that are different than the template.\n;\n[1999](node-main)\nrxchannel = SimpleUSB/1999\nidrecording = |iWB6NIL\nstartup_macro = *32000\n\n[1998](node-main)\n;this node would use the ID in the template\nrxchannel = Radio/1998\nmorse = morse_1998\n\n[1997](node-main)\n;This might be a hub node if \"rxchannel = dahdi/pseudo\" is in the template\n</code></pre> <p>In the above example, node 1997 will use all the settings configured in the <code>[node-main]</code> template. </p> <p>Node 1998 would use all the settings in the <code>[node-main]</code> template, but it would change the channel driver to <code>rxchannel = Radio/1998</code>, and that node will use a custom morse stanza, defined by <code>morse = morse_1998</code>. </p> <p>Node 1999 would use all the settings in the <code>[node-main]</code> template, but it would change the channel driver to <code>rxchannel = SimpleUSB/1999</code>, change the normal ID to <code>idrecording = |iWB6NIL</code>, and set the startup macro to <code>startup_macro = *32000</code>.</p>"},{"location":"adv-topics/conftmpl/#etcasterisksimpleusbconf-and-etcasteriskusbradioconf","title":"<code>/etc/asterisk/simpleusb.conf</code> and <code>/etc/asterisk/usbradio.conf</code>","text":"<p>The <code>/etc/asterisk/simpleusb.conf</code> and <code>/etc/asterisk/usbradio.conf</code> files have also adopted a templated configuration. Again, the template for a node is named <code>[node-main]</code>. Every node tagged with <code>(node-main)</code> inherits all the template settings. Settings changed in the node-specific stanza will override the same settings in the <code>[node-main]</code> template.</p>"},{"location":"adv-topics/conftmpl/#etcasteriskgpsconf","title":"<code>/etc/asterisk/gps.conf</code>","text":"<p>The <code>/etc/asterisk/gps.conf</code> file has also adopted a templated configuration. The template for a node is named <code>[general]</code>. Every node tagged with <code>(general)</code> inherits all the template settings. Template settings are overwritten by nodes with <code>(general)</code> attached.</p>"},{"location":"adv-topics/conftmpl/#asl-menu-support","title":"ASL Menu Support","text":"<p>The new <code>asl-menu</code> is fully aware of the templated configuration and handles adding, updating, and removing nodes.</p>"},{"location":"adv-topics/daq/","title":"DAQ Subsystem","text":"<p>The DAQ subsystem code is unsupported, and is documented for reference only. Most of the information below comes from interpreting the source code.</p> <p>There is support in <code>rpt.conf</code> that interfaces with a Digital Acquisition device (DAQ).</p> <p>It appears that the DAQ subsystem was probably written to interface to the Starting Point Systems uChameleon(v1) DAQ. It appears that they still sell the Version 2, but the Version 1 has been discontinued, and they have no links to the documentation for it. </p> <p>The user manual for the uChameleon2 has been archived here, in case the manufacturer's website disappears.</p> <p>The reasoning for suspecting the code was written for the Version 1 DAQ is that <code>rpt_uchameleon.c</code> expects the device to return an identification of <code>id Chameleon</code>, but according to the manual, the Version 2 DAQ should respond with <code>id \u03bcChameleon2</code>. Code inspection also leads to configuration commands that match the User Manual.</p> <p>A function call to this system would appear to use the following syntax:</p> <pre><code>dtmfcommand=meter,device,channel,meter-face,[filter]\n</code></pre> <p>This is similar to the way you would invoke a <code>cop</code> or <code>ilink</code> command.</p> <p>Sample:</p> <pre><code>98 = meter,daq-cham-1,1,batvolts\n</code></pre> <p>The above example would query the dac-cham-1 device (defined in the <code>[daq-list]</code> stanza), on channel 1 (an analog input (inadc) channel), and invoke the batvolts <code>[meter-face]</code>, which should then play out over the air, 'The voltage is ? volts.\".</p> <p>The <code>device</code> and i/o pin parameters for the <code>channel</code> are defined in the <code>[daq-list]</code> stanza.</p> <p>The <code>meter-face</code> to be called is defined in the <code>[meter-face]</code> stanza.</p> <p>The <code>filter</code> parameter is optional, and can be one of the following:</p> <ul> <li>none</li> <li>max</li> <li>min</li> <li>stmin</li> <li>stmax</li> <li>stavg</li> </ul> <p>The stmin, stmax, and stavg are short-term min, max, and average, respectively.</p> <p>In addition to being able to read a value and say it over the air with the meter function, it also appears that the DAQ subsystem can be used as a rudimentary alarm system.</p> <p>NOTE: The DAQ only initializes when Asterisk is restarted (NOT on a reload from the console). If you make any config changes in <code>rpt.conf</code>, you will need to restart Asterisk completely to pick up the changes.</p> <p>NOTE: Make sure to place the following configuration stanzas in the configuration for your node (either the main configuration, or your node-specific configuration). By default in the current <code>rpt.conf</code>, they exist down near the bottom of the file, and they can never be reached to be parsed (as they exist outside a configured node stanza).</p>"},{"location":"adv-topics/daq/#daq-list-stanza","title":"DAQ List Stanza","text":"<p>The <code>[daq-list]</code> stanza defines the available DAQ devices, and the i/o pin configuration for each channel.</p> <pre><code>; Data Acquisition configuration\n[daq-list]\n;device = device_name1\n;device = device_name2\n;Where: device_name1 and device_name2 are stanzas you define in this file\n\ndevice = daq-cham-1\n\n; Device name\n[daq-cham-1]                    ; Defined in [daq-list]\nhwtype = uchameleon         ; DAQ hardware type\ndevnode = /dev/ttyUSB0  ; DAQ device node (if required)\n1 = inadc                       ; Pin definition for an ADC channel\n2 = inadc\n3 = inadc\n4 = inadc\n5 = inadc\n6 = inadc\n7 = inadc\n8 = inadc\n9 = inp                       ; Pin definition for an input with a weak pullup resistor\n10 = inp\n11 = inp\n12 = inp\n13 = in                       ; Pin definition for an input without a weak pullup resistor\n14 = out                        ; Pin definition for an output\n15 = out\n16 = out\n17 = out\n18 = out\n</code></pre> <p>These stanzas may normally appear in <code>rpt.conf</code> by default.</p>"},{"location":"adv-topics/daq/#meter-faces-stanza","title":"Meter Faces Stanza","text":"<p>Meter faces are used in conjunction with the meter function call to play a message over the air with the value read from the DAQ device.</p> <p>The meter faces are configured in the <code>[meter-faces]</code> stanza:</p> <pre><code>[meter-faces]\n\n; face = [scale|range|bit],[parameters],[words],?,[words]\n;\n;face = scale(scalepre,scalediv,scalepost),word/?,...\n;\n; scalepre = offset to add before dividing with scalediv\n; scalediv = full scale/number of whole units (e.g. 256/20 or 12.8 for 20 volts). MUST be &gt;1.\n; scalepost = offset to add after dividing with scalediv\n;\n;face = range(X-Y:word,X2-Y2:word,...),word/?,...\n;\n;face = bit(low-word,high-word),word/?,...\n;\n; word/? is either a word in /var/lib/asterisk/sounds or one of its subdirectories,\n; or a question mark which is  a placeholder for the measured value.\n;\n;\n; Battery voltage 0-20 volts\nbatvolts = scale(0,12.8,0),rpt/thevoltageis,?,ha/volts\n; 4 quadrant wind direction\n;winddir = range(0-33:north,34-96:west,97-160:south,161-224:east,225-255:north),rpt/thewindis,?\n; LM34 temperature sensor with 130 deg. F full scale\n;lm34f = scale(0,1.969,0),rpt/thetemperatureis,?,degrees,fahrenheit\n; Status poll (non alarmed)\n;light = bit(ha/off,ha/on),ha/light,?\n</code></pre> <p>The <code>face</code> is any variable name you desire (must match the call from the <code>meter function call</code>).</p> <p>The meter face type can be any one of <code>scale</code>, <code>range</code>, or <code>bit</code>.</p> <p>The <code>scale</code> meter face takes the following options:</p> <ul> <li>scalepre = offset to add before dividing with scalediv</li> <li>scalediv = full scale/number of whole units (e.g. 256/20 or 12.8 for 20 volts). MUST be &gt;1.</li> <li>scalepost = offset to add after dividing with scalediv</li> </ul> <p>The <code>bit</code> meter face takes two options:</p> <ul> <li>low-word = the sound file to play when the bit is 0</li> <li>high-word = the sound file to play when the bit is 1</li> </ul> <p>All of the meter faces then will play a list of comma-seperated words. Place a ? where you would like the value from the DAQ to be inserted.</p> <p>This stanza may not normally appear in <code>rpt.conf</code> by default.</p>"},{"location":"adv-topics/daq/#alarms-stanza","title":"Alarms Stanza","text":"<p>The DAQ subsystem can apparently monitor inputs from the DAQ device for a change of state, and then invoke a DTMF function (macro?) on a high to low and/or low to high transition.</p> <p>The alarms are configured in the <code>[alarm]</code> stanza:</p> <pre><code>[alarms]\n;\n;tag = device,pin,ignorefirst,node,func-low,func-hi\n;\n;tag = a unique name for the alarm\n;device = DAQ device to poll\n;pin = the device pin to be monitored\n;ignorefirstalarm = set to 1 to throwaway first alarm event, or 0 to report it\n;node = the node number to execute the function on\n;func-low = the DTMF function to execute on a high to low transition\n;func-high = the DTMF function to execute on a low to high transition\n;\n; a  '-' as a function name is shorthand for no-operation\n;\ndoor = daq-cham-1,9,1,2017,*7,-\n;pwrfail = daq-cham-1,10,0,2017,*911111,-\n</code></pre> <p>The above should be self-explanatory. You would need to configure a DAQ device in the <code>[daq-list]</code> stanza.</p> <p>In the above example, a door alarm (just a friendly label, not used for anything else) on <code>daq-cham-1</code> pin <code>9</code> would execute macro <code>*7</code> on node <code>2017</code> on a high to low transition of the pin. It would ignore the first occurrence of this alarm, but if it persists the next time the alarm system is polled, it would execute (no idea how often that is). </p> <p>This stanza may not normally appear in <code>rpt.conf</code> by default.</p>"},{"location":"adv-topics/dns-servers/","title":"DNS Servers","text":"<p>AllStarLink's DNS-based node lookup issues queries to Amazon's Route53 servers that are synchronized to the node registration database.  This allows clients to retrieve node information such as IP addresses and IAX ports.</p>"},{"location":"adv-topics/dns-servers/#dns-node-lookup","title":"DNS Node Lookup","text":"<p>The <code>nodes.allstarlink.org</code> domain name is populated with <code>SRV</code>, <code>TXT</code> and <code>A</code> records for every active node in the system.</p> <p>NOTE: The DNS records for a node will remain available for a period of time after a node is no longer active. </p>"},{"location":"adv-topics/dns-servers/#srv-record","title":"SRV Record","text":"<p>The <code>SRV</code> records return the IAX port of the server.</p> <p>A query such as:</p> <pre><code>dig SRV _iax._udp.&lt;nodenumber&gt;.nodes.allstarlink.org\n</code></pre> <p>will return a record for a node as follows:</p> <pre><code>_iax._udp.50000.nodes.allstarlink.org. 30 IN SRV 10 10 4569 50000.nodes.allstarlink.org.\n</code></pre> <p>where 4569 is the IAX port.</p> <p>A remote base node will return a record like:</p> <pre><code>_iax._udp.50000.nodes.allstarlink.org. 30 IN SRV 10 10 4569 50000.remotebase.nodes.allstarlink.org.\n</code></pre>"},{"location":"adv-topics/dns-servers/#a-record","title":"A Record","text":"<p>The <code>A</code> records will return the IP address of the IAX server or the proxy IP, if defined.</p> <p>A query such as:</p> <pre><code>dig &lt;nodenumber&gt;.nodes.allstarlink.org\n\nand\n\ndig &lt;nodenumber&gt;.remotebase.nodes.allstarlink.org\n</code></pre> <p>will return:</p> <pre><code>2000.nodes.allstarlink.org. 60  IN  A   162.248.93.134\n</code></pre>"},{"location":"adv-topics/dns-servers/#txt-record","title":"TXT Record","text":"<p>The <code>TXT</code> record is used for debugging purposes with a query below:</p> <pre><code>dig TXT &lt;nodenumber&gt;.nodes.allstarlink.org\n</code></pre> <p>will return:</p> <pre><code>\"NN=50000\" \"RT=2019-02-28 18:41:29\" \"RB=0\" \"IP=44.98.248.144\" \"PIP=\" \"PT=4569\" \"RH=register-west\"\n</code></pre> <p>Where:</p> <ul> <li>NN is the node number</li> <li>RT is the last update registration time</li> <li>RB is 1 for node is not a remote base, RB is 0 if it is a remote base</li> <li>IP is the IP address of the node</li> <li>PIP is the proxy IP of the node if set</li> <li>PT is the IAX port</li> <li>RH is the registration server the node last registered to.</li> </ul>"},{"location":"adv-topics/dns-servers/#asl-node-lookup","title":"<code>asl-node-lookup</code>","text":"<p>On ASL3 systems, the <code>asl-node-lookup</code> command can also be used to query the DNS servers for information about a node.</p>"},{"location":"adv-topics/eurorptr/","title":"European Repeater Operation","text":"<p>We realize that there are different requirements for repeater operation in different parts of the world. Until recently, we have not dealt much with these, not out of insensitivity, but out of unfamiliarity.</p> <p>Two things have been brought to our attention that we have added functionality to support.</p>"},{"location":"adv-topics/eurorptr/#id-beaconing","title":"ID Beaconing","text":"<p>In the UK, it is necessary for a repeater to identify on a periodic basis, regardless of activity. This is controlled with the <code>beaconing</code> setting in <code>rpt.conf</code>. </p> <p>To enable this feature, set the <code>beaconing</code> option to <code>1</code> in the Node Number Stanza:</p> <pre><code>beaconing = 1                       ; Periodically identify at the idtime interval, regardless of activity\n</code></pre> <p>This option, when set to <code>1</code> will send the repeater ID at the <code>idtime</code> interval, regardless of whether there was repeater activity or not. By default (if not defined) this option is disabled.</p>"},{"location":"adv-topics/eurorptr/#rx-toneburst","title":"RX Toneburst","text":"<p>Also, many countries still require access to the repeater be with a tone burst (generally 1750 Hz). See the RX Toneburst page for how to enable that feature.</p>"},{"location":"adv-topics/hotspot_hd/","title":"Hot Spot Un-key Delay","text":"<p>When setting up a hot spot, select the <code>Duplex 1</code> option in <code>asl-menu</code> to allow the hot spot to function. However, the un-key delay of the radio transmitter will likely be too long.</p> <p>These steps will shorten the un-key delay and will greatly improve hot spot responsiveness:</p> <p>From the Linux CLI, launch the <code>asl-menu</code> with <code>sudo asl-menu</code>. Select the following options:</p> <ul> <li>Select <code>6. Expert Configuration Menu</code></li> <li>Select <code>1. Edit rpt.conf</code></li> <li>Select <code>2. /bin/nano   &lt;---- easiest</code> if asked</li> <li>Scroll down below the line with <code>[&lt;your node number&gt;](node-main)</code></li> <li>On a blank line that is above <code>[functions]</code><ul> <li>Type <code>wait_times = wait-times_hd</code></li> <li>Press enter and type <code>hangtime=100</code></li> <li>Save with ctrl-x, enter, yes</li> </ul> </li> <li>On the <code>asl-menu</code> select <code>&lt;Back to Main Menu&gt;</code></li> <li>Select <code>1. Node Settings</code></li> <li>Select <code>2. Restart Asterisk</code></li> <li>Select <code>&lt;Back&gt;</code></li> <li>Select <code>&lt;Exit Main Menu&gt;</code></li> <li>Select <code>&lt;Yes&gt;</code></li> </ul> <p>This setup will likely be a single menu selection with the next release of ASL3.</p>"},{"location":"adv-topics/httpreg/","title":"HTTP-Based Registration","text":"<p>AllStarLink is moving from IAX2 to HTTP registration. ASL3 has a new module for HTTP registration, which is used by default.</p> <p>The associated config file is <code>/etc/asterisk/rpt_http_registrations.conf</code>. The setting values are the same as they were in IAX2 registration.</p> <p>When you configure your node with <code>asl-menu</code>, no action is required. The <code>asl-menu</code> utility will populate the config file accordingly to enable HTTP registration.</p> <p>The contents of the <code>rpt_http_registrations.conf</code> file would typically look something like:</p> <pre><code>[General]\n\n[registrations]\n;Change the register =&gt; line to match your assigned node number and password.\nregister =&gt; 1999:password@register.allstarlink.org    ; This must be changed to your node number, password\n</code></pre> <p>While IAX registration still works, please do not register with both HTTP and IAX. That would result in unnecessary server load for no gain. </p> <p>The long term plan is to do away with IAX registration. HTTP registration allows load balancing and other advantages not available with IAX. The ASL2 IAX module has been replaced with the Asterisk LTS IAX2 module for upstream compatibility.</p> <p>If you feel you absolutely need to use IAX registration, see the IAX-Based Registration page in this section for more information.</p>"},{"location":"adv-topics/iaxreg/","title":"IAX-Based Registration","text":"<p>This documents how to use IAX-based registration instead of HTTP-based registration with ASL3.</p> <p>Do Not Do This \"Just Because\"</p> <p>Only convert your node to using IAX-based registration because you have a known problem using HTTP registration. Use of IAX registration requires significantly higher server use than HTTP registration, and 99+% of all users DO NOT have a reason to use it.</p>"},{"location":"adv-topics/iaxreg/#reason-to-use-iax-based-registration","title":"Reason to use IAX-Based Registration","text":"<p>The following are the only reasons to use IAX-based registration with ASL3:</p> <ol> <li> <p>Outbound HTTP/HTTPS is blocked, but you have outbound UDP port access available. For example, your node sits behind a proxy or other security or content filtering device that breaks ASLv3 registration. If you can browse web pages on your internet connection, this is not your situation.</p> </li> <li> <p>Your node is behind a connection that handles HTTP traffic differently than IAX traffic. Known examples are AT&amp;T and T-Mobile hotspots. These hotspots intercept/direct web (HTTP/HTTPS) traffic and route it differently from IAX traffic. In these cases, the HTTP-based registration will register a proxy/accelerator IP address, rather than the IP being used by the node.</p> </li> </ol>"},{"location":"adv-topics/iaxreg/#using-iax-registration-instead-of-http-registration","title":"Using IAX Registration Instead of HTTP Registration","text":"<p>To change from HTTP to IAX registration, do the following as root (i.e. use <code>sudo -s</code>):</p> <ol> <li> <p>Edit <code>/etc/asterisk/modules.conf</code> and change the line for <code>res_rpt_http_registrations.so</code> from \"load\" to \"noload\":</p> <pre><code>noload =&gt; res_rpt_http_registrations.so\n</code></pre> </li> <li> <p>Edit <code>/etc/asterisk/iax.conf</code> and add a <code>register =&gt;</code> line under the <code>[general]</code> stanza. This can be copied from a functional <code>rpt_http_registrations.conf</code> file:</p> <pre><code>[general]\nregister =&gt; 63001:VerySecret@register.allstarlink.org\n</code></pre> </li> <li> <p>Restart Asterisk with <code>systemctl restart asterisk</code></p> </li> <li> <p>Run the Asterisk CLI with <code>asterisk -r</code> and test the IAX registration with the command <code>iax2 show registry</code>:</p> <pre><code>node63001*CLI&gt; iax2 show registry\nHost                  dnsmgr  Username  Perceived                 Refresh  State\n34.105.111.212:4569   Y       63001     192.0.2.171:4569          180      Registered\n</code></pre> <p>If it lists \"State\" as \"Registered\" you're all set.</p> </li> </ol>"},{"location":"adv-topics/incompatibles/","title":"Incompatibilities, Changes, and Known Issues","text":""},{"location":"adv-topics/incompatibles/#incompatibilities-and-changes-fom-legacy-versions","title":"Incompatibilities and Changes Fom Legacy Versions","text":"<p>With the upgrade to Asterisk 20, and all the associated code changes that had to go along with it, ASL3 has certain incompatible with older versions of the AllStarLink system. There are also some changes in how certain things function.</p>"},{"location":"adv-topics/incompatibles/#voterrtcm-default-port","title":"VOTER/RTCM Default Port","text":"<p>Modern installations of Asterisk runs as the unprivileged <code>asterisk</code> user rather than as <code>root</code>. Linux typically prohibits non-root users from listening on a TCP port below <code>1024</code>. The default port for VOTERs/RTCMs was preiously port <code>667</code>. This has been changed to port <code>1667</code> to allow Asterisk to access the port, and connect to VOTERs/RTCMs.</p> <p>If the VOTER/RTCM port cannot be easily changed, then the following configuration change can be made to the underlying operating system:</p> <pre><code>echo net.ipv4.ip_unprivileged_port_start=667 &gt; /etc/sysctl.d/aslport667.conf\nsysctl -p\nsystemctl restart asterisk\n</code></pre> <p>If running the AllStarLink Pi Appliance (or another system with a firewall), inbound to port <code>667/UDP</code> must be permitted. For directions on how to do this with the Pi Appliance see Managing the Firewall. Don't forget to also allow this port through any firewall that may part of your internet connection.</p> <p>NOTE: While this workaround is available, its use is strongly discouraged, as it defeats a security measure in Linux. If at all possible, please try and update any of your VOTERs/RTCMs to use port <code>1667</code>. </p>"},{"location":"adv-topics/incompatibles/#pi-serial-ports-available-by-default","title":"Pi Serial Port(s) Available by Default","text":"<p>On the ASL3 Pi Appliance, the system comes pre-configured for <code>/dev/serial0</code> (formerly <code>/dev/ttyAMA0</code>) accessibility.</p> <p>That means that Bluetooth and the default serial console are disabled. Any directions requiring editing of <code>config.txt</code> or <code>cmdline.txt</code> are unnecessary with the ASL3 appliance.</p>"},{"location":"adv-topics/incompatibles/#pi-dev-entry-changes","title":"Pi <code>/dev</code> Entry Changes","text":"<p>As ASL3 is based on Debian 12, users with Raspberry Pi devices must note that the serial port on the Pi expansion header is now <code>/dev/serial0</code> rather than the historical <code>/dev/ttyAMA0</code>. If you are following directions for Pi serial port operations, such as programming an SA818/DRA818-based radio hat or a SHARI node, use <code>/dev/serial0</code> in place of the <code>/dev/ttyAMA0</code> reference.</p>"},{"location":"adv-topics/incompatibles/#usb-udev","title":"USB <code>udev</code>","text":"<p>A <code>udev</code> rule is needed to allow Asterisk running as non-root access to the USB system. ASL3 systems installed from <code>.debs</code> using <code>apt install</code>, or Raspberry Pi images will already have this rule in place, so no additional action is required. This is documented for advanced users and developers.</p> <pre><code>/etc/udev/rules.d/90-asl3.rules\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0d8c\", GROUP=\"plugdev\", TAG+=\"uaccess\"\n</code></pre> <p>The <code>udev</code> subsystem must be reloaded and then the USB device re-inserted into the port. <code>udev</code> is reloaded with the command:</p> <pre><code>udevadm control --reload\n</code></pre> <p>Alternatively, reboot the system.</p>"},{"location":"adv-topics/incompatibles/#simpleusb-and-usbradio-config-files","title":"SimpleUSB and USBRadio Config Files","text":"<p>The way USB audio interfaces are handled, including their config files has changed. See the USB Audio Interfaces page in this section for detailed information.</p>"},{"location":"adv-topics/incompatibles/#known-issues","title":"Known Issues","text":"<p>The following issues are currently known to exist in ASL3 and, where possible, what the workarounds are.</p>"},{"location":"adv-topics/incompatibles/#resize2fs_once-error","title":"resize2fs_once \"Error\"","text":"<p>There are intermittent cases of errors on the screen or in  the system logs about a failure of a service named <code>resize2fs_once.service</code> after the final first boot upon installation. The error may report that it \"Failed to start\" or \"timed out\". If the <code>/</code> partition has been properly resized, which has been the case in every known  occurrence of the error, then there is no action to take and the issue will not appear on subsequent reboots.</p> <p>A properly resized <code>/</code> should be a bit smaller than the full size of the SD card or USB drive used with the device.</p> <p>In Cockpit, look at the Storage tab:</p> <p></p> <p>In this example, <code>/</code> is a 31G partition on a 32G SD card.</p>"},{"location":"adv-topics/litz/","title":"Long Tone Zero (LiTZ)","text":"<p>LiTZ is a simple method to indicate to others on an amateur VHF / UHF FM radio frequency that you have an immediate need to communicate with someone, anyone, regarding a priority situation or condition.</p> <p>LiTZ stands for Long Tone Zero (i-added to make it easier to pronounce). The LiTZ signal consists of transmitting DTMF ZERO for at least 3 seconds. After sending the LiTZ signal, the node executes a pre-programmed DTMF control sequence.</p> <p>The parameters for setting the command string, for overriding the default DTMF tone for LITZ mode, and the required time for activation are as follows:</p> <pre><code>litzchar = 0     ; DTMF character required to initiate the LiTZ feature (default is 0)\nlitzcmd = *6911  ; Command sequence to execute upon LiTZ activation -- Call 911 on autopatch (default is not set)\nlitztime = 3000  ; Time required to hold down DTMF (default is 3000mS)\n</code></pre> <p>The above options would be placed in the node's configuration stanza in <code>rpt.conf</code>.</p> <p>By default, <code>litzcmd</code> is not set (blank), which disables the feature (as even if a user sends <code>litzchar</code> for <code>litztime</code>, there is nothing to execute).</p>"},{"location":"adv-topics/macros/","title":"Macros","text":""},{"location":"adv-topics/macros/#what-is-a-macro","title":"What is a 'macro'?","text":"<p>The purpose of a macro is to store a sequence of DTMF command(s). Macros may be called by direct command, by the system scheduler, or even by an external script. They can be a series of commands to make short work of a larger task.</p>"},{"location":"adv-topics/macros/#define-function","title":"Define Function","text":"<p>The first thing to configure when setting up macros is to define the <code>[function]</code> that will call them.</p> <p>This will define the DTMF prefix that will be used for calling macros.</p> <p>Example:</p> <pre><code>[functions]\n5 = macro\n</code></pre> <p>This will make <code>5</code> the prefix for calling a macro. Remember that the actual command needs to be prefixed with <code>funcchar</code>, which is typically <code>*</code>. So in this case, <code>*512</code> would call macro 12 (defined in the <code>[macro]</code> stanza). </p>"},{"location":"adv-topics/macros/#configuring-macro-stanzas","title":"Configuring Macro Stanzas","text":"<p>The next part of macro settings is the <code>macro=</code> setting in <code>rpt.conf</code>. The example here points to a stanza named <code>[macro]</code>. This is likely already in your config. If the <code>macro=</code> setting does not exist, the default is to use a stanza named <code>[macro]</code>.  </p> <pre><code>[1999]                              ; Assigned node number\nrxchannel = SimpleUSB/1999          ; Rx audio/signaling channel\nduplex=2\nlinktolink=no\ncontrolstates=controlstates         ; System control state list\nscheduler=scheduler\nevents=events\nmorse=morse\nmacro=macro                         ; &lt;===== note this in your rpt.conf, if it exists\ntonemacro=tonemacro\nfunctions=functions\nphone_functions=phone_functions\nlink_functions=link_functions\nwait_times=wait_times\ntelemetry=telemetry\n</code></pre> <p>If you have more than one node on a given server and you want all nodes to have the same macros, then the above <code>macro=macro</code> (or nothing defined) is fine. If you want to assign different macros to different nodes on the server, see the Structure of Config Files page which outlines how to redirect names to call other stanzas.</p> <p>Then, later in <code>rpt.conf</code> you need an actual <code>[macro]</code> stanza:</p> <pre><code>[macro]\n1=*81#                              ; Say time\n2=*81 P *31999 P *934#              ; Say time, pause, connect node 1999, pause, and turn off telemetry for net\n3=*31999 *934 *512#                 ; Here we connect node 1999, turn off telemetry, then call macro (12). \n12=*949#                            ; Disable incoming connections\n</code></pre>"},{"location":"adv-topics/macros/#macro-definitions","title":"Macro Definitions","text":"<p>Finally, define each desired macro in the appropriate <code>[macro]</code> stanza.</p> <p>Each macro command string is on the same line separated by a space, and ending the string with a <code>#</code> (hashtag). </p> <p>A <code>P</code> can be used to cause a pause of 500mS, or a series of them for more. This would allow time for a script or connection to execute before the next command is issued. The system reads/executes them left to right when called. You should test them after creating them to be sure timing has no interference before you actually need to use them. </p> <p>Looking at the above example, you can see how multiple DTMF commands can be chained together into a single macro, so that you wouldn't have to execute the commands individually.</p> <p>And note that use of our macro 2 (executed as <code>*52</code>) might also require us to create a new one to 'undo' any of our changes. Which, in this case, might be manually called at the end of the net.</p> <p>Example:</p> <pre><code>4=*11999 P *933#                    ; End of net macro, unlink from node 1999 and turn telemetry back on\n</code></pre>"},{"location":"adv-topics/macros/#scheduler-execution","title":"Scheduler Execution","text":"<p>With the example configuration shown, macros are called with a <code>*5</code> prefix and followed with the number assigned in the [macro] stanza.</p> <p>You can also call them from the system schedular by number. Calling a macro number is the only method the scheduler supports. So if you wish to schedule with the system scheduler, you need a macro to execute it.</p>"},{"location":"adv-topics/multinodesnetwork/","title":"Multiple Nodes on the Same Network","text":"<p>Multiple AllStarLink nodes on the same IP subnet (i.e. your \"local network\" or \"LAN\") when those nodes are behind a NAT device can be a challenge. The reason is that AllStarLink works exclusively with public IP addresses. </p> <p>When two (or more) nodes are on the same network behind the same NAT/router, they independently need to use a public IP address with the AllStarLink system, and they also need to know about each other's local IPs (rather than their shared public IP). Additionally, both nodes cannot use the same UDP port as they will fight over it with the NAT/router.</p> <p>For this example, let's consider two nodes on the same subnet (LAN). The nodes are:</p> Node Local IP 630010 192.168.0.10 630011 192.168.0.11 <p>These nodes are behind a NAT/router with a public IP address of 203.0.113.186.</p> <p>When each node connects and registers with AllStarLink, its perceived registration IP address will be 203.0.113.186. If another node asks \"where is node 630010\" it would get back the answer 203.0.113.186. However, this is also the case for the internal nodes. If node 630011 asks \"where is node 630010\" it also gets back 203.0.113.186. For various network reasons, this will not work.</p> <p>One also has to consider the UDP port. By default, each Asterisk system uses the default UDP port of <code>4569</code>. This is a published standard. However, through a NAT device, only one system can use the port at a time. Thus our local nodes 630010 and 630011 will fight over that port.</p> <p>To make two (or more) nodes on the same network function, the following steps must be taken:</p> <ol> <li>Assign each node's server a different IAX port</li> <li>Tell each node's server about the other node's internal address and port</li> </ol> <p>In this example, node 630011 will be assigned a different UDP port. The table then of the nodes is:</p> Node Local IP Port 630010 192.168.0.10 UDP 4569 630011 192.168.0.11 UDP 4570 <p>This document assumes one knows how to forward the port internally for one's router/NAT device and that is has already been done.</p>"},{"location":"adv-topics/multinodesnetwork/#assigning-a-different-iax-port","title":"Assigning a Different IAX Port","text":"<p>There are two places where the IAX port must be changed when using a non-standard port:</p> <ol> <li><code>/etc/asterisk/iax.conf</code></li> <li>The AllStarLink Portal for that node's server</li> </ol>"},{"location":"adv-topics/multinodesnetwork/#changing-iaxconf","title":"Changing <code>iax.conf</code>","text":"<p>The best way to edit the IAX port is to use <code>asl-menu</code>. Run <code>sudo asl-menu</code>. Choose 1 Node Settings and then 4 Update Asterisk IAX port. Set the new UDP port in the box and hit OK. Then choose 2 Restart Asterisk. Then close <code>asl-menu</code>.</p> <p>Alternatively, edit the file directly. As root (i.e. <code>sudo -s</code>), edit the file <code>/etc/asterisk/iax.conf</code>. Find the line:</p> <pre><code>bindport = 4569\n</code></pre> <p>and change it to a different port. The ASL3 appliance comes pre-configured to permit traffic on any port between <code>4560</code> and <code>4580</code>. It is recommended to choose a port in this range for any alternative IAX port. In this example, the node 630011 will be changed to port <code>4570</code>. Edit the file to state:</p> <pre><code>bindport = 4570\n</code></pre> <p>and save and close the file. Restart Asterisk with <code>systemctl restart asterisk</code>.</p>"},{"location":"adv-topics/multinodesnetwork/#changing-the-portal","title":"Changing the Portal","text":"<p>Server-Node Relationship</p> <p>Following the operating model, the base <code>Asterisk/app_rpt</code> installation is the \"Server\" and a \"Server\" hosts one or more \"Nodes\". Make sure that each node is assigned to a  different server if the nodes are configured on different installations.</p> <p>Do the following to change a node's server's IAX port.</p> <ol> <li> <p>Logon to https://allstarlink.org using your AllStarLink username and password.</p> </li> <li> <p>Click on Portal and then Node Settings.</p> </li> <li> <p>In the table, find the Server for the node you want to edit. In this example node 630011 is located on server node63011. Remember or jot down the server name.</p> </li> <li> <p>Click on Portal and then Server Settings.</p> </li> <li> <p>Click on the server from step #4 (in this case \"node630011\")</p> </li> <li> <p>In the field IAX Port change the port number to the port configured in Changing <code>iax.conf</code> above. In this example, the port will be <code>4570</code>.</p> </li> <li> <p>Click Submit</p> </li> </ol> <p>Propagation of the change takes 1-2 minutes.</p>"},{"location":"adv-topics/multinodesnetwork/#telling-local-nodes-about-their-neighbors","title":"Telling Local Nodes About Their Neighbors","text":"<p>Each node on the same network needs to be hardcoded with information about the other node. In this example, node 630010 needs to be hardcoded for where 630011 is and vice-versa.</p>"},{"location":"adv-topics/multinodesnetwork/#configuring-node-630010","title":"Configuring Node 630010","text":"<p>As root (i.e. <code>sudo -s</code>) edit the file <code>/etc/asterisk/rpt.conf</code>. Locate the line with the node's own definition. For example:</p> <pre><code>630010 = radio@127.0.0.1/630010,NONE\n</code></pre> <p>After this line, add its local neighbor by its IP address and the alternative IAX port. In this example, add 630011 as follows:</p> <pre><code>630010 = radio@127.0.0.1/630010,NONE\n630011 = radio@192.168.0.11:4570/630011,NONE\n</code></pre> <p>Note the inclusion of the port as <code>:4570</code>. This pattern can be repeated for multiple nodes on the same network. Save the file and restart asterisk with <code>systemctl restart asterisk</code>.</p>"},{"location":"adv-topics/multinodesnetwork/#configuring-node-630011","title":"Configuring Node 630011","text":"<p>The other node repeats same process but in the opposite direction. As root (i.e. <code>sudo -s</code>) edit the file <code>/etc/asterisk/rpt.conf</code>. Locate the line with the node's own definition. For example:</p> <pre><code>630011 = radio@127.0.0.1/630011,NONE\n</code></pre> <p>After this line, add its local neighbor by its IP address and the standard IAX port since it is unchanged. In this example, add 630010 as follows:</p> <pre><code>630011 = radio@127.0.0.1/630011,NONE\n630010 = radio@192.168.0.10:4569/630010,NONE\n</code></pre> <p>Note the inclusion of the port as <code>:4569</code>. This pattern can be repeated for multiple nodes on the same network. Save the file and restart asterisk with <code>systemctl restart asterisk</code>.</p>"},{"location":"adv-topics/multinodesnetwork/#testing-linking-locally","title":"Testing Linking Locally","text":"<p>Test linking the two nodes together to ensure configuration. In this example, node 630010 will connect to node 630011 using the Asterisk CLI:</p> <pre><code>rpt cmd 630010 ilink 3 630011\n</code></pre> <p>Then the link should be shown to 630011 with the command:</p> <pre><code>rpt nodes 630010\n</code></pre> <p>that should display:</p> <pre><code>node630010*CLI&gt; rpt nodes 630010\n\n************************* CONNECTED NODES *************************\n\nT630011\n</code></pre> <p>Disconnect the links with:</p> <pre><code>rpt cmd 630010 ilink 1 630011\n</code></pre> <p>After that, everything should work. The most common issue with this configuration is incorrect router/NAT port forwarding or a typo in <code>rpt.conf</code>.</p>"},{"location":"adv-topics/noderesolution/","title":"Node Resolution","text":"<p><code>app_rpt</code> has three ways to resolve a node number to an IP address:</p> <ul> <li>Statically entered in <code>rpt.conf</code></li> <li>Domain Name Service (DNS)</li> <li>An external node directory file</li> </ul> <p>The above mechanisms are used to translate a node number into its respective public IP address. Connections are made directly between nodes using their public IP addresses.</p> <p><code>app_rpt</code> first looks to see if the node is statically configured. If it is not found, the setting for <code>node_lookup_method</code> in the <code>[general]</code> stanza of <code>rpt.conf</code> determines the next step. The default setting is to perform a DNS lookup and if not found, attempt a lookup using the external file.</p> <p>The operation of this ASL3 feature is controlled by the following information in <code>/etc/asterisk/rpt.conf</code>.</p> <pre><code>[general]\nnode_lookup_method = both   ;method used to lookup nodes\n                    ;both = dns lookup first, followed by external file (default)\n                    ;dns = dns lookup only\n                    ;file = external file lookup only\n</code></pre> <p>The node lookup routines will output debug information showing the node lookups if the debug level is set to <code>4</code> or higher.</p> <p>NOTE: The AllStarLink network maintains security by requiring node owners to register with AllStarLink. Before a node is published to our directory it must successfully authenticate and register with our server. See HTTP Registration for more information.</p>"},{"location":"adv-topics/noderesolution/#external-node-directory-file","title":"External Node Directory File","text":"<p><code>app_rpt</code> can use an external node directory file to perform node resolution. The asl3-update-nodeList service is used to periodically download the current list of authenticated nodes.</p> <p>You may need to install the necessary software package for this function to be available, that can be installed via <code>apt</code> using:</p> <pre><code>sudo apt install asl3-update-nodelist\n</code></pre> <p>The name of this file is configured in <code>rpt.conf</code> using the <code>extnodefile=</code> key and value. By default the name of this file is <code>/var/lib/asterisk/rpt_extnodes</code>. Multiple files can be specified based on your requirements. The file names are separated with a comma.</p> <p>When a file based lookup is performed, <code>app_rpt</code> reloads the external file before searching for a match. This allows external scripts the opportunity to keep the file updated.</p> <p>Here is an example of the external file format:</p> <pre><code>[extnodes]\n\n2000=radio@162.248.93.134:4569/2000,162.248.93.134\n2001=radio@162.248.93.134:4569/2001,162.248.93.134\n</code></pre>"},{"location":"adv-topics/noderesolution/#domain-name-service-dns","title":"Domain Name Service DNS","text":"<p>AllStarLink now provides a DNS service for performing node resolution. DNS is an Internet standard and is more efficient than using a file base solution.</p> <p>When using DNS <code>app_rpt</code> must know the length of the longest node number. The current maximum is 6 digits. This number can be overridden in <code>rpt.conf</code> by adding the <code>max_dns_node_length=</code> key and value to the <code>[general]</code> stanza.</p> <p>For more information on DNS see AllStarLink DNS Servers.</p>"},{"location":"adv-topics/noderesolution/#statically-configured-node","title":"Statically Configured Node","text":"<p>In some cases, it is desirable to statically define the node information. This is commonly used for private nodes or private networks.</p> <p>To configure a static node, enter the information for the node in <code>rpt.conf</code> under the <code>[nodes]</code> stanza. Here is an example configuration:</p> <pre><code>[nodes]\n1001 = radio@192.168.0.1/1001,NONE\n1998 = radio@127.0.0.1:4568/1998,NONE\n1999 = radio@192.168.0.2:4569/1999,NONE\n</code></pre>"},{"location":"adv-topics/other-software/","title":"Other Software Products","text":"<p>The following information relates to software components related to AllStarLink.</p>"},{"location":"adv-topics/other-software/#web-dashboards","title":"Web Dashboards","text":"<p>The primary web dashboard supported by AllStarLink is Allmon3.</p> <p>However, we know there are other dashboards available and everyone has their own personal favorite. We also know that some of the other dashboards make use of the database file, <code>astdb.txt</code>. Typically, this database has been downloaded by a PHP script (<code>astdb.php</code>) and updated with the help of boot scripts and cron jobs.</p> <p>To support these other dashboards, we have included a <code>systemd</code> service to download and update the <code>astdb.txt</code> database. By default, this service and its associated timer are disabled. If you have installed a dashboard that is dependent on this database, you will need to execute the following commands:</p> <pre><code>sudo systemctl enable asl3-update-astdb.service\nsudo systemctl enable asl3-update-astdb.timer\nsudo systemctl start asl3-update-astdb.timer\n</code></pre>"},{"location":"adv-topics/permanentnode/","title":"Permanent Node Connection","text":"<p>As opposed to a \"normal\" connection to a remote note, a \"permanent\" connection will attempt to create a persistent connection that will try and keep the nodes connected together as much as possible.</p> <p>Specifically, permanent connections:</p> <ul> <li>Will continuously attempt to reconnect</li> <li>Survive network outages and far end reboots</li> <li>Near end reboots will NOT reconnect (use <code>startup_macro</code> for that)</li> <li>Must be disconnected by a \"permanent disconnect\" (<code>ilink,11</code>) command</li> <li>Either end may initiate the disconnect</li> <li>Does not block nodes from subsequently connecting again (use Allow and Deny Lists for that)</li> </ul> <p>You could, for example, utilize this to keep your VHF and UHF repeaters (nodes) linked together \"permanently\", or keep a node connected to a (private) node that might be a UHF link to another system. </p>"},{"location":"adv-topics/permanentnode/#configuration","title":"Configuration","text":"<p>The following commands should already exist in <code>rpt.conf</code>, but may need to be uncommented under your <code>[functions]</code> stanza:</p> <pre><code>811 = ilink,11                      ; Disconnect a previously permanently connected link\n812 = ilink,12                      ; Permanently connect specified link -- monitor only\n813 = ilink,13                      ; Permanently connect specified link -- transceive\n818 = ilink,18                      ; Permanently Connect specified link -- local monitor only\n</code></pre> <p>In other words a <code>*813nnnnn</code> DTMF command will permanent connect your node to the node number represented by nnnnn.</p> <p>If you would like a permanent connection automatically when your node boots you need a <code>startup_macro</code> to initiate the initial connection. </p> <p>For example, under your Node Number Stanza add:</p> <pre><code>startup_macro = *8131999            ; Permanently connect (transceive) to node 1999 when Asterisk starts            \n</code></pre> <p>Reload/restart your system and it will auto connect to the node you specified above.</p>"},{"location":"adv-topics/permissions/","title":"Permissions","text":""},{"location":"adv-topics/permissions/#asterisk-vs-root","title":"<code>asterisk</code> vs <code>root</code>","text":"<p>One of the new features with ASL3 is that the Asterisk process now runs as the <code>asterisk</code> user (not as the super-user, <code>root</code>). While sometimes handy, this was potentially very dangerous. This change was made for increased security. It's a good thing!</p> <p>We acknowledge that there are some applications, commands, and scripts that you may want to bring over from older (and other) versions of ASL and that these may be impacted by ASL3's heightened security. Porting these over to ASL3 may require some simple changes to filesystem permissions.</p> <p>Other issues may need other solutions (e.g. you can't execute a command that requires <code>root</code> privileges when you are not the <code>root</code> user).</p> <p>For guidance, reach out to the AllStarLink Community.</p> <p>In short, in ASL3 the Asterisk process now runs as the <code>asterisk</code> user. If you modify the <code>/etc/asterisk/rpt.conf</code> file to execute a command (or script) it will NOT have super-user (<code>root</code>) privileges. The command itself and any file it references must be readable by the <code>asterisk</code> user. Any files that the command needs to modify must be writable by the <code>asterisk</code> user. Lastly, the parent directory of any file being created must also be writable.</p> <p>Asterisk User and Sudo</p> <p>Do not give general access to <code>sudo</code> to the <code>asterisk</code> user. This is very dangerous and poor practice. While people will state, \"I've always done it this way\" it is, in fact, a serious security risk. As AllStarLink is run on the public internet for many repeater sites, the development team prioritizes security of the system. For common uses of this, namely restarting services and shutting down a node, see Managing Services and OS Shutdowns/Reboots.</p>"},{"location":"adv-topics/permissions/#filesystem-permissions","title":"Filesystem Permissions","text":"<p>The following is a very brief overview of Linux filesystem permissions. More in-depth information is available on the internet (search for \u201clinux file permissions\u201d).</p> <p>On a Linux system, each file (and directory) has permissions that effect access by the \u201cowner\u201d, permissions that effect access to those logins in the same \u201cgroup\u201d, and permissions that effect access to \u201cother\u201d logins. The permissions determine whether you (or some other process) can read, write, or execute the files (or search in directories). There are commands to change the ownership (<code>chown</code>) and permissions (<code>chmod</code>) for each file/directory.</p>"},{"location":"adv-topics/permissions/#file-permissions","title":"File permissions","text":"<p>You can use the <code>ls -l [FILE]</code> command to view file permissions. The permissions determine whether the calling process can read (<code>r</code>), write (<code>w</code>), or execute (<code>x</code>) the file.</p> <p>Here are some examples:</p> <pre><code>node63001:~/examples $ ls -l *file*\n-rw------- 1 root root     0 Aug  5 08:28 1-file-owner-root-can-read-write\n-rw-r----- 1 root asterisk 0 Aug  5 08:28 2-file-add-group-asterisk-can-read\n-rw-r--r-- 1 root asterisk 0 Aug  5 08:27 3-file-add-everyone-can-read\n\nnode63001:~/examples $ ls -l *script*\n-rwx------ 1 root root     0 Aug  5 08:28 1-script-owner-root-can-read-write-execute\n-rwxr-x--- 1 root asterisk 0 Aug  5 08:28 2-script-add-group-asterisk-can-read-execute\n-rwxr-xr-x 1 root asterisk 0 Aug  5 08:27 3-script-add-everyone-can-read-execute\n</code></pre> <p>In each case, the file permissions progress from the most restrictive (only the file owner can read/execute) to most available (all users can read/execute).</p>"},{"location":"adv-topics/permissions/#directory-permissions","title":"Directory permissions","text":"<p>You can use the <code>ls -ld &lt;directory&gt;</code> command to view the permissions on a directory (vs. the contents of a directory). The permissions determine whether the calling process can read (<code>r</code>), write (<code>w</code>), or search (<code>x</code>) the directory.</p> <p>Here are some examples:</p> <pre><code>node63001:~/examples $ ls -ld *dir*\ndrwx------ 2 root root     4096 Aug  5 09:56 1-dir-owner-root-can-read-write-search\ndrwxr-x--- 2 root asterisk 4096 Aug  5 09:56 2-dir-add-group-asterisk-can-read-search\ndrwxr-xr-x 2 root asterisk 4096 Aug  5 09:56 3-dir-add-everyone-can-read-search\n</code></pre> <p>In each case, the directory permissions progress from the most restrictive (only the directory owner can read/write/search) to most available (all users can read/search).</p>"},{"location":"adv-topics/permissions/#changing-permissions","title":"Changing permissions","text":"<p>The following commands can be used to change the permissions of files and directories:</p> Command Description Sample Usage chown change file owner and group <code># chown root /var/asl-backups/asl-backup-files</code> chgrp change group ownership <code># chgrp asterisk /var/spool/asterisk/monitor</code> chmod change file mode bits <code># chmod 640 /etc/asterisk/manager.conf</code> <p>Any process with \"write\" permission to a file can update (including completely overwrite) the file. A process with \"write\" permission to a directory can add/remove/rename files in that directory. If a command/script is writable then it can be changed to \"do something different\" when it is next executed.</p> <p>When updating filesystem permissions, please remember that doing so can potentially expose the contents of files (and directories) to others.</p> <p>Be cautious!</p>"},{"location":"adv-topics/permissions/#managing-services-and-os-shutdownsreboots","title":"Managing Services and OS Shutdowns/Reboots","text":"<p>ASL3 comes with a PolicyKit ruleset to permit the <code>asterisk</code> user to execute a limited number of commands without the need for <code>sudo</code> or prompting for a password. Those commands are:</p> <ul> <li><code>systemctl stop asterisk</code></li> <li><code>systemctl restart asterisk</code></li> <li><code>systemctl start asterisk</code></li> <li><code>systemctl stop allmon3</code></li> <li><code>systemctl restart allmon3</code></li> <li><code>systemctl start allmon3</code></li> <li><code>/usr/sbin/poweroff</code></li> <li><code>/usr/sbin/reboot</code></li> </ul> <p>Using a combination of wrapper scripts and appropriate function configuration, Asterisk can restart itself, Allmon3, shutdown the system, or reboot the system. Use of the wrapper scripts for <code>systemctl</code> commands is essential for a clean execution of the scripts under the polkit rules. The provided wrappers are:</p> <ul> <li><code>/etc/asterisk/scripts/allmon3-restart</code></li> <li><code>/etc/asterisk/scripts/allmon3-start</code></li> <li><code>/etc/asterisk/scripts/allmon3-stop</code></li> <li><code>/etc/asterisk/scripts/asterisk-restart</code></li> <li><code>/etc/asterisk/scripts/asterisk-start</code></li> <li><code>/etc/asterisk/scripts/asterisk-stop</code></li> </ul> <p>These privileges can be used inside <code>/etc/asterisk/rpt.conf</code> within the <code>[functions]</code> stanza as follows:</p> <pre><code>9001 = cmd,/etc/asterisk/scripts/asterisk-restart\n9002 = cmd,/etc/asterisk/scripts/asterisk-stop\n9003 = cmd,/etc/asterisk/scripts/allmon3-restart\n9004 = cmd,/etc/asterisk/scripts/allmon3-stop\n9005 = cmd,/usr/sbin/shutdown\n9006 = cmd,/usr/sbin/reboot\n</code></pre> <p>The command <code>*9001</code> would restart asterisk, <code>*9006</code> would reboot the system, etc.</p>"},{"location":"adv-topics/privatenodes/","title":"Private Nodes","text":"<p>Private nodes are nodes you create that do not directly connect to the AllStarLink (ASL) Network. In addition, you cannot directly connect to a private node from the ASL Network.</p> <p>They can co-exist on an existing server along with a public node, or they can run on independent hardware exclusively.</p>"},{"location":"adv-topics/privatenodes/#private-node-numbering","title":"Private Node Numbering","text":"<p>The numbering system for private nodes is limited to node numbers under 2000 (ie 0000-1999). However, in practice it would be best advised to use 4 digit number to not confuse other parts of the dial plan in present or future expansion (thus using 1000-1999).</p> <p>If a private node is going to be connected to an ASL Public Network node, you may want to consider using a node number outside of the normal node numbers used by examples in most how-to's, such as 1998 and 1999. This is due to \"loopback protection\" in the <code>app_rpt</code> code that prevents connection of the same node (detected as a loop) when you connect to other networks.</p> <p>For example, if you have a private node 1999 connected to your public node 29999, and you proceed to connect 29999 with some other system like 2135 that also has someone connected that has a private node 1999 connected, it will be refused. This has been the source of many hairs being pulled out when folks do not realize why they can not connect.</p> <p>Of course, there is a more modern solution to fix this issue, using a Node Number Extension with an assigned public Node Number. In this case, you would have a unique node number that can be set-up and just not registered to the ASL network (just comment out the appropriate registration line in <code>rpt_http_registrations.conf</code>). You could later change that to a public node just by un-commenting the registration line and reviewing your settings to be sure they are public friendly.</p>"},{"location":"adv-topics/privatenodes/#node-setup","title":"Node Setup","text":"<p>The easiest way to create a private node is to use the ASL3 Menu and use <code>Node Settings</code> to create a new node.</p> <p>This will create a new template in <code>rpt.conf</code> for you to customize the settings for your new node.</p>"},{"location":"adv-topics/privatenodes/#advanced-configuration","title":"Advanced Configuration","text":"<p>When a new node is created, a template for the node settings will be created in <code>rpt.conf</code>, such as:</p> <pre><code>;;;;;;;;;;;;;;;;;;; Your node settings here ;;;;;;;;;;;;;;;;;;;\n[1999](node-main)\nrxchannel = SimpleUSB/1999      ; SimpleUSB\n;startup_macro = *8132000\n</code></pre> <p>It will also create an entry in the <code>[nodes]</code> stanza to define how to connect/route calls to the node. Be sure to check that the options are correct for the <code>[nodes]</code> entry, based on what you are tying to do. If this is just another \"normal\" node on the same host, it will probably be okay with the defaults. If however, you were adding a remote base node, you're probably going to need to edit the entry.</p>"},{"location":"adv-topics/privatenodes/#connecting-to-other-private-nodes","title":"Connecting to Other Private Nodes","text":"<p>Remember, private nodes are just that, a node that you manage separately and independently from the ASL network. As such, the public ASL network knows very little (if anything) about the existence of your private node. As such, other public or private nodes have no idea how to connect to your private node, since they aren't registered in the public database (that stores all the IPs and ports on how to interconnect public nodes).</p> <p>As such, if you want to connect to another private node on your LAN, the public internet, or anywhere other than on the current device, you need to tell Asterisk how to reach that node.</p> <p>This is handled by making an entry in the <code>[nodes]</code> context in <code>rpt.conf</code>.</p> <p>If you want private nodes to be able to connect to each other, they both need to have corresponding entries in their <code>[nodes]</code> contexts, pointing at each other.</p> <p>Sample <code>rpt.conf</code> entries:</p> <pre><code>; Server 1 (at bar.domain.com)\n[nodes]\n1000 = radio@127.0.0.1/1000,NONE               ; Private node on this server \n1001 = radio@foo.domain.com/1001,NONE          ; Private node on a server at foo.domain.com (on default port 4569)\n1002 = radio@foo.domain.com:4570/1002,NONE     ; Private node on a different server at foo.domain.com (via NAT on WAN port 4570)\n2501 = radio@127.0.0.1/2501,NONE               ; Public node on this server\n\n; Server 2 (at foo.domain.com)\n[nodes]\n1000 = radio@bar.domain.com/1000,NONE          ; Private node on a server at bar.domain.com (on default port 4569) \n1001 = radio@127.0.0.1/1001,NONE               ; Private node on this server\n1002 = radio@192.168.1.10:4570/1002,NONE       ; Private node on a different server on our LAN (listening on port 4570)\n2502 = radio@127.0.0.1/2501,NONE               ; Public node on this server\n\n; Server 3 (at foo.domain.com on port 4570)\n1000 = radio@bar.domain.com/1000,NONE          ; Private node on a server at bar.domain.com (on default port 4569)\n1001 = radio@192.168.1.20/1001,NONE            ; Private node on a different server on our LAN (listening on port 4569)\n1002 = radio@127.0.0.1:4570/1002,NONE          ; Private node on this server (listening on port 4570)\n2503 = radio@127.0.0.1:4570/2501,NONE          ; Public node on this server\n</code></pre> <p>As you can see, all three servers have entries in their <code>[nodes]</code> context that identify the node number, the IP address (or domain name), and port (if not default) of the each other's private nodes. This will allow all of them to be able to connect to each other.</p> <p>See the section on Multiple Nodes on the Same Network for other considerations and tips on testing.</p> <p>Remember, a private node can do practically anything you can do with a public node. So, for example, one of those private nodes in the example above could be configured as an Echolink node, but only the nodes you have control of can access it (instead of any public node). Likewise, one of those private nodes could be connected to a UHF link to some other analog system, and this would let you \"link in\" to that system from your ASL node, but the public can't.</p> <p>You basically have a \"multi-port\" repeater controller that is pretty much as flexible as you desire.</p>"},{"location":"adv-topics/remotebase/","title":"Remote Base Nodes","text":"<p>The primary purpose of a remote base node is to make outgoing RF connections using a frequency agile radio to allow access to frequencies which are not part of your Internet connected radio system.</p> <p>Remote base nodes are configured differently than a standard node. A completely different set of internal functions in <code>Asterisk/app_rpt</code> is used when operating a node as a remote base. Usually, the only reason to set up a node as a remote base is when you wish to change the operating parameters of the the attached radio remotely, or if you only want the radio to be used by a single user at a time.</p> <p>If you want a public node number for a remote base, it must specifically be requested in the AllStarLink Portal. You must be sure to answer yes to <code>Is node a remote base station?</code>, and then optionally <code>If remote base, is it frequency agile?</code> questions. Alternatively, you can configure a private node.</p>"},{"location":"adv-topics/remotebase/#security-issues","title":"Security Issues","text":"<p>Unfettered access to remote bases can be a security issue. If the remote base has no login protection it could be used by unscrupulous individuals to violate amateur radio rules and regulations. We strongly advise that all remote bases be protected by requiring a login code (see Remote Base Authentication below). </p>"},{"location":"adv-topics/remotebase/#behavior-of-standard-nodes-versus-remote-base-nodes","title":"Behavior of Standard Nodes Versus Remote Base Nodes","text":"Behavior Standard Node Remote Base Node Command Decoding Remote or Local. DTMF can be optionally decoded on the receive audio input Remote only. No DTMF will be decoded on the receive audio input Duplexing Configurable: duplex or half-duplex Half-duplex only Frequency and Mode Agility Fixed frequency operation, and channelized operation only using arguments passed in to app_rpt from\u00a0extensions.conf Multiple connections Multiple nodes can connect. Operates as a conference bridge Only one node can connect at a time Login Protection No Optional"},{"location":"adv-topics/remotebase/#whats-required","title":"What's Required","text":"<p>In order to configure a remote base you will need the following:</p>"},{"location":"adv-topics/remotebase/#node-number","title":"Node Number","text":"<p>Either request a public node number or choose a private node number.</p>"},{"location":"adv-topics/remotebase/#radio-interface-audio","title":"Radio Interface (Audio)","text":"<p>A free port on a radio interface such a URI adapter must be made available for use by the remote base. This is needed for the audio transport and keying.</p>"},{"location":"adv-topics/remotebase/#radio-interface-cable-control","title":"Radio Interface Cable (Control)","text":"<p>A radio interface cable must be constructed or purchased to interface the radio to the node for control. Depending on the radio, this could be a USB to serial cable for CAT commands, or similar. </p>"},{"location":"adv-topics/remotebase/#supported-radios","title":"Supported Radios","text":"<p>See the <code>remote=</code> setting below for a list of supported or partially supported radios.</p>"},{"location":"adv-topics/remotebase/#remote-base-operation","title":"Remote Base Operation","text":"<p>The following is an example of how you would use a remote base:</p> <ul> <li>Send node *3&lt;node&gt; to connect to the remote base node</li> <li>Use <code>[functions_remote]</code> commands to operate the remote base</li> <li> <ul> <li>Send *4&lt;node&gt;*000# to set the remote base to memory channel 00</li> </ul> </li> <li> <ul> <li>Send *4&lt;node&gt;*1146*940*1# to set the VFO to 146.940-</li> </ul> </li> <li>Send *1&lt;node&gt; to disconnect from the remote base node</li> </ul>"},{"location":"adv-topics/remotebase/#remote-base-node-definition","title":"Remote Base Node Definition","text":"<p>A remote base needs to be defined as such in the <code>[nodes]</code> context. Specifically, the node definition would need to have the last option changed from \"NONE\" to \"Y\".</p> <p>Sample:</p> <pre><code>1998 = radio@127.0.0.1/1998,Y                  ; Remote base node on this server\n</code></pre>"},{"location":"adv-topics/remotebase/#remote-base-node-number-stanza","title":"Remote Base Node Number Stanza","text":"<p>The node number stanza is a critical stanza in <code>rpt.conf</code>. It is the same concept as for a \"normal node\". </p> <pre><code>[1998]    ; Replace with your assigned or private node number\n</code></pre> <p>The node number stanza is set to the assigned node number or a private node number (if a private node is being configured). The asl-menu utility, via the Node Setup menu, should normally be used to create node stanzas for both public and private nodes.</p> <p>The node number stanza contains all the configurable options for that specific node using a <code>key=value</code> pair syntax. The following configurable options are available to use:</p>"},{"location":"adv-topics/remotebase/#authlevel","title":"authlevel=","text":"<p>The <code>authlevel=</code> option is used to enable or disable login requirements for a remote base.</p> <ul> <li>authlevel = 0 Disables all access control (not recommended, unsecured)</li> <li>authlevel = 1 Enables access control, and waits for key up before prompting for the access code</li> <li>authlevel = 2 Enables access control, and prompts for the access code at the time of connection</li> </ul> <p>Sample:</p> <pre><code>authlevel = 0   ; allow everyone \n</code></pre> <p>See Remote Base Authentication and Remote Base TX Limits for additional details.</p>"},{"location":"adv-topics/remotebase/#civaddr","title":"civaddr=","text":"<p>ICOM radios use the ICOM Communications Interface V (CI-V) for remote control. The <code>civaddr=</code> is used to set the CI-V address. The value is a 2 digit hexadecimal number. If this option is not specified, then the CI-V address will be set to the default of 88.</p> <p>Sample:</p> <pre><code>civaddr = 88  ; set CIV to 88\n</code></pre>"},{"location":"adv-topics/remotebase/#dusbabek","title":"dusbabek=","text":"<p>This option is a \"Jim Special\", and documentation around it is sparse. It accepts parameters of <code>yes</code> or <code>no</code>, and MAY be required for the radio you are interfacing to. Try it, you may or may not need it.</p> <p>Specifically, it may be required for the Syntor-X (using <code>remote=xcat</code>).</p>"},{"location":"adv-topics/remotebase/#functions","title":"functions=","text":"<p>The <code>functions=</code> option is a pointer to a remote base function stanza. It operates the same as the normal <code>functions=</code> option. You will likely want to define a functions stanza that is unique for your remote base, so that you can tailor what functions are available to use. </p> <p>Sample:</p> <pre><code>functions = functions-remote   ; name the functions stanza 'functions-remote'\n\n[functions-remote]\n0=remote,1                              ; Retrieve Memory\n1=remote,2                              ; Set freq.\n2=remote,3                              ; Set tx PL tone\n3=remote,4                              ; Set rx PL tone\n40=remote,100                           ; Rx PL off\n41=remote,101                           ; Rx PL on\n42=remote,102                           ; Tx PL off\n43=remote,103                           ; Tx PL on\n44=remote,104                           ; Low Power\n45=remote,105                           ; Medium Power\n46=remote,106                           ; High Power\n51=remote,5                             ; Long status query\n52=remote,140                           ; Short status query\n61=remote,61                            ; Set mode to FM\n62=remote,62                            ; Set mode to USB\n63=remote,63                            ; Set mode to LSB\n64=remote,64                            ; Set mode to AM\n67=remote,210                           ; Send a *\n69=remote,211                           ; Send a #\n711=remote,107                          ; Bump down \u00ad20Hz\n714=remote,108                          ; Bump \u00addown 100Hz\n717=remote,109                          ; Bump \u00addown 500Hz\n713=remote,110                          ; Bump up 20Hz\n716=remote,111                          ; Bump up 100Hz\n719=remote,112                          ; Bump up 500Hz\n721=remote,113                          ; Scan -\u00ad slow\n724=remote,114                          ; Scan \u00ad- quick\n727=remote,115                          ; Scan \u00ad- fast\n723=remote,116                          ; Scan + slow\n726=remote,117                          ; Scan + quick\n729=remote,118                          ; Scan + fast\n79=remote,119                           ; Tune \n91=remote,99,CALLSIGN,[LICENSETAG]      ; Remote base login.\n                                        ; Define a different dtmf sequence for each user which is \n                                        ; authorized to use the remote base to control access to it.\n                                        ; For example: \n9139583=remote,99,WB6NIL,G              ; would grant access \n                                        ; to the remote base and announce WB6NIL as being logged in.\n                                        ; For example:\n9148351=remote,99,WA6ZFT,E              ; would grant access \n                                        ; to the remote base and announce WA6ZFT as being logged in.\n                                        ; When the remote base is disconnected from the originating \n                                        ; node, the user will be logged out. The LICENSETAG parameter \n                                        ; can be optionally specified to enforce TX band limits.\n98=cop,6                                ; Remote base telephone key\n</code></pre> <p>In the above example the digits to the left of the = are the DTMF code to dial (don't forget to prefix with <code>[funcchar]</code>, usually *).</p> <p>Command Mode</p> <p>When sending DTMF commands to a remote base, you need to send them in \"command mode\", usually *4 (ilink,4). So, if your remote base was defined as node 1998 and you are already connected to the node, you would set the remote base to high power by sending *41998*46.</p> <p>See Remote Base Commands for functions that are specifically available for remote base nodes.</p>"},{"location":"adv-topics/remotebase/#ioaddr","title":"ioaddr=","text":"<p>The <code>ioaddr=</code> option sets a parallel port control I/O address. It is specified as a hexadecimal number with a 0x prefix. The parallel port is used when the Doug Hall RBI-1 interface is employed.</p> <p>Sample:</p> <pre><code>ioaddr = 0x378   ; set RBI-1 /Parallel Port I/O address on LPT1\n</code></pre>"},{"location":"adv-topics/remotebase/#ioport","title":"ioport=","text":"<p>The <code>ioport=</code> option sets the serial port for the control interface to the remote base radio. On Linux Systems, these are typically path names to special files in the <code>/dev</code> directory.</p> <p>Sample:</p> <pre><code>ioport = /dev/ttyS1   ; Linux com1\n</code></pre> <p>or</p> <pre><code>ioport = /dev/ttyUSB0 ; USB to serial adapter\n</code></pre>"},{"location":"adv-topics/remotebase/#iospeed","title":"iospeed=","text":"<p>The <code>iospeed=</code> option sets the serial port baud rate for the control interface to the remote base radio.</p> <p>Sample:</p> <pre><code>iospeed = 4800         ; Use 4800 baud\n</code></pre> <p>Valid <code>iospeed</code> values are:</p> <ul> <li>2400</li> <li>4800</li> <li>9600 (default if <code>iospeed</code> is not specified)</li> <li>19200</li> <li>38400</li> <li>57600</li> </ul>"},{"location":"adv-topics/remotebase/#mars","title":"mars=","text":"<p>The <code>mars=</code> option is only used with the IC-706MKIIG remote. When set to <code>1</code>, it enables access to additional bands via remote, as shown below.</p> <p>Sample:</p> <pre><code>mars = 0        ; set to 1 to enable MARS bands\n</code></pre> <p>MARS bands available:</p> Band Frequency Range Allowed Mode LMR UHF 450-470MHz FM LMR VHF 148-174MHz FM VHF-AM 108-144MHz AM AM BCB 550-1750kHz AM HF SWL 1750kHz-30MHz AM"},{"location":"adv-topics/remotebase/#phone_functions","title":"phone_functions=","text":"<p>The <code>phone_functions=</code> is a pointer to a remote base phone function stanza. It operates the same as the normal <code>phone_functions=</code> option. You will likely want to define a phone functions stanza that is unique for your remote base, so that you can tailor what functions are available to use. </p> <p>Sample:</p> <pre><code>phone_functions = functions-remote\n\n[functions-remote]\n...\n</code></pre>"},{"location":"adv-topics/remotebase/#remote","title":"remote=","text":"<p>The <code>remote=</code> option sets the type of radio. It must be defined, as it ensures that the node will be defined as a remote base node and not a standard node, and determines the protocol for communicating with the radio over the <code>ioport</code>.</p> <p>Sample:</p> <pre><code>remote = xcat   ; set xcat interface\n</code></pre> Vendor Model remote= Value Notes N/A Dumb y Use for any single channel remote base radios, with no remote tuning capability N/A Parallel Port pp16 Parallel port programmable 16 channels? Perhaps parallel port BCD bit-banging, such for Motorola radios that can be driven from their accessory port? Interface information not available Doug Hall Remote Base Interface rbi Requires Parallel Port Address https://wiki.allstarlink.org/wiki/Remote_Base:_Doug_Hall_RBI-1 ICOM IC-706MKIIG ic706 IC-706MKIIG only. Must specify serial port using <code>ioport=</code>. Must specify CIV address using <code>civaddr=</code>. Also note <code>mars=</code> option. Earlier versions return data format is different and will lock up the software Kenwood Various kenwood Should work for many/most Kenwood radios, unless otherwise specified Kenwood TM-D700 tmd700 Kenwood TS-440 kenwood Some functions may not work Kenwood TS-450 kenwood Some functions may not work Kenwood TS-950 kenwood Some functions may not work Kenwood TM-271 tm271 Must specify serial port using <code>ioport=</code> Kenwood TMG-707 kenwood Must specify serial port using <code>ioport=</code> Motorola Syntor Xcat xcat Must specify serial port using <code>ioport=</code>. Must specify CIV address using <code>civaddr=</code> Ritron Patriot RTX-150 rtx150 Interface information not available Ritron Partiot RTX-450 rtx450 Yaesu FT-100 ft100 Must specify serial port using <code>ioport=</code>. Default <code>iospeed=</code> is set to 4800 Yaesu FT-897GXII ft100 See FT-100. Some commands may not work. Yaesu FT-857 ft897 Must specify serial port using <code>ioport=</code>. Default <code>iospeed=</code> is set to 4800 Yaesu FT-897 ft897 Must specify serial port using <code>ioport=</code>. Default <code>iospeed=</code> is set to 4800 Yaesu FT-890 ft100 See FT-100. Some commands may not work Yaesu FT-900 ft100 See FT-100. Some commands may not work Yaesu FT-950 ft950 Must specify serial port using <code>ioport=</code>. Default <code>iospeed=</code> is set to 38400 <p>Many Yaesu models should work for the most part with one of the above, back to 747/757 vintage for frequency and mode anyway. The FT-817 has completely different commands, so it won't work.</p>"},{"location":"adv-topics/remotebase/#remote_inact_timeout","title":"remote_inact_timeout=","text":"<p>This option specifies the amount of time without keying from the link, before the link is determined to be inactive. Set to <code>0</code> to disable timeout.</p> <p>Sample:</p> <pre><code>remote_inact_timeout = 0   ; do not time out\n</code></pre>"},{"location":"adv-topics/remotebase/#remote_timeout","title":"remote_timeout=","text":"<p>This option specifies the session time out for the remote base. Set to <code>0</code> to disable. This option does not appear to be implemented in code.</p> <p>Sample:</p> <pre><code>remote_timeout = 0   ; do not timeout\n</code></pre> <p>Default is 3600 (seconds?).</p>"},{"location":"adv-topics/remotebase/#remote_timeout_warning","title":"remote_timeout_warning=","text":"<p>This option does not appear to be implemented in code.</p> <p>Default is 180 (seconds?).</p>"},{"location":"adv-topics/remotebase/#remote_timeout_warning_freq","title":"remote_timeout_warning_freq=","text":"<p>This option does not appear to be implemented in code.</p> <p>Default is 30 (seconds?).</p>"},{"location":"adv-topics/remotebase/#rxchannel","title":"rxchannel=","text":"<p>This option contains the type of channel driver which is being used for the audio and control (COR/PTT) interface to the remote base.</p> <p>Sample:</p> <pre><code>rxchannel = SimpleUSB/1998\n</code></pre> <p>See the <code>rxchannel=</code> option for available channel drivers.</p>"},{"location":"adv-topics/remotebase/#split2m","title":"split2m=","text":"<p>This option defines the offset in kHz to use for 2m memory chanels. The default if not defined is 600 (kHz).</p>"},{"location":"adv-topics/remotebase/#split70cm","title":"split70cm=","text":"<p>This option defines the offset in kHz to use to 70cm memory channels. The default if not defined is 5000 (kHz), aka 5MHz.</p>"},{"location":"adv-topics/remotebase/#remote-base-commands","title":"Remote Base Commands","text":"<p>Remote base commands (<code>functionclass</code> of <code>remote</code>) provide DTMF functions for remote base control. The <code>remote</code> commands are only applicable to remote base node configurations.</p> remote Description Parameter(s) Accepted 1 Retrieve Memory 00 to 99 2 Set VFO Frequency MMM*kkk*o# where MMM is frequency in MHz, kkk is kHz portion of the frequency, o is offset (1=minus, 2=simplex, 3=positive) 3 Set TX PL Tone XXX*X ie 067*0 to set 67.0Hz 4 Set RX PL Tone XXX*X ie 067*0 to set 67.0Hz 5 Link Status Query (long) 6 Set Operating Mode m, where m is 1 (FM), 2 (USB), 3, (LSB), or 4 (AM) 99 Remote Base login CALLSIGN,LICENSETAG 100 RX PL Off Default 101 RX PL On 102 TX PL Off Default 103 TX PL On 104 Low Power 105 Medium Power 106 High Power 107 Bump -20Hz 108 Bump -100Hz 109 Bump -500Hz 110 Bump +20Hz 111 Bump +100Hz 112 Bump +500Hz 113 Scan - Slow 114 Scan - Quick 115 Scan - Fast 116 Scan + Slow 117 Scan + Quick 118 Scan + Fast 119 Tune (brief AM transmission for automatic tuners) 140 Link Status Query (brief) 210 Send a * 211 Send a # <p>Not all commands above are supported by all radios. For example, radios which don't support SSB, would not be able to be placed in LSB or USB mode.</p> <p>See the Remote Base Functions on how to define the DTMF commands for remote base functions.</p>"},{"location":"adv-topics/remotebase/#remote-base-authentication","title":"Remote Base Authentication","text":"<p>When <code>authlevel=</code> is greater than zero, the <code>remote,99</code> command is used to define a different DTMF sequence (password) for each user authorized to use the remote base. The remote base will announce the callsign as access is granted.</p> <p>If using an <code>authlevel</code> greater than zero, be sure to define users in your <code>[functions]</code> stanza to authenticate against.</p> <p>The format of the function is: <code>DTMF_Password = remote,99,CALLSIGN,LICENSETAG</code>.</p> <p>The <code>LICENSETAG</code> is the corresponding entry in the <code>[txlmiits]</code> stanza. The <code>LICENSETAG</code> is used for enforce TX frequency limits.</p> <p>Sample:</p> <pre><code>[1998]           ; node number for the remote base\n; authlevel = 0  ; Anyone can use it\n; authlevel = 1  ; Requires log in, Waits for Tx key to ask for it\nauthlevel = 2  ; Requires log in, asks for it automously\n\n[remote-functions]\n8xx=remote,99,OK,E ; where xx is the password\n</code></pre> <p>Sample:</p> <pre><code>9139583 = remote,99,WB6NIL,G   ; grant access to Jim (general)\n9148351 = remote,99,WA6ZFT,E   ; grant access to Steve (extra)\n</code></pre> <p>In the above example, DTMF \"*9139583\" would log in to the remote base as WB6NIL, with the TX Limits of the \"G\" class as defined in the <code>[txlimits]</code> staza.</p> <p>When the remote base is disconnected from the originating node, the user will be logged out. </p>"},{"location":"adv-topics/remotebase/#remote-base-memory-stanza","title":"Remote Base Memory Stanza","text":"<p>Up to 100 (00 to 99) preset memory channels can be defined, to be recalled by the <code>remote,1</code> function command.</p> <p>If the <code>init</code> memory channel is optionally specified, the remote base will attempt to tune to this channel when a user connects.</p> <p>Remote base memories are in the format of:</p> <p>Remote base memory syntax: <code>CC=RRR.RRR,PPP.P,AAAAA</code> or <code>CC=RRR.RRR,PPP.P,OFFSET,AAAAA</code></p> <ul> <li>C = Memory (Channel) number</li> <li>R = RX Frequency (must be defined down to kHz)</li> <li>P = PL Frequency</li> <li>A = One or more Attributes</li> </ul> <p>Attributes are specified as a non-delimited string. The available Attributes are: </p> <ul> <li>a = AM, b = LSB, f = FM, u = USB</li> <li>l = Low Power, m = Medium Power, h = High Power</li> <li> <ul> <li>= Minus TX Offset, s = Simplex, + = Plus TX Offset</li> </ul> </li> <li>t = TX PL on, r = RX PL on</li> </ul> <p>To use a non-standard offset on the memory channel, it can be defined (in kHz), be sure to also specify either <code>-</code> or <code>+</code>, as necessary.</p> <p>Sample:</p> <pre><code>[memory]\ninit = 146.520,000.0,fm ; set to this channel on start\n00 = 146.580,100.0,m\n01 = 147.030,103.5,m+t\n02 = 147.240,103.5,m+t\n03 = 147.765,79.7,m-t\n04 = 146.460,100.0,m\n05 = 146.550,100.0,m\n06 = 147.540,000.0,fs\n07 = 147.540,123.0,shrt\n08 = 147.435,103.5,1035,h-t ; This would be for W6NUT in Los Angeles with input of 146.400, and a PL of 103.5Hz.\n</code></pre> <p>NOTE: Not all attributes may be supported by all radios.</p>"},{"location":"adv-topics/remotebase/#remote-base-txlimits-stanza","title":"Remote Base Txlimits Stanza","text":"<p>The <code>[txlimits]</code> stanza defines TX privileges to be assigned to a particular license class (<code>LICENSETAG</code>).</p> <p>The <code>LICENSETAG</code> is used when configuring the <code>authentication</code> parameters for remote base users.</p> <pre><code>[txlimits]\n; In the example below, voice privileges are assigned for US ham\n; licensees for 40 meters through 10 meters.\n; Each line contains a LICENSETAG defined in a user login command,\n; then a set of band limit ranges. Up to 40 ranges per entry may be defined.\n;\nT = 28.300-28.500\nG = 7.175-7.300,14.225-14.300,18.110-18.168,21.275-21.450,24.930-24.990,28.300-29.700\nA = 7.125-7.300,14.175-14.300,18.110-18.168,21.225-21.450,24.930-24.990,28.300-29.700\nE = 7.125-7.300,14.150-14.300,18.110-18.168,21.200-21.450,24.930-24.990,28.300-29.700\n</code></pre>"},{"location":"adv-topics/remotebase/#sample-remote-configuration","title":"Sample Remote Configuration","text":"<pre><code>[1998]\n; Rx audio/signaling channel                                                                                   \nrxchannel = Radio/usb\n\n; Serial port for control\nioport = /dev/ttyS1\n\n; Radio Type                \nremote = ft897 \n\n; Function list from link                                          \nfunctions = functions-remote  \n\n; Function list from phone         \nphone_functions = functions-remote\n\n; Authorization level                                         \nauthlevel = 0      \n</code></pre>"},{"location":"adv-topics/remotebase/#doug-hall-rbi-1-remote-base","title":"Doug Hall (RBI-1) Remote Base","text":"<p>The Doug Hall RBI-1 is long obsolete, but is documented here for reference.</p> <p>The Doug Hall Electronics Model RBI-1 is frequency agile, multi port, remote base. It is possible to interface the RBI-1 to AllStar, but only on a PC.</p>"},{"location":"adv-topics/remotebase/#rbi-1-connections","title":"RBI-1 Connections","text":"<p>The RBI-1 uses the first three pins of the parallel port and can not be changed. There is no other interface method built into the <code>app_rpt</code> software. If you have been using the pins for anything else, you will need to migrate them to higher pins than the first three. See Parallel Port GPIO.</p> <p>Parallel port pinout is as follows: <pre><code>PP1 = data\nPP2 = clock\nPP3 = reset\n</code></pre></p> <p>No buffering is required. Attach directly to the RBI-1's DB9 interface on the correct parallel port pins.</p>"},{"location":"adv-topics/remotebase/#rbi-1-rptconf-settings","title":"RBI-1 rpt.conf Settings","text":"<p>In <code>rpt.conf</code> you will need to set lines in the node's stanza:</p> <pre><code>[1998]                              ; your node number \niobase=0x378                        ; (for lpt1)\nremote=rbi                          ; Doug Hall RBI-1\nfunctions=funtions-remote1998       ; Function list from link (a list of agile working commands) - use your node number\nmemory=memory1998                   ; 'system stored' radio presets, not required - use your node number\n\n[funtions-remote1998]               ;for RBI-1   use your node number\n\n0=remote,1                          ; Retrieve Radio Stored Memory Channel\n1=remote,2                          ; Set freq. VFO MMMMM*KKK*O   (Mhz digits, Khz digits, Offset)\n2=remote,3                          ; Set tx PL tone PL Tone HHH*D*\n3=remote,4                          ; Set rx PL tone         HHH*D*\n\n40=remote,100                       ; Rx PL off\n41=remote,101                       ; Rx PL on\n42=remote,102                       ; Tx PL off\n43=remote,103                       ; Tx PL on\n44=remote,104                       ; Low Power\n45=remote,105                       ; Medium Power\n46=remote,106                       ; High Power\n\n51=remote,5                         ; Long status query\n52=remote,140                       ; Short status query\n67=remote,210                       ; Send a *\n69=remote,211                       ; Send a #\n\n\n; Not Required but noted:\n\n[memory1998]                        ;Stored presets for radio, \n                                    ;Format: (recall# xx) = (Freq 6 digits and decimal) (TX PL Tone )  ( CTCSS Tone )  (ofset + - S ) ( power l m h )\ninit=224.660,100.0,-l               ;initial freq/mode on start-up/boot - choose something safe in case of error. Not required. Can be remarked out.\n00=224.560,100.0,-l\n01=224.460,114.8,-l\n02=224.580,131.8,-l\n03=223.980,100.0,-l\n04=146.940,114.8,-lt\n10=442.175,162.2,+l\n11=444.475,114.8,+l\n12=444.150,100.0,+l\n;13=446.500,100.0,sl\n</code></pre>"},{"location":"adv-topics/rxtoneburst/","title":"RX Toneburst","text":"<p>RX toneburst is a repeater access method (similar to CTCSS/PL or DCS) where the repeater will not become active until it receives the proper access tone.</p> <p>It is/was a common access method used almost exclusively in Europe. The typical tone used was 1750Hz. A user would send an initial burst of 1750Hz, usually less than 500mS, which would \"wake up\" the repeater. Once the repeater was \"active\", it would usually revert to carrier access for the duration of the conversation. After a period of quiet time, the repeater would revert to being \"inactive\", until it received another wake-up toneburst.</p>"},{"location":"adv-topics/rxtoneburst/#configuring-receive-toneburst-access","title":"Configuring Receive Toneburst Access","text":"<p>If you wish to set up a node to require receive toneburst, you must at least specify the toneburst frequency. The following parameters would need to be added to <code>/etc/asterisk/rpt.conf</code> in the node configuration section of the desired node.</p> <pre><code>rxburstfreq = 1750          ; set the desired toneburst frequency, in Hz\nrxbursttime = 500           ; minimum duration required for the tone to be present, in mS\nrxburstthreshold=10         ; minimum signal to noise radio, in dB, to detect a valid tone\n</code></pre>"},{"location":"adv-topics/sa818modules/","title":"SA818 RF Modules","text":"<p>SA818 RF modules are inexpensive RF transceiver modules, often used to build a personal RF \"hot spot\" AllStarLink node.</p> <p>Setting up an SA818 RF module is much easier on ASL3.</p> <p>Two new commands were added to ASL3 Pi Appliance systems to program the module. We believe that most will prefer using <code>sa818-menu</code>, a visual interface to the RF module settings. For those who prefer a command line interface, we have also included <code>sa818</code>.</p>"},{"location":"adv-topics/sa818modules/#sa818-menu","title":"sa818-menu","text":"<p>To program your SA818 with the menu utility, use the following command from the Linux CLI:</p> <pre><code>sudo sa818-menu\n</code></pre> <p>Here, you will be able to view the last saved (or default) settings.</p> <p>NOTE: The \"last saved\" settings are those saved by the <code>sa818-menu</code> command on your system. There is no way to \"read\" settings from the SA818 RF module.</p> <p>The settings include :</p> Setting Description Band Specify the module type (VHF, UHF) Bandwidth Narrow (12.5KHz) or Wide (25.0KHz) Receive Frequency Transmit Frequency Squelch Value Default = 1 Volume Default = 1 Sub-audible tone None, CTCSS, DCS Pre-Emphasis/De-emphasis Default = Disabled High pass Filter Default = Disabled Low pass Filter Default = Disabled Serial Port Default = /dev/serial0 or /dev/ttyUSB0 Connection Speed Default = 9600 <p>If you change the sub-audible tone setting to CTCSS or DCS you will be presented with a list of possible tone frequencies. When using CTCSS tones, you will also have a setting for the CTCSS Reverse Burst (tail tone).</p> <p>The RF module will be programmed when you exit the menu.</p> <p>NOTE: If you make changes that you do not wish to have stored, then use the ESC key to exit the menu.</p>"},{"location":"adv-topics/sa818modules/#sa818","title":"sa818","text":"<p>To program your SA818 using the command line you can execute the <code>sa818</code> command. For command usage information, use <code>sa818 --help</code>.</p>"},{"location":"adv-topics/sip-phone/","title":"Setting up a SIP Phone","text":"<p>This section describes the steps necessary to set up a SIP phone in ASL3. The setup procedure has changed due to the deprecation of <code>chan_sip</code>. Users are now required to use <code>chan_pjsip</code>. <code>chan_pjsip</code> brings new features to the SIP stack, and is the supported SIP channel for the future.</p>"},{"location":"adv-topics/sip-phone/#update-modulesconf","title":"Update <code>modules.conf</code>","text":"<p><code>chan_pjsip</code> requires a number of modules to be loaded. You should start by editing <code>/etc/asterisk/modules.conf</code> and add the following to the [modules] stanza (generally near the bottom of the file just above the [global] stanza):</p> <pre><code>;\n; modules for pjsip\n;\nnoload = app_voicemail.so\nload = bridge_builtin_features.so\nload = bridge_builtin_interval_features.so\nload = bridge_holding.so\nload = bridge_native_rtp.so\nload = bridge_simple.so\nload = bridge_softmix.so\nload = chan_bridge_media.so\nload = chan_pjsip.so\nload = func_pjsip_endpoint.so\nload = func_sorcery.so\nload = func_devstate.so\nload = res_pjproject.so\nload = res_pjsip_acl.so\nload = res_pjsip_authenticator_digest.so\nload = res_pjsip_caller_id.so\nload = res_pjsip_dialog_info_body_generator.so\nload = res_pjsip_diversion.so\nload = res_pjsip_dtmf_info.so\nload = res_pjsip_endpoint_identifier_anonymous.so\nload = res_pjsip_endpoint_identifier_ip.so\nload = res_pjsip_endpoint_identifier_user.so\nload = res_pjsip_exten_state.so\nload = res_pjsip_header_funcs.so\nload = res_pjsip_logger.so\nload = res_pjsip_messaging.so\nload = res_pjsip_mwi_body_generator.so\nload = res_pjsip_mwi.so\nload = res_pjsip_nat.so\nload = res_pjsip_notify.so\nload = res_pjsip_one_touch_record_info.so\nload = res_pjsip_outbound_authenticator_digest.so\nload = res_pjsip_outbound_publish.so\nload = res_pjsip_outbound_registration.so\nload = res_pjsip_path.so\nload = res_pjsip_pidf_body_generator.so\nload = res_pjsip_pidf_digium_body_supplement.so\nload = res_pjsip_pidf_eyebeam_body_supplement.so\nload = res_pjsip_publish_asterisk.so\nload = res_pjsip_pubsub.so\nload = res_pjsip_refer.so\nload = res_pjsip_registrar.so\nload = res_pjsip_rfc3326.so\nload = res_pjsip_sdp_rtp.so\nload = res_pjsip_send_to_voicemail.so\nload = res_pjsip_session.so\nload = res_pjsip.so\nnoload = res_pjsip_t38.so\nnoload = res_pjsip_transport_websocket.so\nload = res_pjsip_xpidf_body_generator.so\nload = res_rtp_asterisk.so\nload = res_sorcery_astdb.so\nload = res_sorcery_config.so\nload = res_sorcery_memory.so\nload = res_sorcery_realtime.so\n</code></pre>"},{"location":"adv-topics/sip-phone/#update-extensionsconf","title":"Update <code>extensions.conf</code>","text":"<p>The next step is to update <code>extension.conf</code>. This creates a dial plan that controls access to your node by SIP phones. Edit <code>/etc/asterisk/extensions.conf</code> and add the following to the bottom of the file. This example will set up extension 1001 as your local phone and the dialing plan for your node.</p> <pre><code>[sip-phones]\nexten =&gt; 1001,1,Dial(PJSIP/${EXTEN},60,rT)\n\nexten =&gt; ${NODE},1,Ringing\nexten =&gt; ${NODE},n,Answer(3000)\nexten =&gt; ${NODE},n,Set(NODENUM=${CALLERID(number)})\nexten =&gt; ${NODE},n,Playback(extension)\nexten =&gt; ${NODE},n,SayDigits(${NODENUM})\nexten =&gt; ${NODE},n,Playback(rpt/connected)\nexten =&gt; ${NODE},n,Playback(rpt/node)\nexten =&gt; ${NODE},n,SayDigits(${EXTEN})\nexten =&gt; ${NODE},n,rpt(${EXTEN}|P)\nexten =&gt; ${NODE},n,Hangup\n</code></pre> <p>The above dial plan will allow your SIP phone to dial your node number. In this example, one should use <code>*99</code> to enable PTT and <code>#</code> to disable PTT from the SIP phone. VOX is also an option for phone connections. When using VOX, one may want to mute the mic on the phone when not transmitting and un-mute to transmit. VOX is enabled by adding a <code>v</code> to the <code>rpt</code> line like this:</p> <pre><code>exten =&gt; ${NODE},n,rpt(${EXTEN}|Pv)\n</code></pre> <p>This dial plan announces the extension number and the connecting node number. The lines with <code>SayDigits</code> and <code>Playback</code> can be removed if you do not want the announcement.</p> <p>The <code>${NODE}</code> variable is defined at the top of <code>extensions.conf</code> and should be your assigned node number. See the following:</p> <pre><code>[globals]\nHOMENPA = 999 ; change this to your Area Code\nNODE = 1999   ; change this to your node number\n</code></pre> <p>NOTE: If you have multiple node numbers configured, you may need to adjust the <code>${NODE}</code> variable to the appropriate node number, or replace the <code>${NODE}</code> variable in your <code>extensions.conf</code> stanza with the specific node number desired.</p> <p>The entry 1001 in <code>extensions.conf</code> is the extension number for your SIP phone. If you want to use a different extension number, change 1001 to your desired extension number.</p> <p>NOTE: If you attempt to copy <code>extensions.conf</code> from a previous release of AllStarLink, it will fail. ASL3 requires comma delimiters instead of pipe symbols for standard Asterisk functions. The <code>rpt</code> function continues to use a pipe delimiter. This is subject to change in a future release.</p>"},{"location":"adv-topics/sip-phone/#update-pjsipconf","title":"Update <code>pjsip.conf</code>","text":"<p>You are now ready to configure <code>pjsip</code>.  Edit <code>/etc/asterisk/pjsip.conf</code>. Don\u2019t get overwhelmed by all of the text in the sample configuration. <code>pjsip</code> supports several configurations. This document focuses on the necessary entries to get a SIP phone operational.</p> <p>Scroll down to the Basic UDP transport section. It should be updated to look like the following:</p> <pre><code>; Basic UDP transport\n;\n[transport-udp]\ntype=transport\nprotocol=udp    ;udp,tcp,tls,ws,wss,flow\nbind=0.0.0.0:5060\n</code></pre> <p>NOTE: After the bind port address (0.0.0.0) is the incoming port number (5060). This UDP port must NOT be blocked by your network firewall. If you are using a Pi Applicance, you will likely need to add the port to the built-in firewall.</p> <p>Scroll down to the section titled Endpoint Configured For Use With A Sip Phone. For each extension, you will need to enter three sections. Here is an example for extension 1001:</p> <pre><code>[1001]\ntype=endpoint\ntransport=transport-udp\ncontext=sip-phones\ndisallow=all\nallow=ulaw\nallow=alaw\nallow=gsm\nauth=1001\naors=1001\ncallerid=\"My CallerID\"\n;\n; A few more transports to pick from, and some related options below them.\n;\n;transport=transport-tls\n;media_encryption=sdes\n;transport=transport-udp-ipv6\n;transport=transport-udp-nat\n;direct_media=no\n;\n; MWI related options\n\n;aggregate_mwi=yes\n;mailboxes=6001@default,7001@default\n;mwi_from_user=6001\n;\n; Extension and Device state options\n;\n;device_state_busy_at=1\n;allow_subscribe=yes\n;sub_min_expiry=30\n;\n; STIR/SHAKEN support.\n;\n;stir_shaken=no\n;stir_shaken_profile=my_profile\n\n[1001]\ntype=auth\nauth_type=userpass\npassword=1001\nusername=1001\n\n[1001]\ntype=aor\nmax_contacts=4\n;contact=sip:6001@192.0.2.1:5060\n</code></pre> <p>If you want to use a different extension number, you will need to change <code>[1001]</code> to your desired number. The item <code>callerid=\"My CallerID\"</code> should also be updated for your preferred caller identifier.</p> <p>The items <code>password=1001</code> and <code>username=1001</code> should be updated to match the username and password you want for your extension number. You should use a complex password. Do not use the extension number. You can use the password generator located here to generate a complex password.</p> <p>These three sections can be replicated for each extension that you want to add to the system.</p>"},{"location":"adv-topics/sip-phone/#restart-asterisk","title":"Restart Asterisk","text":"<p>After completing these changes, you must restart Asterisk or reboot your system.</p> <pre><code>sudo systemctl restart asterisk\n</code></pre>"},{"location":"adv-topics/sip-phone/#example-config-with-multiple-sip-phones","title":"Example Config with Multiple SIP Phones","text":"<p>As noted above you can have more SIP phones. Here is an example of a simple dial plan that has multiple extensions:</p> <pre><code>[sip-phones]\n; Extension 210 - Line 1\n; Extension 211 - Line 2\n; Extension 212 - Garage\n; Extension 213 - Cordless ATA\n; Extension 1000 - Voice Mail\n\nexten =&gt; 210,1,Dial(PJSIP/210,60,rT)\nexten =&gt; 211,1,Dial(PJSIP/211,60,rT)\nexten =&gt; 212,1,Dial(PJSIP/212,60,rT)\nexten =&gt; 213,1,Dial(PJSIP/213,60,rT)\nexten =&gt; 1000,1,VoiceMailMain(210)\nexten =&gt; 1000,2,Hangup\n\n; Allow SIP calls to local nodes\nexten =&gt; 1998,1,rpt(1998|P)\nexten =&gt; 1999,1,rpt(1999|P)\n</code></pre> <p>This example includes voicemail. To use voice mail, you will need to change <code>noload = app_voicemail.so</code>to <code>load = app_voicemail.so.</code></p>"},{"location":"adv-topics/sip-phone/#troubleshooting","title":"Troubleshooting","text":"<p>If you have trouble connecting your SIP phone, start the Asterisk CLI with <code>asterisk -rvvv</code>. Enter the command <code>pjsip set logger on</code>. This will show the communications between the SIP phone and Asterisk. It will also show the actions in your dial plan.</p>"},{"location":"adv-topics/sip-phone/#security","title":"Security","text":"<p>If you will be exposing your system to the outside world, you should consider using <code>fail2ban</code> to add additional protection for the system.</p>"},{"location":"adv-topics/sleepmode/","title":"Sleep Mode","text":"<p>Sleep Mode allows the local repeater receiver to be effectively disabled after a set period of inactivity (keeping the associated transmitter quiet). The repeater receiver will be re-enabled if any of the following events occur:</p> <ul> <li>An \"awaken from sleep\" (<code>cop,53</code>) command is decoded on any command source</li> <li>There is traffic coming in from a remote node</li> <li>There is telemetry coming in from a remote node</li> </ul> <p>Additionally, the sleep inactivity timer will be reset if there are any signals on the repeater input which are received during the time the system is awake.</p> <p>Caution</p> <p>Be aware that enabling Sleep Mode will change how your repeater functions, and may lead to user confusion. Once the repeater enters Sleep Mode, the only way to wake it up locally would be by a <code>cop,53</code> command (whether that is in to the local receiver via DTMF, or some other macro on the CLI). That may lead to users thinking the repeater is \"broken\" when they try and key it up and nothing happens, if they aren't aware that it may be in Sleep Mode. </p>"},{"location":"adv-topics/sleepmode/#how-it-works","title":"How it Works","text":"<p>The intended purpose of Sleep Mode is to (temporarily) help combat local interference issues.</p> <p>While the repeater is in normal use, the inactivity timer (<code>sleeptime</code>) will be constantly reset.</p> <p>When activity on the repeater ceases, the inactivity timer counts down. When it reaches zero, the repeater will \"go to sleep\". The local receiver is still \"active\" and listening for DTMF, but it won't respond to normal methods of \"keying the repeater\" (carrier and/or CTCSS). This effectively prevents interference sources from opening the receiver squelch and keying the transmitter (broadcasting the noise).</p> <p>In order to \"wake\" the repeater up, you would have to satisfy one of the above criteria. So, traffic or telemetry from a remotely connected node would \"wake up\" the local receiver and allow its normal access methods to key the repeater. Or, a user would need to send a specified DTMF command linked to <code>cop,53</code> to \"wake up\" the local receiver. As such, this mode is also known as \"touch tone up\". </p>"},{"location":"adv-topics/sleepmode/#associated-cop-methods","title":"Associated COP Methods","text":"<p>The associated Control OPerator commands/methods associated with Sleep Mode are:</p> COP Description 51 Enable Sleep Mode 52 Disable Sleep Mode 53 Awaken from Sleep Mode 54 Go back to sleep when the TX carrier drops <p>In order to manually \"wake\" the repeater up, you would want to assign <code>cop,53</code> to a DTMF command in the <code>[functions]</code> stanza of <code>rpt.conf</code>, such as:</p> <pre><code>953 = cop,53                        ; Wake up from sleep\n</code></pre> <p>You would also likely want to define commands to be able to enable and disable Sleep Mode too:</p> <pre><code>951 = cop,51                        ; Enable sleep mode\n952 = cop,52                        ; Disable sleep mode\n954 = cop,54                        ; Go to sleep\n</code></pre>"},{"location":"adv-topics/sleepmode/#inactivity-timer","title":"Inactivity Timer","text":"<p>In addition to defining the commands to control Sleep Mode, you will likely also want to adjust the inactivity timer (<code>sleeptime</code>). This option is set in the node number stanza in <code>rpt.conf</code>.</p> <p>The default value for <code>sleeptime</code> is 900 seconds (15 minutes), if it is not specified (and you were to enable Sleep Mode). Set the value appropriately for your configuration:</p> <pre><code>sleeptime=300                       ; Set the inactivity timer for 300 seconds (5 minutes)\n</code></pre>"},{"location":"adv-topics/tts/","title":"ASL Text-to-Speech","text":"<p>ASL provides the <code>asl-tts</code> command. This is a text to speech speaker for ASL3. It uses the piper open source TTS system that is not dependant on cloud providers and has opensource voice models for dozens of languages.</p> <p>If the <code>asl-tts</code> command doesn't exist on your system, you will need to install the <code>asl3-tts</code> package:</p> <pre><code>sudo apt install asl3-tts\n</code></pre>"},{"location":"adv-topics/tts/#basic-operation","title":"Basic Operation","text":"<p><code>asl-tts</code> uses the <code>piper-tts</code> text to speech engine to generate ulaw files from text so that <code>Asterisk/apt_rpt</code> can speak any set of arbitrary text without needing to have a sound file installed for the word necessary. By default, <code>asl-tts</code> will cause <code>app_rpt</code> to immediately speak whatever text was specified.</p> <p>asl-tts has a time delay</p> <p>Running the <code>piper-tts</code> system takes a few seconds to compile the voice into the sound file. Larger text blocks may take tens of seconds to compile. <code>asl-tts</code> is not appropriate for time-sensitive communications such as speaking the current time.</p> <p>The command format is as follows:</p> <pre><code>asl-tts -n NODE -t 'TEXT' [ -v VOICE ] [ -f FILE ]\n</code></pre> <p>The general use case is to speak to a node immediately. This this case speaking the text \"Good morning\" to node 63001 would look like this:</p> <pre><code>sudo asl-tts -n 63001 -t 'Good morning'\n</code></pre> <p>The TTS engine will start, create the audio, and execute the playback on the node. The playback follows normal <code>app_rpt</code> rules and will be played back as soon as its turn arrives. The command will not preempt or \"talk over\" other traffic on the node.</p> <p>Keep in mind the differences between quoting in a shell command. In general, the <code>\"</code> and <code>'</code> work the same but the double-quote will allow variable substitution while the single quote will not. This can be useful if you want to create text based on a system condition. For example:</p> <pre><code>TODAY=$(date +\"%A, %B %d, %Y\")\nsudo asl-tts -n 63001 -t \"Today is ${TODAY}\"\n</code></pre> <p>Obviously the above example is a bit contrived as the <code>date</code> command doesn't generate nice words such as \"first\", \"seventeenth\", etc. However, it demonstrates the flexibility of the tool. A script could be used to populate <code>$TODAY</code> with natural words. For a hypothetical example:</p> <pre><code>TODAY=$(/path/to/today-script)\nsudo asl-tts -n 63001 -t \"Today is ${TODAY}\"\n</code></pre> <p>More complex message can be created with additional shell coding. As an example here's how the current public IP address of the system could be obtained and spoken:</p> <pre><code>IPADDR=$(wget -q -O - checkip.dyndns.com | grep -Po \"[\\d\\.]+\" | sed 's/\\./ dot /g')\nMSG=\"The node public IP is ${IPADDR}\"\nsudo asl-tts -n 63001 -t ${MSG}\n</code></pre> <p>A <code>bash</code> shell variable can generally hold up to a 2 Mb-sized string so any reasonably-formatted text can be stored in a variable and then played with the <code>-t</code> command. Keep in mind that the text or the variable contents must not contain the same quote type used in the command without escaping it with a backslash. For example <code>\"Nested \\\" mark\"</code>.</p> <p>Temporary File Cleanups</p> <p>Note that temporary files are written to directories named <code>/tmp/asl-tts*</code> and are not automatically cleaned up because it's impossible to know when Asterisk will actually need/speak the file contents. If this becomes a space problem, put in a <code>systemd</code> timer unit or a <code>cron</code> job to delete old files in <code>/tmp/asl-tts*</code>. The command can simply be <code>rm -rf /tmp/asl-tts*</code>.</p>"},{"location":"adv-topics/tts/#creating-a-sound-file-for-later","title":"Creating a Sound File for Later","text":"<p>To create the text for other usage, such as cron jobs, use the <code>-f FILE</code> option to specify where the file should be created. Do not use an extension, the file will be automatically appended with the <code>.ul</code> suffix.</p> <p>For example:</p> <pre><code>AUD_TEXT=\"The club net will begin in five minutes!\"\nasl-tts -n 460181 -t \"${AUD_TEXT}\" -f /tmp/netstartsin5\n</code></pre> <p>This will create a sound file <code>/tmp/netstartsin5.ul</code> that can be used later with an asterisk playback such as:</p> <pre><code>asterisk -rx 'rpt playback 63001 /tmp/netstartsin5\n</code></pre> <p>Note that <code>-n</code> is required but irrelevant to this use case.</p>"},{"location":"adv-topics/tts/#voices","title":"Voices","text":"<p>By default, the package provides the voice \"Amy\" from https://github.com/rhasspy/piper/blob/master/VOICES.md. This voice is the closest voice to the default Asterisk and <code>app_rpt</code> sounds (\"Allison\"). It is possible to download other voices, for any language, and store the <code>.onnx</code> and <code>.onxx.json</code> files in <code>/var/lib/piper-tts</code> and then use them with the <code>-v</code> option. For example, to add the English (en_GB) voice \"Alan\" from the voices repository:</p> <ol> <li> <p>Download the <code>.onnx</code> and <code>.onnx.json</code> file to <code>/var/lib/piper-tts</code></p> </li> <li> <p>Specify <code>-v en_GB-alan-low.onnx</code> on the command line to <code>asl-tts</code>. As an example:</p> </li> </ol> <pre><code>asl-tts -n 63001 -v en_GB-alan-low.onnx -t \"Good morning\"\n</code></pre> <p>File Quality</p> <p>Since all files are squashed down to 8K uLaw format, there is no value in the \"medium\" or \"high\" quality models. Always use the \"low\" quality model.</p>"},{"location":"adv-topics/tts/#reporting-bugs","title":"Reporting Bugs","text":"<p>Report bugs to https://github.com/AllStarLink/asl3-tts/issues</p>"},{"location":"adv-topics/uefi-secureboot/","title":"UEFI and SecureBoot","text":"<p>UEFI (Unified Extensible Firmware Interface) is a modern firmware interface that replaces the older BIOS system, providing a more flexible and powerful environment for booting and managing hardware. It supports larger hard drives, faster boot times, and a more user-friendly interface.</p> <p>Secure Boot is a feature of UEFI that ensures only trusted software is loaded during the boot process, protecting the system from malware and unauthorized software. It works by verifying the digital signatures of boot loaders and operating system files against a database of trusted certificates.</p> <p>Together, UEFI and Secure Boot enhance the security and efficiency of modern computing systems.</p> <p>Given a quirk of how Asterisk and <code>app_rpt</code> needs a kernel module (driver) not already contained in the core system provided by Debian, installing AllStarLink on a system requiring UEFI/SecureBoot requires additional steps to create what's called a Machine Owner Key (MOK).</p> <p>Note</p> <p>Raspberry Pi does not use or support UEFI or SecureBoot</p>"},{"location":"adv-topics/uefi-secureboot/#generating-a-machine-owner-key","title":"Generating a Machine Owner Key","text":"<p>Generation of a Machine Owner Key (MOK) is done with the <code>asl-setup-dkms-mok</code> utility. This tool appeared in the package asl3-3.3.0-1.</p> <ol> <li> <p>Run the command <code>sudo asl-setup-dkms-mok</code>. This will prompt for several items of information. An example run will look like:</p> <pre><code>$ sudo asl-setup-dkms-mok\n!!!\n!!! WARNING - RUNNING THIS SCRIPT WILL REGENERATE THE\n!!! DEFAULT MACHINE OWNER KEY (MOK) FOR SECURE BOOT. IN GENERAL YOU\n!!! ARE RUNNING THIS SCRIPT BECAUSE YOU NEED TO AND YOU KNOW WHY\n!!! YOU ARE DOING IT. HOWEVER BE WARNED!\n!!!\nENTER \"galaxy\" TO CONTINUE&gt;&gt; galaxy\n\nGenerating an MOK requires a name for the certificate. This can be\nanything, however your name or your callsign is recommended.\n\nName or callsign&gt;&gt; N8EI\n\nGenerating the MOK...\n......+...+...+.....+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*................+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.+.........+......+...+.+...........+...+.+...+..+.+...+..............+.......+...........+.........+................+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.....+............+.........+.+.....+....+...+...+..............+.+..+...............+.+..+...+.+........+.+......+........+...............+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.......+...+............+..+....+............+..+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*....+.....+...+...........................+......+.......+...............+.....+......+..........+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n-----\n\nEnter a one-time password for this key. This password will be prompted\nfor at the next reboot to properly install the key in the UEFI\nbootloader keyring. This does not need to be an incredibly complex\npassword and you may write it down until it's used.\n\ninput password:\ninput password again:\n\nSetup /etc/dkms/framework.conf.d/asl.conf\nGenerate /etc/dkms/asl_sign_helper.sh\n\nYou must reboot the system and enter the OTP to load the key into SecureBoot\nThis will appear on your directly-connected monitor or your cloud console\n</code></pre> </li> <li> <p>Prepare to reboot the system. Make sure a monitor is attached to the system or, if using a cloud virtual machine / VPS, make sure that a remote virtual console is connected. Then, reboot the system.</p> <p>MOK Load Staging is One-Time Only</p> <p>Note that the MOK is only staged for load one time. If the MOK load prompt is not responded to at the first/next reboot, the MOK staged for load is wiped and Step #1 will have to be run again.</p> </li> <li> <p>Complete the steps to review, unlock, and load the MOK</p> <p>The next step varies by vendor</p> <p>The next step uses screenshots from a Linux/QEMU virtual environment. Every device manufacturer or cloud provider will have a slightly different process or look.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> </li> <li> <p>Reboot the system back into Linux and log in.</p> </li> <li> <p>Check that the MOK created is now loaded by looking for the \"name\" you provided the certificate in Step 1. In this example, the MOK was named \"N8EI\".</p> <pre><code>sudo dmesg | grep -i N8EI\n</code></pre> <p>The output will look like: <pre><code>$ sudo dmesg | grep -i N8EI\n[    0.674788] integrity: Loaded X.509 cert 'N8EI: 92ed492eeb11594eb25af5cc70ff0587115f2577'\n</code></pre></p> </li> <li> <p>Rebuild the <code>dahdi-dkms</code> package so that the modules are signed by the MOK so that the kernel will load them.</p> <pre><code>apt install --reinstall -y dahdi-dkms\n</code></pre> </li> <li> <p>Test the module loads successfully:</p> <pre><code> $ sudo modprobe dahdi dahd_dummy dahdi_transcode\n$ lsmod | grep dahdi\ndahdi_dummy            16384  0\ndahdi_transcode        16384  0\ndahdi                 258048  2 dahdi_dummy,dahdi_transcode\n</code></pre> </li> </ol>"},{"location":"adv-topics/usbinterfaces/","title":"USB Audio Interfaces","text":"<p>Setting up USB audio interfaces is much easier with ASL3.</p> <ul> <li>The USB audio interface \"tune\" settings have been moved into their respective configuration files, <code>simpleusb.conf</code> and <code>usbradio.conf</code>. The separate tune files (e.g. <code>simple-tune-usb1999.conf</code>) no longer exist</li> <li>The device string is automatically found when the USB setting <code>devstr =</code> is empty</li> <li><code>rxchannel=SimpleUSB/USB1999</code> has been changed to <code>rxchannel=SimpleUSB/1999</code>. Same for <code>rxchannel=Radio/1999</code> for consistency with other <code>rxchannel=</code> settings</li> <li>A new <code>asl-find-sound</code> utility can be used to help identify the compatible device strings for attached interfaces</li> <li>We now support the ability to specify vendor and product identifiers (VID and PID) for non-natively supported audio interface chips</li> </ul> <p>The <code>asl-menu</code> and Asterisk CLI USB config commands handle these changes.</p>"},{"location":"adv-topics/usbinterfaces/#usb-interface-ic-support","title":"USB Interface IC Support","text":"<p>Nearly all USB Interface products that are used with ASL nodes use C-Media CM108 and CM119 USB interface ICs (or their variants). These ICs provide the following features:</p> <ul> <li>Two 16-bit DAC audio outputs, capable of driving line level or headphone outputs</li> <li>One 16-bit ADC mic/audio input with switchable mic preamp</li> <li>Internal hardware mixers allowing ADC input and DAC output levels to be adjusted within a range of approximately 40dB, making it easy to optimally match input and output audio levels within the ASL tune utility settings, as well as a mixer allowing input audio to be mixed into output audio with zero latency</li> <li>GPIO lines that support a PTT output, a Status LED, a Clip LED, COS and CTCSS inputs, and one or more additional general-purpose I/O (GPIO) lines that can be controlled by ASL in response to events or DTMF commands</li> <li>Support for an attached EEPROM IC to store user configuration and manufacturer information.</li> </ul> <p>The CM119 provides an additional 4 GPIO lines (GPIOs 5-8) versus the CM108. The original CM108 and CM119 ICs were replaced in the early 2010's with the CM108AH and CM119A. These ICs are still used in many USB Radio Interfaces (URIs). Newer versions of the CM1xx ICs, the CM108B and CM119B, are now available and have some minor differences in gain settings and other specifications, but are fully compatible with the earlier IC versions and with ASL.</p>"},{"location":"adv-topics/usbinterfaces/#supported-c-media-chips","title":"Supported C-Media Chips","text":"<p>ASL3 natively supports C-Media chips with the vendor identifer (VID) <code>0x0d8c</code> with the following list of product identifiers (PID) .</p> Chip Product Identifier (PID) CM-108 0x000c, 0x000d, 0x000e, 0x000f CM-108B 0x0012 CM-108AH 0x013c CM-119 0x0008 CM-119A 0x013a CM-119B 0x0013 N1KDO 0x6a00 <p>There are more variants of the C-Media chips that can be used with ASL3. If your sound card is not natively supported, you can configure ASL3 to recognize your card's vendor id (VID) and product id (PID). To determine the vendor id and product id of your sound card, use the <code>lsusb</code> command at the Linux CLI prompt.</p> <p>You will see something similar to the following:</p> <pre><code>Bus 001 Device 003: ID 0d8c:013b C-Media Electronics, Inc. USB PnP Sound Device\n</code></pre> <p>The vendor identifier (VID) is <code>0d8c</code> with a product identifier (PID) of <code>013b</code>.  This chip does not appear in the list of natively supported chips. You can enter this non-natively supported chip in <code>res_usbradio.conf</code>.  </p> <p>NOTE: You can enter multiple VID:PID pairs by separating the pairs with a comma.</p> <p>Edit <code>/etc/asterisk/res_usbradio.conf</code> with your favorite editor. You will see the following:</p> <pre><code>;usb_devices = 1209:7388    ;comma delimited list of usb\n                            ;descriptors to allow.\n                            ;format vvvv:pppp in hexadecimal\n                            ;vvvv=vendor id, pppp=product id\n                            ;\n                            ;1209:7388 = AIOC (all in one cable)\n</code></pre> <p>NOTE: The All-In-One-Cable (AIOC) emulates the C-Media CM-108 chip. The sample above shows the VID:PID for the AIOC. If you will be using the AIOC, just remove the <code>;</code> before <code>usb_devices</code>.</p> <p>Replace <code>;usb_devices = 1209:7388</code> with <code>usb_devices = vvvv:dddd</code> for your specific C-Media chip. Save your changes and restart Asterisk. The added VID:PID will now be available to the <code>SimpleUSB</code> and <code>USBRadio</code> channel drivers.</p> <p>NOTE: The <code>asl-find-sound</code> utility will include the VID:PID pairs entered in <code>res_usbradio.conf</code>.</p>"},{"location":"adv-topics/usbinterfaces/#setting-audio-levels","title":"Setting Audio Levels","text":"<p>When setting up a new node, or if any changes have been made such as use of a different radio, microphone, other audio hardware, or gain settings, checking and setting audio levels is very important. </p> <p>If you have a radio attached to your node, you are stongly encouraged to tune your audio settings (and this your transmit deviation) using a communications service monitor. Failure to do so can easily result in you modulating distorted audio, as well as potentially causing adjacent channel interference due to excessive deviation or splatter. </p> <p>Radio equipment such as HTs or mobile radios, and many electronics products such as VOIP phones often restrict end-user audio adjustment capabilities to ensure consistent audio levels. AllStarLink nodes and USB interfaces however, generally allow greater flexibility and thus extra attention is required to be sure your audio interface gains are properly matched to the external audio input and output levels. Failure to calibrate your audio levels could mean your node is much quieter or louder than it should be when linked to other nodes, which could be disruptive to other users and systems. It can also mean that the signal from your RF transmitter may cause interference with other radio systems, which carries serious consequences from spectrum regulators.</p> <p>Most nodes use the <code>SimpleUSB</code> channel driver (<code>chan_simpleusb</code>). Nodes that require more advanced features such as DSP squelch detection, CTCSS tone encode/decode, or additional audio filtering options may use the <code>USBRadio</code> channel driver (<code>chan_usbradio</code>). These channel drivers both have tune utilities for setting audio levels and other functions. Once a node has been configured in the <code>asl-menu</code> Node Settings, you will end up in the appropriate tune application. The following options should then be used to check and optimize audio level settings:</p> <p>NOTE: Be sure you are not connected to any other nodes when doing any of the following tests and adjustments.</p> <ul> <li><code>Set Rx Voice Level (using display)</code> provides a level meter. Talk at a normal and steady volume into the microphone and be sure that the average level does not go past the \"3KHz\" point, and that peak levels do not go significantly past the \"5KHz\" point. Note that for proper mic technique you should talk no closer than 2 to 3 inches (5 - 10 cm) from the microphone, and it should be held at an angle to minimize pops/plosives. Once you see where the audio levels are, hit the Enter key and you'll then be prompted to change the setting. If for example the current setting is 500 and your levels were too high, try entering 400 for a new value and then repeat the test. Continue to iteratively adjust the settings until the average audio levels stay around the \"3KHz\" mark. For a more precise calibration with radio nodes a 1KHz test tone can be input into another radio at a level that results in 3KHz FM deviation, then calibrate the node to the 3KHz mark, however this can be more complicated to set up and may not account for other differences such as different mics or mic gain settings.</li> <li><code>Set Transmit A Level</code>, <code>Set Transmit B Level</code> (or <code>Set Transmit Voice Level</code> for USBRadio) allow the node audio output levels to be set. For nodes connected to a radio transceiver the level should be set such that the transmitted FM deviation is no higher than 3KHz, and the audio does not sound distorted or overly loud. When listening on another radio it can also be helpful to confirm the audio levels from your node sound about the same as levels on FM repeaters in your area.</li> <li><code>Toggle RX Boost</code> enables a preamp in the CM1xx for use with very low mic-level input signals. This should be disabled in almost all cases.</li> <li><code>View Rx Audio Statistics</code> shows precise audio level information. If when running this option and talking at a normal to loud volume into your mic, you see <code>Pk</code> levels of any higher than -3.0 dBFS, <code>Avg Pwr</code> levels of higher than -12 dBFS, or any <code>ClipCnt</code> value greater than 0, you should reduce your rxmix setting (using the <code>Set Rx Voice Level</code> menu option), and then repeat this step. \"dBFS\" is a logarithmic unit of measurement, where 0dBFS equals the Full-Scale (largest possible) value of a digital signal. Digital signals cannot exceed 0dBFS. If an Analog-to-Digital Converter (ADC) is over driven, clipping, distortion and greatly reduced audio quality results.</li> <li><code>Toggle Echo Mode</code> will record each of your transmissions and echo (\"parrot\") back to you. After setting your levels with the above menu options first, echo tests are the final step to confirm your audio is clear and intelligible. If anything does not sound right or you have any questions be sure to visit the AllStarLink Community for additional help. When done with Echo Mode testing don't forget to disable it. DTMF commands can be enabled to make it easy to do echo testing any time. To enable <code>parrot mode</code> DTMF commands uncomment the 3 lines in <code>/etc/asterisk/rpt.conf</code> that start with <code>921 =</code>, <code>922 =</code>, and <code>923 =</code>. Then, restart Asterisk or reboot the node. Entering <code>*921</code> on a DTMF keypad will then enable parrot mode and <code>*922</code> will disable it.</li> <li><code>Print Current Parameter Values</code> shows the current audio level settings.</li> <li><code>Write (Save) Current Parameter Values</code> saves any changed settings to disk. Be sure to execute this option before exiting the menu if you have changed any settings and want those to be the new defaults.</li> </ul> <p>The tune utilities can also be run from the command line without needing to use <code>asl-menu</code>. For SimpleUSB run <code>sudo /usr/sbin/simpleusb-tune-menu</code> or for USBRadio run <code>sudo /usr/sbin/radio-tune-menu</code>.</p>"},{"location":"adv-topics/usbinterfaces/#eeprom-operation","title":"EEPROM Operation","text":"<p>The SimpleUSB and USBRadio channel drivers allow users to store configuration information in an EEPROM IC attached to the C-Media CM1xx USB Interface IC. The CM119A can have manufacturer information in the same area that stores the user configuration. The CM119B does not have manufacturer data in the area that stores user configuration. The manufacturer data cannot be overwritten. The user configuration data has been moved higher in memory to prevent overwriting the manufacturer data. If you use the EEPROM to store configuration data, you'll need to save it to the EEPROM after upgrading. Use <code>susb tune save</code> or <code>radio tune save</code> in the Asterisk CLI.</p>"},{"location":"allmon3/basics/","title":"About Allmon3","text":"<p>Allmon is the standard web-based monitoring and management for ASL3.</p> <p>Allmon3 is the next generation of web dashboards for AllStarLink, rewritten for performance, scalability, and responsiveness.</p>"},{"location":"allmon3/basics/#design-goals","title":"Design Goals","text":"<p>Allmon3 features and functionality shall be governed by the following guidelines:</p> <ul> <li>Use of modern web responsive design for usability on all device form factors and screen sizes</li> <li>Clear separation between long-running tasks and client-based display updates</li> <li>Permit reduced workload on potentially slow repeater site links by cleanly supporting the ability to run only the pollers on the device controlling the repeater, and run the dashboard in the cloud; easy prevention of unnecessary web traffic, spidering, etc.</li> <li>Prioritization of the common use cases of AllStarLink for feature enhancements</li> </ul>"},{"location":"allmon3/basics/#community","title":"Community","text":"<p>All code of Allmon3 not otherwise licensed (e.g., Bootstrap, etc.) is licensed under the GNU Affero General Public License v3. The choice of the AGPLv3 promotes giving back to the amateur radio and ASL communities. </p>"},{"location":"allmon3/config/","title":"Configuration","text":"<p>All configuration resides in <code>/etc/allmon3</code>. The stock configuration files are always available at <code>/usr/share/doc/allmon3/</code> for recovery and documentation.</p> <p>After changing any configuration file, the service <code>allmon3</code> must be restarted using <code>sudo systemctl restart allmon3</code>.</p>"},{"location":"allmon3/config/#node-configuration","title":"Node Configuration","text":"<p>Allmon3's node connections are configured in <code>/etc/allmon3/allmon3.ini</code>. The <code>allmon3.ini</code> file is a standard INI-formatted file. Each stanza in the file is a node number. Each node stanza then can take the following options:</p> Option Req'd / Opt Default Description host Req'd - DNS name or IP address of the Asterisk/ASL node port Opt 5038 Port of the Asterisk manager user Req'd - Username of the Asterisk monitor, most commonly 'admin' pass Req'd - Password of the monitor user multinodes Opt - This node is a server hosting multiple nodes and this is the \"primary\" record for the host. voters Opt n[,n,...] List voters on this server, comma separate. No value disabled voters pollinterval Opt 1 Polling interval to asterisk in default is 1. this value can be expressed as a decimal fraction of a second - e.g., .5 is 500ms, .375 is 375ms, etc. vpollinterval Opt 1 Broadcast interval of voter data in seconds default is 1. this value can be expressed as a decimal fraction of a second - e.g., .5 is 500ms, .375 is 375ms, etc. retryinterval Opt 15 Seconds between retries if initial connection to asterisk is lost (optional, default 15) retrycount Opt \"Infinite\" number of times to retry a lost asterisk connection before ending (default infinite) <p>An example minimal node configuration would be:</p> <pre><code>[1999]\nhost = 127.0.0.1\nuser = admin\npass = Passw0rd\n</code></pre> <p>An example of a server with multiple nodes on it:</p> <pre><code>[1999]\nhost = 127.0.0.1\nuser = admin\npass = Passw0rd\nmultinodes = 1999, 1998\n</code></pre> <p>Here's an example for monitoring three ASL Nodes (including one off-LAN):</p> <pre><code>[50815]\nhost=172.17.16.36\nuser=admin\npass=password\n\n[460180]\nhost=172.17.16.217\nuser=admin\npass=password\n\n[48496]\nhost=192.2.0.145\nuser=admin\npass=password\nvoters=48496\n</code></pre> <p>NOTE: Adding a <code>voters</code> option does not automatically make the VOTER status show up in Allmon3. You will need to manually configure the voter instance in <code>menu.ini</code>, see below.</p>"},{"location":"allmon3/config/#server-customization","title":"Server Customization","text":"<p>Allmon3 has multiple configuration files to consider:</p> <ul> <li> <p><code>/etc/allmon3/web.ini</code> - This is the customization interface for the Allmon3 web interface</p> </li> <li> <p><code>/etc/allmon3/custom.css</code> - Certain CSS customizations to change colors in the application. Follows standard CSS rules and syntax</p> </li> <li> <p><code>/etc/allmon3/menu.ini</code> - Allows for the customization of the Allmon3 web menu. By default, the menu is a list of all nodes found in <code>allmon3.ini</code>. Customized menus can be configured as described in <code>menu.ini.example</code></p> </li> </ul>"},{"location":"allmon3/config/#webini","title":"<code>web.ini</code>","text":"<p>The <code>web.ini</code> file has four configuration sections -  <code>[web]</code>, <code>[syscmds]</code>, <code>[node-overrides]</code>, and <code>[voter-titles]</code>. </p>"},{"location":"allmon3/config/#web","title":"<code>[web]</code>","text":"<p>The <code>[web]</code> section has the basic customizations for the Allmon3 site. Each item in this section is documented in the file.  </p>"},{"location":"allmon3/config/#syscmds","title":"<code>[syscmds]</code>","text":"<p>The <code>[syscmds]</code> section defines the templates in the \"system commands\" menu. This stanza lists commands that are templates for the systems command modal dialog. The format is:</p> <pre><code>[syscmds]\n  command text = Command Label\n  command text = Command Label\n  command text = Command Label\n  ...\n</code></pre> <p>In any command text the @ will be replaced with the node the command modal was selected from. For example:</p> <pre><code>    rpt status @ = Show Node Status\n</code></pre> <p>Will result in the command <code>rpt status 1999</code> assuming this command was selected from Node 1999.</p> <p>It is possible to create optional stanzas named in the format <code>[syscmds-NODE]</code> (e.g. <code>[syscmds-1999]</code>) and have those command templates appear only for the given node listed. </p> <p>Example:</p> <pre><code>[syscmds-1999]\nrpt cmd @ cop 999 xxx = Execute function 999\n</code></pre>"},{"location":"allmon3/config/#node-overrides","title":"<code>[node-overrides]</code>","text":"<p>The <code>[node-overrides]</code> section can be used to override information from the ASL database. Using this section, the AllStarLink database labels for a node may be replaced with custom text. The format is:</p> <pre><code>[node-overrides]\n    NODE1 = TEXT HERE\n    NODE2 = TEXT HERE 2\n</code></pre> <p>This section must exist, even if it's empty. For example:</p> <pre><code>[node-overrides]\n    1999 = My special private node\n    2010 = Wild Party Node\n</code></pre>"},{"location":"allmon3/config/#voter-titles","title":"<code>[voter-titles]</code>","text":"<p>The <code>[voter-titles]</code> section is used to set display names for VOTERs. This functions identically to <code>[node-overrides]</code>. For any VOTER not named here, they will have an auto-generated name of <code>Voter NODE</code>.</p> <pre><code>[voter-titles]\n    ;1999 = My special private node\n    48496 = VHF VOTER System\n</code></pre>"},{"location":"allmon3/config/#menuini","title":"<code>menu.ini</code>","text":"<p>If this file is present in the <code>api/</code> subdirectory of Allmon3's web interface and named <code>menu.ini</code>, this file will override the default behavior of the web interface simply listing the configured nodes in the left navbar.</p> <p>If this file is not present, all nodes in <code>allmon3.ini/allmon3.ini.php</code> will display singly in configured order.</p> <p>NOTE: Not listing a node in the menu WILL NOT cause the node to go un-polled if it is already configured in <code>allmon3.ini</code>. This allows the system administrator to have \"hidden\" nodes. If you want to completely stop polling an Asterisk/ASL node, the node must be removed from <code>allmon3.ini</code>.</p> <p>The format for this file is as follows:</p> <pre><code>[ TITLE ]                         :: The stanza header is the label\n                                  :: for this menu item\ntype  = ( menu | single )         :: If type = menu, the item is interpreted as a dropdown\n                                  :: menu with each LABEL item displaying. If the\n                                  :: type = single, then only a the first LABEL = TARGET\n                                  :: will be displayed as a non-dropdown. In the case of\n                                  :: type = single, the [ TITLE ] is ignored completely\n\nLABEL = TARGET                    :: Each [ TITLE ] displays one or more LABELS\nLABEL = TARGET                    :: with a link to TARGET. When TARGET is all numbers\nLABEL = TARGET                    :: then TARGET is assumed to be a ASL node and\n                                  :: the link will filter down to the TARGET node\n                                  :: specified. Any other pattern will be interpreted\n                                  :: as a full or partial URL/URI.\n                                  ::\n                                  :: Of special node, creating a menu item of\n                                  :: multiple nodes to display, TARGET and simply be\n                                  :: #NODE,NODE,NODE - e.g. #1999,1998,1997\n</code></pre> <p>Note that the order of the nodes within a stanza is irrelevant. They will be displayed as sorted alphabetically ascending according to UTF-8 (e.g. 0-9, A-Z, +).</p> <p>An example custom menu may look like:</p> <pre><code>[ W8WKY ]\ntype = menu\nW8WKY = 43211\n48496 = 48496\n45839 = 45839\n\n[ N8XPK ]\ntype = menu\nN8XPK = 42993\n43118 = 43118\n47987 = 47987\n\n[ VHF VOTER ]\ntype = single\nVOTER = voter.html#48496\n\n[ Test ]\ntype = single\nAllStarLink = https://www.allstarlink.org\n</code></pre> <p>VOTER instances are not automatically displayed. You will need to manually add them to <code>menu.ini</code> in order to create a navigation button to access them.</p> <p>NOTE: Adding a VOTER instance will require manually creating a <code>menu.ini</code> (if you haven't already). As noted previously, the presence of this file will mean that the default behaviour of Allmon3 to automatically display all configured nodes will be changed. As a result, in addition to configuring your VOTER instance, you will also need to manually configure all the rest of your nodes, so that they will be displayed.</p> <p>The format is the same as other buttons, the critical part is the target (right side of the link). That must point to <code>voter.html#NODE</code>, where <code>NODE</code> is the node number you defined in <code>allmon3.ini</code>. The target can also be a FQDN, if you are pointing to a remote system (properly configured).</p> <pre><code>[ LOCAL VOTER ]       ; ignored for single menu items\ntype = single\nBUTTON_NAME = voter.html#NODE\n\n[ REMOTE VOTER ]\ntype = single\nRemote_VOTER = http://somesite.org/allmon3/voter.html#1999\n</code></pre>"},{"location":"allmon3/install/","title":"Installation","text":""},{"location":"allmon3/install/#supported-platforms","title":"Supported Platforms","text":"<p>Allmon3 is only supported on:</p> <ul> <li>Debian 12 Bookworm (including Raspoberry Pi OS 12)</li> <li>Debian 11 Bullseye (including Raspberry Pi OS 11)</li> </ul> <p>Allmon3 is installed by default on the Raspberry Pi Image, no installation actions are required, you can proceed directly to configuration.</p>"},{"location":"allmon3/install/#asl3-packages-install","title":"ASL3 Packages Install","text":""},{"location":"allmon3/install/#debian-12","title":"Debian 12","text":"<ul> <li>Install the AllStarLink repository file:</li> </ul> <pre><code>sudo -s\ncd /tmp\nwget https://repo.allstarlink.org/public/asl-apt-repos.deb12_all.deb\nsudo dpkg -i asl-apt-repos.deb12_all.deb\nsudo apt update\n</code></pre> <ul> <li>Install Allmon3:</li> </ul> <pre><code>sudo apt install allmon3\n</code></pre>"},{"location":"allmon3/install/#debian-11","title":"Debian 11","text":"<ul> <li>Enable the Debian 11 <code>bullseye-backports</code> package repository:</li> </ul> <pre><code>gpg --keyserver keyserver.ubuntu.com --recv-keys 0E98404D386FA1D9\ngpg --keyserver keyserver.ubuntu.com --recv-keys 6ED0E7B82643E131\ngpg --export 0E98404D386FA1D9 | sudo apt-key add -\ngpg --export 6ED0E7B82643E131 | sudo apt-key add -\necho \"deb https://deb.debian.org/debian bullseye-backports main\" &gt; /etc/apt/sources.list.d/bullseye-backports.list\napt update\n</code></pre> <ul> <li>Install the dependencies:</li> </ul> <pre><code>apt install -y apache2 python3-argon2 \napt install -y -t bullseye-backports python3-websockets python3-aiohttp python3-aiohttp-session\n</code></pre> <ul> <li>Install Allmon3:</li> </ul> <pre><code>wget https://github.com/AllStarLink/Allmon3/releases/download/t_rel_1_2_0/allmon3_1.2.0-1.bullseye_all.deb\ndpkg -i allmon3_1.2.0-1.bullseye_all.deb\n</code></pre>"},{"location":"allmon3/install/#debian-10","title":"Debian 10","text":"<p>NOTE: Allmon v1.2.1 will be the last version for Debian 10. Please upgrade your AllStarLink system to ASL3 on Debian 12.</p> <ul> <li>Enable the Debian 10 <code>buster-backports</code> package repository:</li> </ul> <pre><code>gpg --keyserver keyserver.ubuntu.com --recv-keys 04EE7237B7D453EC\ngpg --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138\ngpg --keyserver keyserver.ubuntu.com --recv-keys 0E98404D386FA1D9\ngpg --keyserver keyserver.ubuntu.com --recv-keys 6ED0E7B82643E131\ngpg --export 04EE7237B7D453EC | sudo apt-key add -\ngpg --export 648ACFD622F3D138 | sudo apt-key add -\ngpg --export 0E98404D386FA1D9 | sudo apt-key add -\ngpg --export 6ED0E7B82643E131 | sudo apt-key add -\necho \"deb https://deb.debian.org/debian buster-backports main\" &gt; /etc/apt/sources.list.d/buster-backports.list\napt update\n</code></pre> <ul> <li>Install the dependencies:</li> </ul> <pre><code>apt install -y apache2 python3-argon2 \napt install -y -t buster-backports python3-async-timeout python3-attr python3-multidict python3-yarl python3-pip\n</code></pre> <ul> <li>Install Python modules using <code>pip3</code>:</li> </ul> <pre><code>apt remove python3-aiohttp python3-websockets\npip3 install aiohttp\npip3 install aiohttp_session\npip3 install websockets\n</code></pre> <ul> <li>Update the CA Certificate chain since Debian 10 is out of support:</li> </ul> <pre><code>apt install ca-certificates\nupdate-ca-certificates --fresh\n</code></pre> <ul> <li>Install Allmon3 (Debian 10 version):</li> </ul> <pre><code>wget https://github.com/AllStarLink/Allmon3/releases/download/t_rel_1_2_0/allmon3_1.2.0-1.buster_all.deb\ndpkg -i allmon3_1.2.0-1.buster_all.debntu.com --recv-keys 6ED0E7B82643E131\n</code></pre>"},{"location":"allmon3/install/#using-nginx-instead-of-apache","title":"Using Nginx instead of Apache","text":"<p>Nginx can be used instead of Apache. Instead of using the <code>apache2</code> package, install <code>nginx</code> using the above directions. After configuring Nginx, edit <code>/etc/nginx/sites-available/default</code> (or your preferred site configuration) and add an <code>include</code> directive within the appropriate <code>server { }</code> configuration block. For example:</p> <pre><code>server {\n    listen 80 default_server;\n\n    [... other stuff ...]\n\n    include /etc/allmon3/nginx.conf;\n\n    [... other stuff ...]\n}\n</code></pre>"},{"location":"allmon3/install/#install-from-source","title":"Install from Source","text":"<p>Installation from source is not supported in the general use case. However, <code>make install</code> should yield a working system. Source is available at https://github.com/AllStarLink/Allmon3</p>"},{"location":"allmon3/usermgmt/","title":"User Management","text":"<p>Allmon3 supports a robust multi-user configuration that  permits per-node granular access as desired and that abstracts Allmon3 from the Asterisk AMI Manager configuration.</p> <p>Usernames and passwords are stored in <code>/etc/allmon3/users</code>.</p> <p>The default-configured username and password combination is<code>allmon3 / password</code>.</p> <p>You must change this before exposing a host to the Internet</p>"},{"location":"allmon3/usermgmt/#user-database","title":"User Database","text":"<p>Allmon3's user database is managed by <code>allmon3-passwd</code>. Adding a new user or editing an existing user is the same command. If the user does not exist, it will be added. If the user does exist, the password will be updated. </p> <p>To add or edit a user's password: </p> <pre><code>$ allmon3-passwd allmon3\nEnter the password for allmon3: password\nConfirm the password for allmon3: password\n</code></pre> <p>That's all there is to it. The <code>/etc/allmon3/users</code> file is readable to see that the Argon2 hash changed for the user.</p> <p>Deleting a user is simply adding the <code>--delete</code> flag to the command:</p> <pre><code>$ allmon3-passwd --delete allmon3\n</code></pre> <p>After changing a user's password, the Allmon3 daemon must be reloaded with <code>systemctl reload allmon3</code>.</p>"},{"location":"allmon3/usermgmt/#per-node-restrictions-for-users","title":"Per-Node Restrictions for Users","text":"<p>Allmon3 implements a lightweight access control system to restrict commands from certain users to certain nodes. Restrictions are configured in <code>/etc/allmon3/user-restrictions</code>. Given that the average use case is all users have similar access, the access control is implemented in a named-restrictions model for least configuration complexity.</p> <p>The logic is as follows when checking the restricted access list:</p> <ol> <li> <p>If the user is not listed in <code>user-restrictions</code> at all, then the user is permitted commands on all configured nodes.</p> </li> <li> <p>If the user is listed in <code>user-restrictions</code>, and is listed as restricted to the node being commanded, the user is permitted to issue the command.</p> </li> <li> <p>If the user is listed in <code>user-restrictions</code>, but the node is not listed for that user, the user is prohibited from issuing the command.</p> </li> </ol> <p>The format of the <code>user-restrictions</code> file is:</p> <pre><code>user1 | NODE[,NODE,NODE...]\nuser2 | NODE\n</code></pre> <p>Lines beginning with # are comments.</p>"},{"location":"config/","title":"Config Files","text":"<p>This section of the manual provides in in-depth look at all the configuration files related to ASL3.</p> <p>Information provided includes how the file is structured, the available/supported options, a description of the supported options, and what the default values of each option is (if applicable).</p>"},{"location":"config/config-structure/","title":"Structure of Config Files","text":"<p>Configuration files have a simple structure consisting of stanzas, <code>key=value</code> pairs and comments. A stanza is a block of text within a configuration file. It starts with a name (or number) surrounded by square brackets on a line by itself. Configuration files will have one or more stanzas. Each stanza continues until the next stanza or end of file. </p> <pre><code>[this is a stanza]\n...\n\n[this is another stanza]\n...\n</code></pre> <p>Stanzas contain one or more <code>key=value</code> pairs. <code>Key=value</code> pairs set various values within each stanza.</p> <pre><code>myname=timothy ; There are some who call me Tim?\n</code></pre> <p>Config file comments are preceded with a semicolon. In this example of two nodes the stanza is the node number and the <code>key=value</code> pairs set the CW ID and the ID timer:</p> <pre><code>[1998]\nidrecording = |iW1ABC\nidtime = 540000          ; 9 minutes\n\n[1999]\nidrecording = |iW1XYZ\nidtime = 540000 \n</code></pre>"},{"location":"config/config-structure/#settings-to-name-other-stanzas","title":"Settings to name other Stanzas","text":"<p>Within the <code>[node]</code> stanza in <code>rpt.conf</code>, some <code>key=value</code> pairs point to other stanzas. This allows nodes on the same <code>Asterisk/app_rpt</code> server to have the same settings (without duplicate entries) or different settings in some cases. For example, the phone patch command may be *6 on one node, yet *61 on another.</p> <p>For example:</p> <pre><code>[1000]\nfunctions=functionsVHF\n\n[1001]\nfunctions=functionsVHF   ;same functions as node 1000\n\n[1002]\nfunctions=functionsUHF\n\n[functionsVHF]\n; Two meter Autopatch up is *6\n6=autopatchup,noct=1,farenddisconnect=1,dialtime=20000 \n0=autopatchdn       ; Autopatch down\n\n[functionsUHF]\n; 440 Autopatch up is *61\n61=autopatchup,noct=1,farenddisconnect=1,dialtime=20000  ; Autopatch up\n0=autopatchdn       ; Autopatch down\n</code></pre>"},{"location":"config/config-structure/#named-stanzas-in-rptconf","title":"Named Stanzas in rpt.conf","text":"<p>The <code>key=value</code> pairs that redirect to other named stanzas in <code>rpt.conf</code> are:</p> <ul> <li>controlstates=</li> <li>events=</li> <li>functions=</li> <li>link_functions=</li> <li>macro=</li> <li>morse=</li> <li>nodes=</li> <li>phone_functions=</li> <li>scheduler=</li> <li>telemetry=</li> <li>tonemacro=</li> <li>wait_times=</li> </ul> <p>Note: A stanza is also called a context in Asterisk PBX terminology, particularly related to the dialplan.</p>"},{"location":"config/rpt_conf/","title":"rpt.conf","text":"<p>Rpt.conf (<code>/etc/asterisk/rpt.conf</code>) is where the majority of user-facing features, such as the node's CW and voice ID, DTMF commands and timers are set. There is a lot of capability here which can be difficult to grasp. Fortunately the default <code>rpt.conf</code> is well commented and will work fine for most node admins.</p> <p>See also config file templating.</p>"},{"location":"config/rpt_conf/#dtmf-commands","title":"DTMF Commands","text":"<p>DTMF commands are placed in any one of three named stanzas. These stanzas control access to DTMF commands that a user can issue from various  control points.</p> <ul> <li>The Fuctions Stanza - to decode DTMF from the node's local receiver.</li> <li>The Link Functions Stanza - to decode DTMF from linked nodes.</li> <li>The Phone Functions Stanza - to decode DTMF from telephone connects.</li> </ul> <p>A DTMF <code>key=value</code> pair has the following format:</p> <p><code>dtmfcommand=functionclass,[functionmethod],[parameters]</code></p> <p>Where:</p> <ul> <li><code>dtmfcommand</code> is a DTMF digit sequence minus the start character (usually *, so a <code>dtmfcommand</code> of 81 would actually be *81 when entered via radio)</li> <li><code>functionclass</code> is a string which defines the class of command; <code>link</code>, <code>status</code>, or <code>COP</code></li> <li><code>functionmethod</code> defines the optional method number to use in the function class</li> <li><code>parameters</code> are one or more optional comma separated parameters that further define a command.</li> </ul>"},{"location":"config/rpt_conf/#status-commands","title":"Status Commands","text":"<p>Commands using the <code>status</code> function class are used to provide general information about the local node.</p> <p>Sample:</p> <pre><code>712 = status,12   ; Give Time of Day (local only)\n</code></pre> Status Description 1 Force ID (global) 2 Give Time of Day (global) 3 Give software Version (global) 4 Give GPS location info 5 Speak the last (dtmf) user 11 Force ID (local only) 12 Give Time of Day (local only)"},{"location":"config/rpt_conf/#link-commands","title":"Link Commands","text":"<p>Commands using the <code>link</code> function class affect connecting to, disconnecting from, monitoring (RX only) other nodes, and providing linking status. </p> <p>Sample:</p> <pre><code>3 = ilink,3   ; Connect specified link -- transceive\n</code></pre> <p>NOTE: The above example creates the following DTMF command: *3&lt;nodenumber&gt;, which will use <code>ilink,3</code> to connect in transceive mode to the specified node number entered as part of the DTMF command.</p> <p>See the table below for the available link commands, and whether they take a node number as a (required) parameter when being entered:</p> ilink Description Node Number Required 1 Disconnect specified link Yes 2 Connect specified link -- monitor only Yes 3 Connect specified link -- tranceive Yes 4 Enter command mode on specified link Yes 5 System status No 6 Disconnect all links No 7 Last Node to Key Up No 8 Connect specified link -- local monitor only Yes 9 Send Text Message (9,&lt;destnodeno or 0 (for all)&gt;,Message Text, etc.) No 10 Disconnect all RANGER links (except permalinks) No 11 Disconnect a previously permanently connected link Yes 12 Permanently connect specified link -- monitor only Yes 13 Permanently connect specified link -- tranceive Yes 15 Full system status (all nodes) No 16 Reconnect links disconnected with \"disconnect all links\" No 17 MDC test (for diag purposes) No 18 Permanently Connect specified link -- local monitor only Yes <p>The commands to permanently connect a link will have <code>app_rpt</code> try to maintain those connections across network disruptions.</p>"},{"location":"config/rpt_conf/#cop-commands","title":"COP Commands","text":"<p>Commands using the <code>cop</code> (Control OPerator) function class are privileged commands. Node admins may provide some of these to their user community based on personal preference. </p> <p>Sample:</p> <pre><code>99 = cop,7   ; enable timeout timer\n</code></pre> <p>Some COP commands can take multiple parameters. For example this COP 48 would send #3#607 on command:</p> <p>Sample:</p> <pre><code>900 = cop,48,#,3,#,6,0,7 \n</code></pre> COP Description 1 System warm boot 2 System enable 3 System disable 4 Test Tone On/Off 5 Dump System Variables on Console (debug) 6 PTT (phone mode only) 7 Time out timer enable 8 Time out timer disable 9 Autopatch enable 10 Autopatch disable 11 Link enable 12 Link disable 13 Query System State 14 Change System State 15 Scheduler Enable 16 Scheduler Disable 17 User functions (time, id, etc) enable 18 User functions (time, id, etc) disable 19 Select alternate hang timer 20 Select standard hang timer 21 Enable Parrot Mode 22 Disable Parrot Mode 23 Birdbath (Current Parrot Cleanup/Flush) 24 Flush all telemetry 25 Query last node un-keyed 26 Query all nodes keyed/unkeyed 27 Reset DAQ minimum on a pin 28 Reset DAQ maximum on a pin 30 Recall Memory Setting in Attached Xcvr 31 Channel Selector for Parallel Programmed Xcvr 32 Touchtone pad test: command + Digit string + # to playback all digits pressed 33 Local Telemetry Output Enable 34 Local Telemetry Output Disable 35 Local Telemetry Output on Demand 36 Foreign Link Local Output Path Enable 37 Foreign Link Local Output Path Disable 38 Foreign Link Local Output Path Follows Local Telemetry 39 Foreign Link Local Output Path on Demand 42 Echolink announce node # only 43 Echolink announce node Callsign only 44 Echolink announce node # and Callsign 45 Link Activity timer enable 46 Link Activity timer disable 47 Reset \"Link Config Changed\" Flag 48 Send Page Tone (Tone specs separated by parenthesis) 49 Disable incoming connections (control state noice) 50 Enable incoming connections (control state noicd) 51 Enable sleep mode 52 Disable sleep mode 53 Wake up from sleep 54 Go to sleep 55 Parrot Once if parrot mode is disabled 56 Rx CTCSS Enable 57 Rx CTCSS Disable 58 Tx CTCSS On Input only Enable 59 Tx CTCSS On Input only Disable 60 Send MDC-1200 Burst (cop,60,type,UnitID[,DestID,SubCode]) Type is 'I' for PttID, 'E' for Emergency, and 'C' for Call (SelCall or Alert), or 'SX' for STS (status), where X is 0-F. DestID and subcode are only specified for  the 'C' type message. UnitID is the local systems UnitID. DestID is the MDC1200 ID of the radio being called, and the subcodes are as follows: Subcode '8205' is Voice Selective Call for Spectra ('Call') Subcode '8015' is Voice Selective Call for Maxtrac ('SC') or Astro-Saber('Call') Subcode '810D' is Call Alert (like Maxtrac 'CA') 61 Send Message to USB to control GPIO pins (cop,61,GPIO1=0[,GPIO4=1]...) 62 Send Message to USB to control GPIO pins, quietly (cop,62,GPIO1=0[,GPIO4=1]...) 63 Send pre-configred APRSTT notification (cop,63,CALL[,OVERLAYCHR]) 64 Send pre-configred APRSTT notification, quietly (cop,64,CALL[,OVERLAYCHR]) 65 Send POCSAG page (equipped channel types only)"},{"location":"config/rpt_conf/#general-stanza","title":"General Stanza","text":"<p>ASL3 introduces a new stanza in <code>rpt.conf</code>, the <code>[general]</code> stanza.</p> <p>Presently, this stanza just contains a <code>key=value</code> for how node lookups are handled:</p> <pre><code>[general]\nnode_lookup_method = both           ;method used to lookup nodes\n                                    ;both = dns lookup first, followed by external file (default)\n                                    ;dns = dns lookup only\n                                    ;file = external file lookup only\n</code></pre> <p>See Node Resolution for how this new node lookup method is handled.</p>"},{"location":"config/rpt_conf/#node-number-stanza","title":"Node Number Stanza","text":"<p>The node number stanza is a critical stanza in <code>rpt.conf</code>. </p> <pre><code>[1999]    ; Replace with your assigned or private node number\n</code></pre> <p>The node number stanza is set to the assigned node number or a private node number (if a private node is being configured). It will normally be configured by asl-menu.</p> <p>The node number stanza contains all the configurable options for that specific node using a <code>key=value</code> pair syntax. The following configurable options are available to use:</p>"},{"location":"config/rpt_conf/#accountcode","title":"accountcode=","text":"<p>This option is optional, it sets the <code>ACCOUNTCODE</code> variable to be passed back to other Asterisk applications, namely for call detail records (CDR).</p> <p>Sample:</p> <pre><code>accountcode=RADIO   ; set the accountcode variable to RADIO\n</code></pre>"},{"location":"config/rpt_conf/#althangtime","title":"althangtime=","text":"<p>This setting controls the length of the repeater hang time when the alternate hang timer is selected with a control operator function. It is specified in milliseconds. </p> <p>Sample:</p> <pre><code>althangtime=4000   ; 4 seconds\n</code></pre>"},{"location":"config/rpt_conf/#aprstt","title":"aprstt=","text":"<p>This option enables APRStt. Set the <code>aprstt=</code> option to a matching context in <code>/etc/asterisk/gps.conf</code> to enable. You also need to have the <code>app_gps.so</code> module loaded in <code>/etc/asterisk/modules.conf</code>.</p> <p>Sample:</p> <pre><code>aprstt = general             ;  Point to the [general] context in gps.conf\n</code></pre> <p>See the comments in <code>gps.conf</code> for more details on configuring.</p>"},{"location":"config/rpt_conf/#archivedir","title":"archivedir=","text":"<p>This option is used to enable a simple log and audio recorder of the activity on a node. When enabled, a series of recordings, one for each active COR on the node, is generated. The file(s) will be named with the date and time down to the second (this may change to provide more granularity in the future). This logging can be useful in debugging, policing, or other creative things.</p> <p>Sample:</p> <pre><code>archivedir = /var/spool/asterisk/monitor ; top-level recording directory\n</code></pre> <p>The <code>archivedir=</code> and <code>archiveformat=</code> options can be implemented in the <code>[node-main](!)</code> stanza to apply to all nodes on the server, or in the per-node stanza for recording individual nodes. See config file templating for more information.</p> <p>NOTE: Enabling this function can adversely impact the CPU utilization on the device, and consume large amounts of the available storage. You would be wise to implement a script or look at a utility such as <code>logrotate</code> to periodically flush old recordings and logs.</p>"},{"location":"config/rpt_conf/#archiveformat","title":"archiveformat=","text":"<p>This option specifies the format of the audio recordings in <code>archivedir=</code>. By default, the format will be \"wav49\" (GSM in a .WAV file). Other options you may consider include \"wav\" (SLIN in a .wav file) and \"gsm\" (GSM in straight gsm format).</p> <p>Sample:</p> <pre><code>archiveformat = wav49                    ; audio format (default = wav49)\n</code></pre>"},{"location":"config/rpt_conf/#beaconing","title":"beaconing=","text":"<p>This option, when set to <code>1</code> will send the repeater ID at the <code>idtime</code> interval, regardless of whether there was repeater activity or not. This feature appears to be required in the UK, but is probably illegal in the US.</p> <p>Sample:</p> <pre><code>beaconing=1   ;Set to 1 to beacon. Defaults to 0\n</code></pre> <p>See European Repeater Operation for more information on the application of this option.</p>"},{"location":"config/rpt_conf/#callerid","title":"callerid=","text":"<p>This option allows the autopatch on the node to be identified with a specific caller ID. The default setting is as follows</p> <pre><code>callerid=\"Repeater\" &lt;0000000000&gt;\n</code></pre> <p>Note: The value in quotes is the name of the autopatch caller, and the numbers in angle brackets are the originating telephone number to use.</p>"},{"location":"config/rpt_conf/#connpgm-and-discpgm","title":"connpgm= and discpgm=","text":"<p>These options run user defined scripts.</p> <p><code>connpgm</code> executes a program you specify on connect. It passes 2 command line arguments to your program:</p> <ol> <li>node number in this stanza (us)</li> <li>node number being connected to us (them)</li> </ol> <p><code>discpgm</code> executes a program you specify on disconnect. It passes 2 command line arguments to your program:</p> <ol> <li>node number in this stanza (us)</li> <li>node number being connected to us (them)                         </li> </ol> <p>Sample:</p> <pre><code># Place these lines in rpt.conf for each node:\n#     connpgm=/etc/asterisk/custom/myscript 1\n#     discpgm=/etc/asterisk/custom/myscript 0\n</code></pre>"},{"location":"config/rpt_conf/#context","title":"context=","text":"<p>This setting directs the autopatch for the node to use a specific context in <code>extensions.conf</code> for outgoing autopatch calls. The default is to specify a context name of radio.</p> <pre><code>context=radio\n</code></pre>"},{"location":"config/rpt_conf/#controlstates","title":"controlstates=","text":"<p>This setting allows you to override the stanza name used for the <code>[Control States]</code> in <code>rpt.conf</code>. Control states are an optional feature which allows groups of control operator commands to be executed all at once. To use control states, define an entry in your node stanzas to point to a dedicated control states stanza like this:</p> <pre><code>controlstates = controlstates   ; points to control state stanza\n\n[controlstates]\n0 = rptena,lnkena,apena,totena,ufena,noicd  ; Normal operation                                  \n1 = rptena,lnkena,apdis,totdis,ufena,noice  ; Net and news operation                                             \n2 = rptena,lnkdis,apdis,totena,ufdis,noice  ; Repeater only operation\n</code></pre> <p>The default is to have <code>controlstates=</code> point to a stanza called <code>controlstates</code>. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>The Control States Stanza describes these mnemonics in detail.</p>"},{"location":"config/rpt_conf/#duplex","title":"duplex=","text":"<p>This setting sets the duplex mode for desired radio operation. Duplex mode 2 is the default if nonthing specified.</p> Duplex Mode Description 0 Half duplex with no telemetry tones or hang time. Special Case: Full duplex if linktolink is set to yes. This mode is preferred when interfacing with an external multiport repeater controller. Comment out idrecording and idtalkover to suppress IDs. 1 Half duplex with telemetry tones and hang time. Does not repeat audio. This mode is preferred when interfacing a simplex node. 2 Full Duplex with telemetry tones and hang time. This mode is preferred when interfacing a repeater. 3 Full Duplex with telemetry tones and hang time, but no repeated audio. 4 Full Duplex with telemetry tones and hang time. Repeated audio only when the autopatch is down. <p>Sample:</p> <pre><code>duplex = 0     ; 0 = Half duplex with no telemetry tones or hang time.\n</code></pre>"},{"location":"config/rpt_conf/#eannmode","title":"eannmode=","text":"<p>This option sets the Echolink node announcement type, when a node connects:</p> <ul> <li>1 = Say only node number (default)</li> <li>2 = Say phonetic call sign only on Echolink connects</li> <li>3 = Say phonetic call sign and node number on Echolink connects</li> </ul>"},{"location":"config/rpt_conf/#echolinkdefault","title":"echolinkdefault=","text":"<p>This option sets the Echolink telemetry option:</p> <ul> <li>0 = telemetry output off</li> <li>1 = telemetry output on</li> <li>2 = timed telemetry output on command execution and for a short time thereafter</li> <li>3 = follow local telemetry mode</li> </ul>"},{"location":"config/rpt_conf/#echolinkdynamic","title":"echolinkdynamic=","text":"<p>This option enables/disables the Echolink telemetry COP command.</p> <ul> <li>0 = disallow users to change current Echolink telemetry setting with a COP command</li> <li>1 = allow users to change the setting with a COP command</li> </ul>"},{"location":"config/rpt_conf/#endchar","title":"endchar=","text":"<p>This setting allows the end character used by some control functions to be changed. By default this is a <code>#</code>. The <code>endchar</code> value must not be the same as the <code>funcchar</code> default (<code>*</code>) or its overridden value.</p>"},{"location":"config/rpt_conf/#erxgain","title":"erxgain=","text":"<p>This option adjusts the Echolink receive gain in +/- dbV. It is used to balance Echolink recieve audio levels on an <code>app_rpt</code> node. </p> <p>Sample:</p> <pre><code>erxgain = -3\n</code></pre> <p>See the Echolink How-to for more information.</p>"},{"location":"config/rpt_conf/#etxgain","title":"etxgain=","text":"<p>This option adjusts the Echolink transmit gain in +/- dbV. It is used to balance Echolink transmit audio on an <code>app_rpt</code> node. </p> <p>Sample:</p> <pre><code>etxgain = 3\n</code></pre> <p>See the Echolink How-to for more information.</p>"},{"location":"config/rpt_conf/#events","title":"events=","text":"<p>This option allows you to override the name used for the <code>[events]</code> stanza in <code>rpt.conf</code>. You can create events to specify that actions be taken when certain events occur such as transitions in receive and transmit keying, the presence and modes of links, and external inputs such as GPIO pins on the URI (or similar USB devices).</p> <p>To use events, define an entry in your node stanzas to point to a dedicated events stanza like this:</p> <pre><code>events = events   ; points to the events stanza\n\n[events]\n;;;;; Events Management ;;;;;\nstatus,2 = c|f|RPT_NUMLINKS      ; Say time of day when all links disconnect.\n</code></pre> <p>The default is to have <code>events=</code> point to a stanza called <code>events</code>. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See Event Management for a more detailed look on how to configure events.</p>"},{"location":"config/rpt_conf/#extnodefile","title":"extnodefile=","text":"<p>This option allows you to set the name of the external node lookup file. The default value is <code>/var/lib/asterisk/rpt_extnodes</code>. This file is used to look up node information when linking to other nodes.  It is also used to validate nodes that are connecting to your node.</p> <p>Sample:</p> <pre><code>extnodefile=/var/lib/asterisk/rpt_extnodes\n</code></pre> <p>The default file is automatically updated using the node update script or the <code>asl3-update-nodelist</code> service.</p> <p>The <code>extnodefile=</code> option supports multiple file names. In some cases, you may want the default file, along with a static locally maintained node file.  Multiple file names can be entered by separating them with a comma. A maximum of 100 external files can be specified.</p> <p>Sample:</p> <pre><code>extnodefile=/var/lib/asterisk/rpt_extnodes,/var/lib/asterisk/myrpt_extnodes\n</code></pre> <p>If a custom <code>extnodefile=</code> is used, it must have the section header <code>[extnodes]</code> or a custom header as described in extnodes.</p> <p>Also see Node Resolutuion for information on how to configure node lookups. </p> <p>This option does not appear in the default <code>rpt.conf</code>.</p>"},{"location":"config/rpt_conf/#extnodes","title":"extnodes=","text":"<p>This option allows you to set the section name used for <code>[extnodes]</code> in the <code>rpt_extnodes</code> file.  The default value is <code>extnodes</code>. This translates to <code>[extnodes]</code> section header. </p> <p>Sample:</p> <pre><code>extnodes=myextnodes\n</code></pre> <p>In this example, you would need to configure the section <code>[myextnodes]</code> in your custom <code>rpt_extnodes</code> file.  <code>app_rpt</code> will no longer look for an <code>[extnodes]</code> section header for this node, it will look for <code>[myextnodes]</code> instead.</p> <p>See the extnodefile for more information on how the <code>extnodes</code> section is used.</p> <p>This option does not appear in the default <code>rpt.conf</code>.</p>"},{"location":"config/rpt_conf/#funcchar","title":"funcchar=","text":"<p>This setting can be used to change the default function starting character of <code>*</code> to something else. Please note that the new value chosen must not be the same as the default (<code>#</code>) or overridden value for <code>endchar=</code>.</p>"},{"location":"config/rpt_conf/#functions","title":"functions=","text":"<p>The <code>functions</code> option allows you to override the stanza name used for the <code>functions</code> stanza in <code>rpt.conf</code>. Functions are used to decode DTMF commands when accessing the node from its receiver. To use functions, define an entry in your node stanzas to point to a dedicated function stanza like this:</p> <p>Sample:</p> <p><pre><code>functions = functions   ; pointer to functions stanza\n</code></pre> The default is to have <code>functions=</code> point to a stanza called <code>functions</code>, and have a common set of commands for all nodes. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See the Functions Stanza for more detail on defining functions.</p>"},{"location":"config/rpt_conf/#hangtime","title":"hangtime=","text":"<p>This option controls the length of the repeater (squelch tail) hang time. It is specified in milliseconds. </p> <p>Sample:</p> <pre><code>hangtime = 1000   ;Set hang time for 1 second\n</code></pre> <p>The default is 5000(ms), or 5sec.</p>"},{"location":"config/rpt_conf/#holdofftelem","title":"holdofftelem=","text":"<p>This option forces all telemetry to be held off until a local user on the receiver or a remote user over a link unkeys. There is one exception to this behavior, and that is when an ID needs to be sent and there is activity coming from a linked node.</p> <p>Sample:</p> <pre><code>holdofftelem = 0   ;Set to 1 to hold off. Default is 0\n</code></pre>"},{"location":"config/rpt_conf/#idrecording","title":"idrecording=","text":"<p>The identifier message is stored in the node stanza using the <code>idrecording=</code> setting. It can be changed to a different call sign by changing the value to something different. The value can be either a morse code identification string (when prefixed with <code>|i</code>), or the name of a sound file containing a voice identification message. When using a sound file, the default path for the sound file is <code>/var/lib/asterisk/sounds</code>. Example usages are as follows:</p> <p>Sample:</p> <pre><code>idrecording = |iWB6NIL   ; Morse Code ID\n</code></pre> <p>or</p> <pre><code>idrecording = /var/lib/asterisk/sounds/myid   ; Voice ID\n</code></pre> <p>Note: ID recording files must have extension gsm, ulaw, pcm, or wav. The extension is left off when it is defined as the example shows above. File extensions are used by Asterisk to determine how to decode the file. All ID recording files should be sampled at 8KHz. See Recording Audio Files for more information (link pending).</p>"},{"location":"config/rpt_conf/#idtalkover","title":"idtalkover=","text":"<p>The ID talkover message is stored in the node stanza using the <code>idtalkover=</code> setting. The purpose of <code>idtalkover</code> is to specify an alternate ID to use when the ID must be sent over the top of a user transmission. This can be a shorter voice ID or an ID in morse code. The value can be either a morse code identification string (when prefixed with <code>|i</code>), or the name of a sound file containing a voice identification message. When using a sound file, the default path for the sound file is <code>/var/lib/asterisk/sounds</code>. Example usages are as follows:</p> <p>Sample:</p> <pre><code>idtalkover = |iwa6zft/r   ; Morse Code ID\n</code></pre> <p>or</p> <pre><code>idtalkover = /var/lib/asterisk/sounds/myid   ; Voice ID\n</code></pre> <p>Note: ID recording files must have extension gsm,ulaw,pcm, or wav. The extension is left off when it is defined as the example shows above. File extensions are used by Asterisk to determine how to decode the file. All ID recording files should be sampled at 8KHz. See Recording Audio Files for more information (link pending).</p>"},{"location":"config/rpt_conf/#idtime","title":"idtime=","text":"<p>This option sets the ID interval time, in mS. It is optional.</p> <p>Sample:</p> <pre><code>idtime = 540000                     ; id interval time (in ms) (optional)\n</code></pre> <p>The default is 5 minutes (300000mS).</p>"},{"location":"config/rpt_conf/#inxlat","title":"inxlat=","text":"<p>The input translate option allows complete remapping of the <code>funcchar</code> and <code>endchar</code> digits to different digits or digit sequences.</p> <p><code>inxlat</code> acts on the digits received by the radio receiver on the node.</p> <p>Format: <code>inxlat = funcchars,endchars,passchars[,dialtone]</code></p> <p>where:</p> <ul> <li><code>funcchars</code> is the digit or digit sequence to replace <code>funcchar</code></li> <li><code>endchars</code> is the digit or digit sequence to replace <code>endchar</code></li> <li><code>passchars</code> are the digits to pass through (can be used to block certain digits)</li> <li><code>dialtone</code> set to <code>y</code> to optionally play dialtone on a function.</li> </ul> <p>Sample:</p> <pre><code>inxlat = #456,#457,0123456789ABCD ; string xlat from radio port to sys\n</code></pre> <p>In the above example, on inbound DTMF, translate #456 as <code>funcchar</code> (normally <code>*</code>), #457 as <code>endchar</code> (normally <code>#</code>), and pass all other digits listed in <code>passchars</code> normally.</p>"},{"location":"config/rpt_conf/#link_functions","title":"link_functions=","text":"<p>This option allows you to override the stanza name used for the <code>link_functions</code> stanza in <code>rpt.conf</code>. The <code>link_functions=</code> setting directs the node to use a particular function stanza for functions dialed by users accessing the node via a link from another node. </p> <p>Sample:</p> <pre><code>link_functions = functions ; pointer to the function stanza\n</code></pre> <p>The default is to have <code>link_functions=</code> point to a stanza called <code>functions</code>, and have a common set of commands for all nodes. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See the Functions Stanza for more detail on defining functions.</p>"},{"location":"config/rpt_conf/#lnkactenable","title":"lnkactenable=","text":"<p>Set this option to enable the link activity timer. This applies to standard nodes only. </p> <p>Sample: <pre><code>lnkactenable = 0                   ; Set to 1 to enable the link activity timer.\n</code></pre></p> <p>The default is <code>0</code> (disabled).</p>"},{"location":"config/rpt_conf/#lnkacttime","title":"lnkacttime=","text":"<p>Set the optional link activity timer (<code>lnkactenable</code> must be enabled for this to have any effect). The value is in seconds.</p> <p>Sample:</p> <pre><code>lnkacttime = 1800                  ; Link activity timer time in seconds.\n</code></pre>"},{"location":"config/rpt_conf/#lnkactmacro","title":"lnkactmacro=","text":"<p>Play the defined macro when the link activity timer expires.</p> <p>Sample:</p> <pre><code>lnkactmacro = *52                  ; Function to execute when link activity timer expires.\n</code></pre>"},{"location":"config/rpt_conf/#lnkacttimerwarn","title":"lnkacttimerwarn=","text":"<p>Set this to the voice file to play when the link activity timer has 30 seconds remaining.</p> <p>Sample:</p> <pre><code>lnkacttimerwarn = 30seconds        ; Message to play when the link activity timer has 30 seconds left.\n</code></pre>"},{"location":"config/rpt_conf/#linkmongain","title":"linkmongain=","text":"<p>This option adjusts the audio level of monitored nodes when a signal from another node or the local receiver is received. If <code>linkmongain</code> is set to a negative number the monitored audio will decrease by the set amount in dB. If <code>linkmongain</code> set to a positive number monitored audio will increase by the set amount in dB. The value of <code>linkmongain</code> is in dB. The default value is 0dB.</p> <p>Sample:</p> <pre><code>linkmongain = -20   ; reduce link volume 20dB\n</code></pre>"},{"location":"config/rpt_conf/#linktolink","title":"linktolink=","text":"<p>When operating in duplex mode 0, this forces the radio interface to operate in full duplex mode, but keeps all the other \"duplex mode 0\" semantics. </p> <p>This is used when a radio interface is connected to a multiport analog repeater controller. The <code>linktolink=</code> option can take two values: <code>yes</code>/<code>1</code> or <code>no</code>/<code>0</code>.</p> <p>Sample:</p> <pre><code>linktolink = no   ; set to yes to enable. Default is no.\n</code></pre>"},{"location":"config/rpt_conf/#linkunkeyct","title":"linkunkeyct=","text":"<p>This option selects the courtesy tone to send when a connected remote node unkeys. The default is no courtesy tone when a remote node unkeys.</p> <p>Sample:</p> <pre><code>linkunkeyct = ct8  ; use courtesy tone 8\n</code></pre>"},{"location":"config/rpt_conf/#litzchar","title":"litzchar=","text":"<p>This option sets the DTMF character used to initiate the Long Tone Zero (LiTZ) feature. LiTZ is an optional feature that users can initiate to indicate they require immediate assistance. When the LiTZ DTMF character is sent for longer than the LiTZ time, the LiTZ command will be triggered. This could dial 911 on the autopatch, play a message, connect to another node, etc.</p> <p>Sample:</p> <pre><code>litzchar = 0       ; 0 is the default DTMF access character for the LiTZ feature\n</code></pre>"},{"location":"config/rpt_conf/#litzcmd","title":"litzcmd=","text":"<p>This option defines the command to run when the LiTZ feature is initiated. Leave blank to disable LiTZ (default).</p> <p>Sample:</p> <pre><code>litzcmd = *6911     ; dial 911 on the autopatch when LiTZ is activated\n</code></pre>"},{"location":"config/rpt_conf/#litztime","title":"litztime=","text":"<p>This option defines how long <code>litzchar</code> needs to be sent for, to be considered valid. If <code>litzchar</code> is received for this minimum period, <code>litzcmd</code> will be executed when the user unkeys. The default is 3000mS (3 seconds).</p> <p>Sample:</p> <pre><code>litztime = 3000     ; default 3000mS (3 seconds)\n</code></pre>"},{"location":"config/rpt_conf/#macro","title":"macro=","text":"<p>This option allows you to override the stanza name used for the <code>[macro]</code> stanza in <code>rpt.conf</code>. The macro stanza directs the node to use a particular stanza for macros dialed by users accessing the node. Macros are DTMF shortcuts, and are a special type of function. </p> <p>Sample:</p> <pre><code>macro=macro   ; use stanza named macro\n\n[macro]\n1 = *32000 *32001#                  ; connect to nodes 2000 and 2001\n</code></pre> <p>The default is to have <code>macro=</code> point to a stanza called <code>macro</code>, and have a common set of commands for all nodes. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See the Macro Stanza for more detail on defining macros.</p>"},{"location":"config/rpt_conf/#morse","title":"morse=","text":"<p>This option allows you to override the stanza name used for the <code>morse</code> stanza in <code>rpt.conf</code>. The morse stanza directs the node to use a particular stanza for morse code parameters for the node. Morse code parameters can be defined on a per-node basis.  </p> <p>Sample:</p> <pre><code>morse=morse   ; use stanza named morse\n\n[morse]\nspeed = 20                          ; Approximate speed in WPM\nfrequency = 400                     ; Morse Telemetry Frequency\namplitude = 4096                    ; Morse Telemetry Amplitude\nidfrequency = 400                   ; Morse ID Frequency\nidamplitude = 1024                  ; Morse ID Amplitude\n</code></pre> <p>The default is to have <code>morse=</code> point to a stanza called <code>morse</code>, and have a common set of commands for all nodes. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See the Morse Stanza for more detail on defining morse parameters.</p>"},{"location":"config/rpt_conf/#nodenames","title":"nodenames=","text":"<p>This option lets you override the default location to look for custom nodename files to play back when a node connects/disconnects.</p> <p>The default location is <code>/var/lib/asterisk/sounds/rpt/nodenames</code>.</p> <p>Sample:</p> <pre><code>nodenames = /var/lib/asterisk/sounds/rpt/nodenames.callsign  ; Point to alternate nodename sound directory\n</code></pre> <p>When a node connects/disconnects, Asterisk will look in this directory for a filename that matches the calling node number. If it finds such a file, it will play it as the connect/disconnect message.</p>"},{"location":"config/rpt_conf/#nodes","title":"nodes=","text":"<p>This option allows you to override the section name used for the '[nodes]' stanza in <code>rpt.conf</code>. The default value is <code>nodes</code>. The <code>[nodes]</code> stanza operates like a \"hosts\" file in an OS, and is the first place <code>app_rpt</code> looks to resolve how to reach a particular node.</p> <p>Sample:</p> <pre><code>nodes=mynodes\n</code></pre> <p>In this example, you would need to configure the section <code>[mynodes]</code> in <code>rpt.conf</code>.  <code>app_rpt</code> will no longer look for a <code>[nodes]</code> section header for this node, it will look for <code>[mynodes]</code> instead.</p> <p>See the Nodes Stanza for more information on how the nodes section is used.</p> <p>This option does not appear in the default <code>rpt.conf</code>, and as such, app_rpt uses the default stanza of <code>[nodes]</code></p>"},{"location":"config/rpt_conf/#nolocallinkct","title":"nolocallinkct=","text":"<p>Set this option to send <code>unlinkedct</code> instead, if another local node is connected to this node (hosted on the same PC).</p> <p>Sample:</p> <pre><code>nolocallinkct = 0     ; default is 0, set to 1 to enable \n</code></pre>"},{"location":"config/rpt_conf/#nounkeyct","title":"nounkeyct=","text":"<p>This option completely disables the courtesy tone. This is useful for eliminating TX tail time in applications using simplex uplinks to repeaters on the repeater pair itself.  This practice is strongly discouraged. The <code>nounkeyct=</code> option can take two values: <code>yes</code>/<code>1</code> or <code>no</code>/<code>0</code>.</p> <p>Sample:</p> <pre><code>nounkeyct = no  ; Set to yes to disable :(. Default is no.\n</code></pre>"},{"location":"config/rpt_conf/#outstreamcmd","title":"outstreamcmd=","text":"<p>This option is used to configure the utilities to run on th system to support streaming the node's audio to a streaming server.</p> <p>Sample:</p> <pre><code>outstreamcmd = /bin/sh,-c,/usr/bin/lame --preset cbr 16 -r -m m -s 8 --bitwidth 16 - - | /usr/bin/ezstream -qvc /etc/ezstream.xml\n</code></pre> <p>or</p> <pre><code>outstreamcmd = /usr/local/bin/nptee,broadcastify,otherstreamserver     ; Use the available nptee utility to stream to multiple servers at once\n</code></pre> <p>See Streaming a Node to Broadcastify for further information and details on how to configure audio streaming of the node.</p>"},{"location":"config/rpt_conf/#outxlat","title":"outxlat=","text":"<p>The output translate option allows complete remapping of the <code>funcchar</code> and <code>endchar</code> digits to different digits or digit sequences.</p> <p><code>outxlat</code> acts on the digits sent by the node to a link.</p> <p>Format: <code>outxlat = funcchars,endchars,passchars</code></p> <p>where:</p> <ul> <li><code>funcchars</code> is the digit or digit sequence to replace <code>funcchar</code></li> <li><code>endchars</code> is the digit or digit sequence to replace <code>endchar</code></li> <li><code>passchars</code> are the digits to pass through (can be used to block certain digits).</li> </ul> <p>Sample:</p> <pre><code>outxlat = *7,*0,0123456789ABCD ; string xlat from sys to radio port\n</code></pre> <p>In the above example, on outbound DTMF, 7 generates a <code>funcchar</code> (normally <code>*</code>), 0 generates an <code>endchar</code> (normally <code>#</code>), and pass all other digits listed in <code>passchars</code> normally.</p> <p>NOTE: This option is not well documented in the code, your mileage may vary.</p>"},{"location":"config/rpt_conf/#parrotmode","title":"parrotmode=","text":"<p>The \"parrot\" repeats everything it hears. Use this option to create an \"echo reflector node\", where everything you transmit to the node will be played back when you unkey.</p> <p>Sample:</p> <pre><code>parrotmode = 0                      ; 0 = Parrot Off (default = 0)\n</code></pre> <p>Parrot mode can operate in a number of different methods:</p> <ul> <li>0 = Parrot Off (default = 0)</li> <li>1 = Parrot On Command (see <code>cop,21 and cop,22</code>)</li> <li>2 = Parrot Always</li> <li>3 = Parrot Once by Command (<code>cop,21</code> enables it for one shot before automatically turning off)</li> </ul>"},{"location":"config/rpt_conf/#parrottime","title":"parrottime=","text":"<p>This option sets the amount of time in mS to delay before playing back the audio buffer.</p> <p>Sample:</p> <pre><code>parrottime = 1000                   ; Wait 1s (1000mS) before playback\n</code></pre>"},{"location":"config/rpt_conf/#phone_functions","title":"phone_functions=","text":"<p>This option allows you to override the stanza name used for the <code>phone_functions</code> stanza in <code>rpt.conf</code>. Phone functions are a specific group of commands that are available when the node is accessed via phone.</p> <p>Sample:</p> <pre><code>phone_functions = functions   ; name phone_functions to functions\n</code></pre> <p>The default is to have <code>phone_functions=</code> point to a stanza called <code>functions</code>, and have a common set of commands for all nodes. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See Phone Functions Stanza for more information on the functions that can be configured.</p>"},{"location":"config/rpt_conf/#phonelinkdefault","title":"phonelinkdefault=","text":"<p>This option sets whether telemetry is sent down phone links.</p> <p>Sample:</p> <pre><code>phonelinkdefault = 1 \n</code></pre> <p>The available options are:</p> <ul> <li>0 = telemetry output off</li> <li>1 = telemetry output on </li> <li>2 = timed telemetry output on command execution and for a short time thereafter </li> <li>3 = follow local telemetry mode</li> <li>Default is 1</li> </ul>"},{"location":"config/rpt_conf/#phonelinkdynamic","title":"phonelinkdynamic=","text":"<p>This option sets whether telemetry down phone links can be enabled/disabled by users using a COP command.</p> <p>Sample:</p> <pre><code>phonelinkdynamic = 1\n</code></pre> <p>The available options are:</p> <ul> <li>0 = disallow users to change phone telemetry setting with a COP command</li> <li>1 = Allow users to change the setting with a COP command</li> <li>Default is 1</li> </ul>"},{"location":"config/rpt_conf/#politeid","title":"politeid=","text":"<p>This option specifies the number of milliseconds prior to the end of the ID cycle where the controller will attempt to play the ID in the tail when a user unkeys. If the controller does not get a chance to send the ID in the tail, the ID will be played over the top of the next user transmission. Optional, default is 30000mS.</p> <p>Sample:</p> <pre><code>politeid = 30000   ; 30 seconds\n</code></pre>"},{"location":"config/rpt_conf/#propagate_dtmf","title":"propagate_dtmf=","text":"<p>This option takes either <code>yes</code>/<code>1</code> or <code>no</code>/<code>0</code>. When set to <code>yes</code>, DTMF will be regenerated from out-of-band signalling or from from the receiver DTMF decoder whenever a function start character is NOT detected, and command decoding has not begun. When set to <code>no</code>, no tones will be regenerated. The default for this setting is <code>no</code>.</p> <p>This setting is meant to be used in conjunction with <code>linktolink</code>, <code>inxlat</code>, and <code>outxlat</code> when interfacing a radio port to a multiport analog repeater controller on an RF-linked system.</p> <p>Sample:</p> <p><pre><code>propagate_dtmf = no\n</code></pre> Note: There is a separate setting <code>propagate_phonedtmf</code> for use by dial-in (phone and dphone) users.</p>"},{"location":"config/rpt_conf/#remotect","title":"remotect=","text":"<p>This option allows the selection of the remote linked courtesy tone so that the users can tell there is a Remote Base connected locally.</p> <p>Sample:</p> <pre><code>remotect = ct3   ; use courtesy tone 3\n</code></pre>"},{"location":"config/rpt_conf/#remote_inact_timeout","title":"remote_inact_timeout=","text":"<p>This option specifies the amount of time without keying from the link, before the link is determined to be inactive. Set to <code>0</code> to disable timeout.</p> <p>Sample:</p> <pre><code>remote_inact_timeout = 0   ; do not time out\n</code></pre> <p>This is a Remote Base option. See that section of the manual for more information.</p>"},{"location":"config/rpt_conf/#remote_timeout","title":"remote_timeout=","text":"<p>This option specifies the session time out for the remote base. Set to <code>0</code> to disable. This option does not appear to be implemented in code.</p> <p>Sample:</p> <pre><code>remote_timeout = 0   ; do not timeout\n</code></pre> <p>Default is 3600 (seconds?).</p> <p>This is a Remote Base option. See that section of the manual for more information.</p>"},{"location":"config/rpt_conf/#remote_timeout_warning","title":"remote_timeout_warning=","text":"<p>This option does not appear to be implemented in code.</p> <p>Default is 180 (seconds?).</p> <p>This is a Remote Base option. See that section of the manual for more information.</p>"},{"location":"config/rpt_conf/#remote_timeout_warning_freq","title":"remote_timeout_warning_freq=","text":"<p>This option does not appear to be implemented in code.</p> <p>Default is 30 (seconds?).</p> <p>This is a Remote Base option. See that section of the manual for more information.</p>"},{"location":"config/rpt_conf/#rxburstfreq","title":"rxburstfreq=","text":"<p>This option determines the frequency of tone that the node receiver listens for, to enable access (RX Toneburst Access, common in Europe). If RX Toneburst operation is desired, specify the frequency in Hertz of the desired tone burst. Setting to <code>0</code> (or not specifying) indicates no tone burst operation.</p> <p>Sample:</p> <p><pre><code>rxburstfreq = 1000\n</code></pre> This option does not appear in the default <code>rpt.conf</code>.</p>"},{"location":"config/rpt_conf/#rxburstthreshold","title":"rxburstthreshold=","text":"<p>Fot RX Toneburst mode, this option specifies the minimum signal to noise ratio in dB that qualifies a valid tone.</p> <p>Sample:</p> <pre><code>rxburstthreshold= 16\n</code></pre> <p>Defaults to 16 (dB).</p> <p>This option does not appear in the default <code>rpt.conf</code>.</p>"},{"location":"config/rpt_conf/#rxbursttime","title":"rxbursttime=","text":"<p>For RX Toneburst operation, specifies minimum amount of time that tone needs to be valid for recognition (in milliseconds). Defaults to 250.</p> <p>Sample:</p> <pre><code>rxbursttime= 250\n</code></pre> <p>This option does not appear in the default <code>rpt.conf</code>.</p>"},{"location":"config/rpt_conf/#rxchannel","title":"rxchannel=","text":"<p>This setting selects the type of radio interface used by the node. There must be one (and only one) <code>rxchannel</code> per node definition stanza. The selections for <code>rxchannel</code> are: </p> Value Description dahdi/pseudo No radio, used for hubs SimpleUSB/1999 SimpleUSB Channel Driver (limited DSP), specify associated node number found in simpleusb.conf Radio/1999 Usbradio Channel Driver (full DSP), specify associated node number found in usbradio.conf voter/1990 VOTER (RTCM) Channel Driver, specify associated node number found in voter.conf USRP/127.0.0.1:34001:32001 GNU Radio interface USRP <p>Sample:</p> <pre><code>rxchannel = dahdi/pseudo     ; No radio (hub)\n</code></pre> <p>NOTE: This is selecting what is known (in Asterisk terminology) the channel driver.</p> <p>NOTE: Be sure that any channel driver you use also has it's corresponding module being loaded in <code>/etc/asterisk/modules.conf</code>.</p>"},{"location":"config/rpt_conf/#rxnotch","title":"rxnotch=","text":"<p>In order to use this option, <code>app_rpt</code> must have been compiled with the <code>notch</code> option. This option will notch a particular center frequency (in Hz) for a specified bandwidth (in Hz).</p> <p>Sample:</p> <pre><code>rxnotch=1065,40                    ; Notch 1065Hz for +/-20Hz\n</code></pre> <p>NOTE: IF this option is available, it requires a great deal of CPU to perform and would probably be detrimental to use on the small boards. It isn't recommended for use.</p>"},{"location":"config/rpt_conf/#scheduler","title":"scheduler=","text":"<p>This option allows you to override the stanza name used for the <code>schedule</code> stanza in <code>rpt.conf</code>. The scheduler is used to execute commands at a particular time.</p> <p>Sample:</p> <pre><code>scheduler = schedule   ; name scheduler to 'schedule'\n\n[schedule]\n...\n</code></pre> <p>The default is to have <code>scheduler=</code> point to a stanza called <code>schedule</code>, and have a common set of commands for all nodes. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See the Schedule Stanza for more information on the scheduler.</p>"},{"location":"config/rpt_conf/#sleeptime","title":"sleeptime=","text":"<p>This option sets the inactivity period in seconds of no signal on the node's receiver before the system goes to sleep. </p> <p>Sample:</p> <pre><code>sleeptime = 300   ; go to sleep after 5 mins of no activity\n</code></pre> <p>See Sleep Mode for more information on what this timer does, and how it works.</p>"},{"location":"config/rpt_conf/#startup_macro","title":"startup_macro=","text":"<p>The <code>startup_macro</code> is executed once on system startup. Each node can have one startup macro defined in its node stanza.</p> <p>Sample:</p> <pre><code>startup_macro = *31000 *31001 *31002   ; Connect to nodes 1000, 1001 and 1002 at startup\n</code></pre> <p>One string of one or multiple commands, executed in order. </p> <p>NOTE: This string of commands does NOT terminate with a # like a normal macro. You can call any number of regular macros with it.</p>"},{"location":"config/rpt_conf/#startup_macro_delay","title":"startup_macro_delay=","text":"<p>This option causes the system to wait a specified number of seconds upon startup, before executing the <code>startup_marco</code>.</p> <p>Sample:</p> <pre><code>startup_macro_delay = 5                    ; wait 5s before running the startup_macro\n</code></pre>"},{"location":"config/rpt_conf/#statpost_program","title":"statpost_program=","text":"<p>This option sets the commands to run on the server to process usage statistics of the node. This option is generally no longer required, but is included for documentation purposes.</p> <p>Sample:</p> <pre><code>;statpost_program=/usr/bin/wget,-q,--timeout=15,--tries=1,--output-document=/dev/null\n</code></pre>"},{"location":"config/rpt_conf/#statpost_url","title":"statpost_url=","text":"<p>Uncomment this option to enable status and statistics reporting of your node to https://stats.allstarlink.org</p> <p>Sample:</p> <pre><code>;statpost_url = http://stats.allstarlink.org/uhandler ; Status updates\n</code></pre> <p>The <code>statspost_url=</code> option can be implemented in the <code>[node-main](!)</code> stanza to apply to all nodes on the server, or in the per-node stanza for limiting statistics posting to an individual nodes. See config file templating for more information.</p>"},{"location":"config/rpt_conf/#tailmessagelist","title":"tailmessagelist=","text":"<p>This option allows a comma-separated list of audio files to be specified for the tail message function. The tail messages will rotate from one to the next until the end of the list is reached, at which point the first message in the list will be selected. If no absolute path name is specified, the directory <code>var/lib/asterisk/sounds</code> will be searched for the sound file. The file extension should be omitted.</p> <p>Sample:</p> <pre><code>tailmessagelist = welcome,clubmeeting,wx   ; rotate 3 tail messages\n</code></pre> <p>Tail messages can be \"squashed\" if a user keys up over them.</p> <p>Note: ID recording files must have extension gsm,ulaw,pcm, or wav. The extension is left off when it is defined as the example shows above. File extensions are used by Asterisk to determine how to decode the file. All ID recording files should be sampled at 8KHz. See Recording Audio Files for more information.</p>"},{"location":"config/rpt_conf/#tailmessagetime","title":"tailmessagetime=","text":"<p>This option sets the amount of time in milliseconds between tail messages. Tail Messages are played when a user unkeys on the node input at the point where the hang timer expires, and after the courtesy tone is sent.</p> <p>Sample:</p> <pre><code>tailmessagetime = 900000   ; 15 minutes between tail messages\n</code></pre> <p>The maximum value is 200000000mS, 55.5555hours.</p>"},{"location":"config/rpt_conf/#tailsquashedtime","title":"tailsquashedtime=","text":"<p>If a tail message is \"squashed\" by a user keying up over the top of it, a separate time value can be loaded to make the tail message be retried at a shorter time interval than the standard <code>tailmessagetime=</code> option. The <code>tailsquashedtime=</code> option takes a value in milliseconds.</p> <p>Sample:</p> <pre><code>tailsquashedtime = 300000   ; 5 minutes\n</code></pre>"},{"location":"config/rpt_conf/#telemetry","title":"telemetry=","text":"<p>This option allows you to override the stanza name used for the <code>telemetry</code> stanza in <code>rpt.conf</code>. Telemetry definitions define courtesy tone parameters, and tones sent when certain actions take place on the node.</p> <p>Sample:</p> <pre><code>telemetry = telemetry   ; name telemetry to 'telemetry'\n\n[telemetry]\n...\n</code></pre> <p>The default is to have <code>telemetry=</code> point to a stanza called <code>telemetry</code>, and have a common set of commands for all nodes. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See the Telemetry Stanza for more information on the options that can be configured.</p>"},{"location":"config/rpt_conf/#telemdefault","title":"telemdefault=","text":"<p>This option sets whether telemetry is turned on or off by default.</p> <p>Sample:</p> <pre><code>telemdefault = 1 \n</code></pre> <p>The available options are:</p> <ul> <li>0 = telemetry output off</li> <li>1 = telemetry output on (default)</li> <li>2 = timed telemetry output on command execution and for a short time thereafter</li> <li>Default is 1</li> </ul>"},{"location":"config/rpt_conf/#telemduckdb","title":"telemduckdb=","text":"<p>This option allows adjustment of the telemetry level in dB when a local or voice transmission is in progress. Specify the level to lower the telemetry level in negative dB.</p> <p>Sample:</p> <pre><code>telemduckdb = -15                   ; Reduce telemetry by -15dB\n</code></pre>"},{"location":"config/rpt_conf/#telemdynamic","title":"telemdynamic=","text":"<p>This option sets whether telemetry can be enabled/disabled by users using a COP command.</p> <p>Sample:</p> <pre><code>telemdynamic = 1\n</code></pre> <p>The available options are:</p> <ul> <li>0 = disallow users to change the local telemetry setting with a COP command</li> <li>1 = Allow users to change the setting with a COP command</li> <li>Default is 1</li> </ul>"},{"location":"config/rpt_conf/#telemnomdb","title":"telemnomdb=","text":"<p>This option is used to fine tune the telemetry level, relative to standard node audio. The level is in dB. </p> <p>Sample:</p> <pre><code>telemnomdb = -3                     ; Decrease nominal telemetry by -3dB\n</code></pre>"},{"location":"config/rpt_conf/#tonemacro","title":"tonemacro=","text":"<p>This option allows you to override the stanza name used for the <code>tonemacro</code> stanza in <code>rpt.conf</code>. The tone macro stanza directs the node to use a particular stanza for PL tone tiggered macros from users accessing the node. Macros are DTMF shortcuts, and are a special type of function. </p> <p>Sample:</p> <pre><code>tonemacro = tonemacro   ; use stanza named tonemacro\n\n[tonemacro]\n100.0 = *81#     ; play the time if a 100.0Hz PL tone is received\n</code></pre> <p>The default is to have <code>tonemacro=</code> point to a stanza called <code>tonemacro</code>, and have a common set of commands for all nodes. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See the Tonemacro Stanza for more detail on defining tone macros.</p> <p>This option does not appear in the default <code>rpt.conf</code>.</p>"},{"location":"config/rpt_conf/#totime","title":"totime=","text":"<p>This option defines the time out timer interval for the node. The value is in milliseconds. If the node transmitter remains keyed beyond the <code>totime</code> timer length, the transmitter will be unkeyed until the receiver activity resets. </p> <p>Sample:</p> <p><pre><code>totime = 180000   ; Repeater timeout 3 minutes \n</code></pre> The default value is 180000(mS), or 3 minutes. </p> <p>NOTE: This setting can cause issues when linked to active hub nodes that may have long transmissions. If the local node transmitter appears to \"drop out\" when connected to nodes/hubs with long winded operators or broadcasts, review this setting, and increase as necessary.</p> <p>Related: COP Commands 7 and 8 and <code>controlstates</code>, and Control States Stanza.</p>"},{"location":"config/rpt_conf/#unlinkedct","title":"unlinkedct=","text":"<p>This option selects the courtesy tone to be used when the system has no remote nodes connected and is operating as a standalone repeater.</p> <p>Sample:</p> <pre><code>unlinkedct = ct2   ; use courtesy tone 2\n</code></pre>"},{"location":"config/rpt_conf/#wait-times","title":"wait-times=","text":"<p>This option allows you to override the stanza name used for the <code>wait-times</code> stanza in <code>rpt.conf</code>. Wait times are a specific group of timers for the node.</p> <p>Sample:</p> <pre><code>wait-times = wait-times   ; name wait-times to wait-times\n</code></pre> <p>The default is to have <code>wait-times=</code> point to a stanza called <code>wait-times</code>, and have a common set of commands for all nodes. However, you can have it point to another named stanza, see Settings to Name Other Stanzas for more information.</p> <p>See Wait Times Stanza for more information on the timers that can be configured.</p>"},{"location":"config/rpt_conf/#control-states-stanza","title":"Control States Stanza","text":"<p>There are several predefined nmemonics (keywords) used in the <code>[controlstates]</code> stanza to enable and disable the various features of the controller. These nmemonics correspond to the control operator command (COP) to be executed and most of these are the same groups of letters announced on air when a single control operator command is executed on the controller.</p> Nmemonic Description COP Method rptena Repeater Enable 2 rptdis Repeater Disable 3 totena Timeout Timer Enable 7 totdis Timeout Timer Disable 8 apena Autopatch Enable 9 apdis Autopatch Disable 10 lnkena Link Enable 11 lnkdis Link Disable 12 skena Scheduler Enable 15 skdis Scheduler Disable 16 ufena User Functions Enable 17 ufdis User Functions Disable 18 atena Alternate Hangtime Enable 19 atdis Alternate Hangtime Disable 20 noice No Incoming Connections Enable 49 noicd No Incoming Connections Disable 50 slpen Sleep Mode Enable 51 slpds Sleep Mode Disable 52"},{"location":"config/rpt_conf/#functions-stanza","title":"Functions Stanza","text":"<p>The <code>[functions]</code> stanza is a named stanza pointed to by the <code>functions=</code> option. Functions within this stanza are used to decode DTMF commands when accessing the node from its receiver. This stanza is typically named <code>[functions]</code>. The name can be overridden, on a per-node basis, see Settings to Name Other Stanzas for more information.  </p> <p>Sample:</p> <pre><code>functions = functions   ; name the functions stanza functions\n\n[functions]\n...\n</code></pre> <p>See DTMF Commands for the list of functions available.</p>"},{"location":"config/rpt_conf/#function-classes","title":"Function Classes","text":"<p>Function classes are names for categories of functions. There are several function classes defined. They are described in the table below:</p> Class Description cop Control operator commands ilink Internet linking commands status User status commands autopatchup Autopatch up commands autopatchdn Autopatch down commands remote Remote base commands macro Command macros <p>Most of the above command classes require a <code>function method</code> and possibly one or more additional <code>function option</code> parameters. Function methods are discussed next.</p>"},{"location":"config/rpt_conf/#function-methods","title":"Function Methods","text":"<p>Function methods are numbers which identify a specific function to execute within a <code>function class</code>. Function methods may be optional and in some cases should be omitted (such as with the autopatchup method). A complete and up-to-date description of all <code>function methods</code> can be found in the <code>app_rpt.c</code>  source file. Some <code>function methods</code> are shown below as an example below:</p> Method Description 1 Force ID (global) 2 Give Time of Day (global) 3 Give software Version (global) 4 Give GPS location info 5 Speak the last (dtmf) user 11 Force ID (local only) 12 Give Time of Day (local only)"},{"location":"config/rpt_conf/#function-options","title":"Function Options","text":"<p>Some <code>function methods</code> can take <code>function options</code>. These are specified after the <code>function method</code>, separated with commas. Not all commands require or take <code>function options</code>. An example of a method which can accept <code>function options</code> is the <code>autopatchup</code> method.</p>"},{"location":"config/rpt_conf/#putting-it-all-together","title":"Putting it all Together","text":"<p>A small excerpt from the function stanza of <code>rpt.conf</code> is shown below.</p> <pre><code> [functions]\n 1=ilink,1                                               ; Specific link disconnect\n 6=autopatchup,noct=1,farenddisconnect=1,dialtime=2000   ; Autopatch up\n</code></pre> <p>The above example contains DTMF functions with all of the parameters discussed on previously.</p> <p>In the above example:</p> <ul> <li>*1 followed by a node number disconnects a specific link, recall that * is the default <code>funcchar</code>. The <code>function class</code> is <code>ilink</code> and the <code>function method</code> is <code>1</code></li> <li>*6 followed by a phone number brings up the autopatch with the <code>function options</code> specified. Note that there is no <code>function method</code> defined, but there are <code>function options</code> present.</li> </ul>"},{"location":"config/rpt_conf/#link-functions-stanza","title":"Link Functions Stanza","text":"<p>The <code>[my_link_functions]</code> stanza, if defined (see below), is a named stanza pointed to by the <code>link_functions</code> option. Functions within this stanza are used decode DTMF commands when accessing the node via a link from another node. </p> <p>The traditional usage is to point the <code>link_functions=</code> option to the same stanza as named by <code>functions=</code>, thereby having functions from a linked node and from the local node be the same.</p> <p>Sample:</p> <pre><code>functions = functions        ; name the functions stanza functions\nlink_functions = functions   ; use the same stanza \n\n[functions]\n...\n</code></pre> <p>If a different set of either limited or more capable functions is desired:</p> <pre><code>functions = functions                ; name the functions stanza functions\nlink_functions = my_link_functions   ; use a different stanza\n\n[functions]\n...\n\n[my_link_functions]\n...\n</code></pre> <p>See DTMF Commands for the list of functions available.</p>"},{"location":"config/rpt_conf/#macro-stanza","title":"Macro Stanza","text":"<p>The <code>[macro]</code> stanza is a named stanza pointed to by the <code>macro=</code> option. Macros are DTMF shortcuts. </p> <p>Sample:</p> <pre><code>macro=macro   ; use stanza named macros\n\n[macro]\n1 = *32000*32001     ; connect to nodes 2000 and 2001\n</code></pre> <p>See the Macro page for more information on macros.</p>"},{"location":"config/rpt_conf/#morse-stanza","title":"Morse Stanza","text":"<p>The <code>[morse]</code> stanza is a named stanza pointed to by the `morse= option.</p> <p>Sample:</p> <p><pre><code>[morse]\nspeed = 20            ; Approximate speed in WPM\nfrequency = 900       ; Morse Telemetry Frequency in Hz\namplitude = 4096      ; Morse Telemetry Amplitude (relative level)\nidfrequency = 746     ; Morse ID Frequency in Hz\nidamplitude = 768     ; Morse ID Amplitude (relative level)\n</code></pre> Note that <code>frequency</code> and <code>amplitude</code> would set the parameters for telemetry messages, whereas <code>idfrequency</code> and <code>idamplitude</code> would set the parameters specifically for identification (and they do not need to be the same).</p>"},{"location":"config/rpt_conf/#nodes-stanza","title":"Nodes Stanza","text":"<p>The <code>[nodes]</code> stanza is a list of nodes, their IP addresses, port and \"NONE\" or \"NO\" for non-remote base (normal) nodes. The nodes stanza is used to identify which node is mapped to which Internet call and to determine the destination to send the call to. </p> <p>If you are using automatic update for AllStarLink (public) nodes, no Allstar link nodes should be defined here. Only place a definition for your local nodes (on your local LAN behind the same NAT router), private (off of AllStarLink) nodes, and remote base nodes here.</p> <p>Sample:</p> <pre><code>[nodes]\n1000 = radio@127.0.0.1/1000,NONE               ; Private hub on this server \n1001 = radio@host.domain.com/1001,NONE         ; Private node on another server\n2501 = radio@127.0.0.1/2501,NONE               ; Public node on this server\n2502 = radio@127.0.0.1/2502,NONE               ; Another public node on this server\n2503 = radio@192.168.1.20:4570/2503,NONE       ; Public node behind the same NAT router\n1998 = radio@127.0.0.1/1999,Y                  ; Remote base node on this server\n</code></pre> <p>For remote base nodes, replace the \"NONE\" with \"Y\" or \"YES\". Once designated as a remote base, that node will only allow one connection (link) for use, command, and control.</p> <p>The <code>[nodes]</code> stanza performs a function similar to an OS hosts file. When looking up node information, <code>app_rpt</code> looks in the <code>[nodes]</code> stanza first then searches (what could be called the Allstar DNS) the <code>/var/lib/asterisk/rpt_extnodes</code> file.</p>"},{"location":"config/rpt_conf/#phone-functions-stanza","title":"Phone Functions Stanza","text":"<p>The <code>[my_phone_functions]</code> stanza is a named stanza pointed to by the <code>phone_functions=</code> option. Functions within this stanza are used decode DTMF commands when accessing the node from a telephone. </p> <p>The traditional usage is to point <code>phone_functions=</code> to the same stanza as named by <code>functions=</code>, thereby having functions from a phone and from the local node be the same. </p> <p>Sample:</p> <pre><code>functions = functions         ; name the functions stanza functions\nphone_functions = functions   ; use the same stanza \n\n[functions]\n...\n</code></pre> <p>If a different set of either limited or more capable functions is desired:</p> <pre><code>functions = functions                  ; name the functions stanza functions\nphone_functions = my_phone_functions   ; use a different stanza\n\n[functions]\n...\n\n[my_phone_functions]\n...\n</code></pre> <p>See DTMF Commands for the list of functions available.</p>"},{"location":"config/rpt_conf/#schedule-stanza","title":"Schedule Stanza","text":"<p>This stanza is named by the <code>scheduler=</code> option. The scheduler can execute macros at certain times. For example for a net on Tuesday nights at 8 PM.</p> <p>Sample:</p> <pre><code>scheduler=schedule   ; name the stanza 'schedule'\n\n[schedule]                                                                      \n;dtmf_function =  m h dom mon dow  ; ala cron, star is implied                                                  \n2 = 00 00 * * *   ; at midnight every day, execute macro 2.\n</code></pre> <p>See https://wiki.allstarlink.org/wiki/Scheduler_(ASL_System) for more details.</p>"},{"location":"config/rpt_conf/#telemetry-stanza","title":"Telemetry Stanza","text":"<p>This stanza is named by the [<code>telemetry=</code>] option. Telemetry entries can be shared across all nodes on the <code>Asterisk/app_rpt</code> server, or defined for each node. They can be a tone sequence, morse string, or a file as follows:</p> <ul> <li>|t - Tone escape sequence:</li> <li>Tone sequences consist of 1 or more 4-tuple entries (freq1, freq2, duration, amplitude). Single frequencies are created by setting freq1 or freq2 to zero.</li> <li>|m - Morse escape sequence:</li> <li>Sends Morse code at the telemetry amplitude and telemetry frequency as defined in the <code>[morse]</code> section. Follow with an alphanumeric string.</li> <li>|i - Morse ID escape sequence:</li> <li>Sends Morse code at the ID amplitude and ID frequency as defined in the <code>[morse]</code> section. Follow with an alphanumeric string.</li> <li>Path to sound file:</li> <li>Specify the path to a sound file on the server. Do not include file extension.</li> </ul> <p>Sample:</p> <pre><code>[telemetry]\nct1=|t(350,0,100,2048)(500,0,100,2048)(660,0,100,2048)\nct2=|t(660,880,150,2048)  \nct3=|t(440,0,150,4096) \nct4=|t(550,0,150,2048)\nct4=|t(2475,0,250,768)\nct5=|t(660,0,150,2048)\nct6=|t(880,0,150,2048)\nct7=|t(660,440,150,2048)\nct8=|t(700,1100,150,2048)\nct9=filename-without-extension\n\n;remotetx=|t(1633,0,50,3000)(0,0,80,0)(1209,0,50,3000)\nremotetx=|t(880,0,150,2048) \nremotemon=|t(1209,0,50,2048) \ncmdmode=|t(900,903,200,2048)\nfunctcomplete=|t(1000,0,100,2048)(0,0,100,0)(1000,0,100,2048)\npatchup=rpt/callproceeding\npatchdown=rpt/callterminated\n\nWhat the numbers mean,\n (000,000,010,000)\n   |   |   |   |-------amplitude\n   |   |   |-------------duration\n   |   |-------------------Tone 2\n   |-------------------------Tone 1\n</code></pre>"},{"location":"config/rpt_conf/#tonemacro-stanza","title":"Tonemacro Stanza","text":"<p>The <code>[tonemacro]</code> stanza is a named stanza pointed to by the <code>tonemacro=</code> option. Tonemacros are macros that are executed upon receipt of a specific PL tone.</p> <p>Sample:</p> <pre><code>tonemacro = tonemacro;     user stanza named tonemacro\n\n[tonemacro]\n\n100.0=*671\n</code></pre> <p>Format: <code>PL Tone = macro to execute</code>.</p> <p>See [Full Tonemacro Use and Format] (https://wiki.allstarlink.org/wiki/Tonemacro_use_and_format) for more information on tone macros.</p>"},{"location":"config/rpt_conf/#wait-times-stanza","title":"Wait Times Stanza","text":"<p>This stanza is named by the <code>wait-times=</code> option. The wait time stanza is used to set delay time between various node actions and their response. Values are in milliseconds.</p> <p>Sample:</p> <pre><code>wait-times = wait-times   ; name the stanza wait-times\n\n[wait-times]                                                                                                 \ntelemwait = 600                    ; Time to wait before sending most\nidwait = 600                       ; Time to wait before starting ID\nunkeywait = 800                    ; Time to wait after unkey before sending CT's and link telemetry\ncalltermwait = 2000                ; Time to wait before announcing \"call terminated\"\n</code></pre>"},{"location":"developers/","title":"Developer Guide","text":"<p>The pages in this section are geared towards ASL3 developers. </p> <p>It contains information on how packages/releases are built and managed from the GitHub Repository, as well as information on building ASL3 from source.</p>"},{"location":"developers/aptly/","title":"AllStarLink Apt Repos","text":"<p>AllStarLink's primary installation method is through the use of Debian packages and the Apt deployment system.</p>"},{"location":"developers/aptly/#repository-structure","title":"Repository Structure","text":"<p>The repository is located at <code>https://repo.allstarlink.org/public</code> and is managed using Aptly. The Aptly structure is a multi-local-repo system that is coalesced into a single public repository with multiple components per distribution.</p> <p>There are three main local repositories:</p> <ul> <li> <p>asl3-prod - Packages for production-quality use</p> </li> <li> <p>asl3-beta - Packages that are ready for general testing and are expected to be promoted to asl3-prod</p> </li> <li> <p>asl3-devel - Development quality packages that are for development testing only. While these packages are available to the general user, use of this component in extremely discouraged without a developer's guidance</p> </li> </ul> <p>Each repository contains one or more distributions. Currently the only distribution supported is <code>bookworm</code> for Debian 12.</p> <p>Each repository has a default component name that, when published together, form the basis of the labeling scheme of promotion of packages from devel -&gt; beta -&gt; prod. The component mapping is:</p> <ul> <li>asl3-prod = main</li> <li>asl3-beta = beta</li> <li>asl3-devel = devel</li> </ul> <p>All local repositories are merged and published into a single public-facing repository. This is usable by one of the following <code>.list</code> configurations in<code>/etc/apt/sources.list.d</code>:</p> <pre><code># Primary AllStarLink Repo for Production Packages\ndeb [signed-by=/etc/apt/keyrings/allstarlink.gpg] https://repo.allstarlink.org/public bookworm main\n\n# Include Beta Component for Testing\ndeb [signed-by=/etc/apt/keyrings/allstarlink.gpg]  https://repo.allstarlink.org/public bookworm main beta\n\n# Include Beta and Devel component for Development\ndeb [signed-by=/etc/apt/keyrings/allstarlink.gpg]  https://repo.allstarlink.org/public bookworm main beta devel\n</code></pre> <p>All packages in the repository are signed by GPG and the key is provided with repository installation <code>.deb</code> file.</p>"},{"location":"developers/aptly/#aptly-github-runner-integrations","title":"Aptly + GitHub Runner Integrations","text":"<p>ASL3-related GitHub repositories are integrated with the Aptly repository and running the \"Make and Publish Pkgs\" Action from each project will result in .deb files being compiled and stored in Aptly. Currently, it's possible to build files directly into the <code>devel</code> and <code>beta</code> components but not <code>prod</code>. Moving packages into <code>prod</code> currently requires administrator intervention. This will be changed at some future date.</p>"},{"location":"developers/aptly/#aptly-cli","title":"Aptly CLI","text":"<p>It is possible to run Aptly commands from the shell on <code>repo.allstarlink.org</code> in addition to using the web-based API.</p>"},{"location":"developers/aptly/#setup","title":"Setup","text":"<p>All commands to Aptly must be run as the <code>aptly</code> user. To do this, each account on the repository server should be member of the <code>sudo</code> and <code>aptly</code> UNIX groups.</p> <p>Before issuing any Aptly commands run the following:</p> <pre><code>alias aptly=\"sudo -u aptly -- aptly\"\n</code></pre> <p>to ensure that all commands are run as the <code>aptly</code> user.</p>"},{"location":"developers/aptly/#adding-a-file-to-a-local-repo","title":"Adding a File to a Local Repo","text":"<p>Adding a file to the local repo is straight-forward:</p> <pre><code>aptly repo add REPO FILE-or-DIR\n</code></pre> <p>For example, to add the latest Allmon3 to the production repository:</p> <pre><code>$ aptly repo add asl3-prod allmon3_1.2.1-2_all.deb\nLoading packages...\n[+] allmon3_1.2.1-2_all added\n</code></pre>"},{"location":"developers/aptly/#publishing-repositories","title":"Publishing Repositories","text":"<p>Coalescing and publishing the public repository with all components is:</p> <pre><code>aptly publish update bookworm\n</code></pre> <p>When other distributions are supported, replace <code>bookworm</code> with the appropriate distribution. Upon execution, a prompt will appear for the GPG signing key for the repository. Provide it.</p> <p>And example, successful publication looks like:</p> <pre><code>$ aptly publish update bookworm\nLoading packages...\nGenerating metadata files and linking package files...\nFinalizing metadata files...\nSigning file 'Release' with gpg, please enter your passphrase when prompted:\nClearsigning file 'Release' with gpg, please enter your passphrase when prompted:\nCleaning up prefix \".\" components beta, devel, main...\n\nPublish for local repo ./bookworm [all, amd64, arm64, armhf] publishes {beta: [asl3-beta]}, {devel: [asl3-devel]}, {main: [asl3-prod]} has been successfully updated.\n</code></pre>"},{"location":"developers/aptly/#searching-for-packages","title":"Searching for Packages","text":"<p>Listing and searching for packages inside of a local repo is done with the <code>aptly repo search</code> command and uses the Aptly Package Query Language to filter/select packages.</p> <p>A simple <code>aptly repo search REPO</code> will show all packages. For example:</p> <pre><code>$ aptly repo search asl3-prod\nallmon3_1.2.1-2_all\nasl-apt-repos_1.3-1.deb12_all\nasl3_3.0.0-1.deb_all\n[...]\n</code></pre>"},{"location":"developers/aptly/#search-by-name","title":"Search by name","text":"<pre><code>$ aptly repo search asl3-prod 'Name (asl3)'\nasl3_3.0.0-1.deb_all\n</code></pre>"},{"location":"developers/aptly/#search-by-name-glob-version","title":"Search by name glob + version","text":"<pre><code>$ aptly repo search asl3-prod 'Name (~ asl3-asterisk*), Version (2:20.7.0+asl3-1.0-5.deb12)'\nasl3-asterisk_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-config_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-dev_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-doc_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-modules_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-modules-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-tests_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-tests-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64\n</code></pre>"},{"location":"developers/aptly/#search-by-name-glob-version-range","title":"Search by name glob + version range","text":"<pre><code>$ aptly repo search asl3-prod 'Name (~ asl3-asterisk*), Version (&gt;= 1.0)'\nasl3-asterisk_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-config_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-dev_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-doc_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-modules_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-modules-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-tests_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-tests-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64\n</code></pre>"},{"location":"developers/aptly/#promoting-packages-to-prod","title":"Promoting Packages to Prod","text":"<p>Using the hypothetical example of promoting asl3-asterisk packages from beta to production.</p> <ol> <li> <p>Test package selection using <code>aptly repo search</code></p> <pre><code>$ $ aptly repo search asl3-beta 'Name (~ asl3-asterisk*), Version (2:20.7.0+asl3-1.0-5.deb12)'\nasl3-asterisk_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk_2:20.7.0+asl3-1.0-5.deb12_arm64\nasl3-asterisk-config_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-dbgsym_2:20.7.0+asl3-1.0-5.deb12_arm64\nasl3-asterisk-dev_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-doc_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-modules_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-modules_2:20.7.0+asl3-1.0-5.deb12_arm64\nasl3-asterisk-modules-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-modules-dbgsym_2:20.7.0+asl3-1.0-5.deb12_arm64\nasl3-asterisk-tests_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-tests_2:20.7.0+asl3-1.0-5.deb12_arm64\nasl3-asterisk-tests-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64\nasl3-asterisk-tests-dbgsym_2:20.7.0+asl3-1.0-5.deb12_arm64\n</code></pre> </li> <li> <p>Move the packages into the production repository using <code>aptly repo move</code></p> <pre><code>$ aptly repo move asl3-beta asl3-prod 'Name (~ asl3-asterisk*), Version (2:20.7.0+asl3-1.0-5.deb12)'\nLoading packages...\n[o] asl3-asterisk-dbgsym_2:20.7.0+asl3-1.0-5.deb12_arm64 moved\n[o] asl3-asterisk-doc_2:20.7.0+asl3-1.0-5.deb12_all moved\n[o] asl3-asterisk-tests_2:20.7.0+asl3-1.0-5.deb12_amd64 moved\n[o] asl3-asterisk-modules_2:20.7.0+asl3-1.0-5.deb12_arm64 moved\n[o] asl3-asterisk-modules-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64 moved\n[o] asl3-asterisk-tests_2:20.7.0+asl3-1.0-5.deb12_arm64 moved\n[o] asl3-asterisk-tests-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64 moved\n[o] asl3-asterisk-modules_2:20.7.0+asl3-1.0-5.deb12_amd64 moved\n[o] asl3-asterisk-dbgsym_2:20.7.0+asl3-1.0-5.deb12_amd64 moved\n[o] asl3-asterisk-dev_2:20.7.0+asl3-1.0-5.deb12_all moved\n[o] asl3-asterisk_2:20.7.0+asl3-1.0-5.deb12_arm64 moved\n[o] asl3-asterisk-modules-dbgsym_2:20.7.0+asl3-1.0-5.deb12_arm64 moved\n[o] asl3-asterisk-config_2:20.7.0+asl3-1.0-5.deb12_all moved\n[o] asl3-asterisk-tests-dbgsym_2:20.7.0+asl3-1.0-5.deb12_arm64 moved\n[o] asl3-asterisk_2:20.7.0+asl3-1.0-5.deb12_amd64 moved\n</code></pre> </li> <li> <p>Update the repository publication</p> <pre><code>$ aptly publish update bookworm\nLoading packages...\nGenerating metadata files and linking package files...\nFinalizing metadata files...\nSigning file 'Release' with gpg, please enter your passphrase when prompted:\nClearsigning file 'Release' with gpg, please enter your passphrase when prompted:\nCleaning up prefix \".\" components beta, devel, main...\n\nPublish for local repo ./bookworm [all, amd64, arm64, armhf] publishes {beta: [asl3-beta]}, {devel: [asl3-devel]}, {main: [asl3-prod]} has been successfully updated.\n</code></pre> </li> </ol>"},{"location":"developers/aptly/#note-on-all-architecture-packages","title":"Note on 'all' Architecture Packages","text":"<p>The architecture <code>all</code> denotes that the package contains no binary compiled code and runs on any architecture. This is meaningful when handling asl3-asterisk packages for multiple architectures. Within the same version and release only one copy of the <code>all</code> packages needs to and CAN exist in the repository. The GitHub Runner builder will delete the <code>all</code> packages for the <code>arm64</code> build since the <code>arm64</code> and <code>amd64</code> builds should occur simultaneously.</p> <p>To delete an extra set of <code>all</code> packages that may have ended up in the repository:</p> <pre><code>$ aptly repo search asl3-beta 'Name (~ asl3-asterisk*), Version (2:20.7.0+asl3-1.0-5.deb12), Architecture (all)'\nasl3-asterisk-config_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-dev_2:20.7.0+asl3-1.0-5.deb12_all\nasl3-asterisk-doc_2:20.7.0+asl3-1.0-5.deb12_all\n\n$ aptly repo remove asl3-beta 'Name (~ asl3-asterisk*), Version (2:20.7.0+asl3-1.0-5.deb12), Architecture (all)'\nLoading packages...\n[-] asl3-asterisk-config_2:20.7.0+asl3-1.0-5.deb12_all removed\n[-] asl3-asterisk-doc_2:20.7.0+asl3-1.0-5.deb12_all removed\n[-] asl3-asterisk-dev_2:20.7.0+asl3-1.0-5.deb12_all removed\n</code></pre>"},{"location":"developers/package-builds/","title":"Building ASL3-Asterisk","text":""},{"location":"developers/package-builds/#building-deb-files","title":"Building .deb Files","text":"<p>These directions outline how to create the <code>.deb</code> files via GitHub using the Action workflows and the ASL custom runner AMIs in AWS.</p> <p>Kicking off the build processes requires knowledge of all of the topics below before starting it.</p>"},{"location":"developers/package-builds/#package-version-format","title":"Package version format","text":"<p>All packages created by this repo have the following version format based on <code>deb-version(7)</code> manpage explanation.</p> <pre><code> ${EPOCH}:${ASTERISK_VERSION}+asl3-${RPT_VERSION}-${PACKAGE_VERSION}\n\n|----+---|--------+--------------------------X-----+--------X\n     |            |                                |\n     |            +-- \"upstream-version\"           |\n     |                                             |\n     +-- \"epoch\"               \"debian-revision\" --+\n</code></pre> <p>The values are defined as follows:</p> <ul> <li> <p><code>EPOCH</code> - By Debian Asterisk convention this is hardcoded as \"2\"</p> </li> <li> <p><code>ASTERISK_VERSION</code> - The Asterisk LTS version to use for these packages - e.g. 20.8.1</p> </li> <li> <p><code>RPT_VERSION</code> - The <code>app_rpt</code> version to use for these packages. This should be based on the tag of the release of app_rpt applied to that repository that is driven  by the major, minor, and patch versions listed in <code>app_rpt.h</code></p> </li> <li> <p><code>PACKAGE_VERSION</code> - The ASL3 project release version of the package build. Usually \"1\" unless there was a problem specifically with package building that caused a new .deb publication needed. In general, this is only incremented if <code>ASTERISK_VERSION</code> and <code>RPT_VERSION</code> aren't changing but something needed to be changed in the <code>debian/</code> build directory</p> </li> </ul> <p>A file generated from this repo using the versioning format above will be named, for example <code>asl3-asterisk-20.8.1+asl3-3.0.0-1</code>. Note that the epoch does not appear in the filename by Debian convention.</p>"},{"location":"developers/package-builds/#determining-asterisk-version","title":"Determining Asterisk Version","text":"<p>Currently, this is structured to be built against Asterisk 20 Long Term Servicing (LTS). Do not use any version of Asterisk that is not the latest version of Asterisk 20 LTS.</p> <p>The version is listed at Download Asterisk. The version of Asterisk entered in the Actions launcher will cause the proper version of Asterisk 20 LTS to be downloaded and folded into the builder.</p>"},{"location":"developers/package-builds/#locking-in-and-determining-the-app_rpt-version","title":"Locking In and Determining the app_rpt Version","text":"<p>When a build of <code>.deb</code> files is initiated, the <code>app_rpt</code> repo must be tagged prior to initiating the build process. The tag version should be in the format <code>MAJOR.MINOR.PATCH</code> as found in <code>app_rpt.h</code>.</p>"},{"location":"developers/package-builds/#determining-the-package-version","title":"Determining the Package Version","text":"<p>This should be a monotonically increasing integer starting with \"1\", reflecting a change in Asterisk Version + <code>app_rpt</code>. For example, if building Asterisk 20.8.1 with <code>app_rpt v3.0.0</code>, then the first build of a package should be \"1\", the second \"2\", and so on.</p> <p>However, if from the above example, <code>app_rpt</code> is now v3.1.0 or Asterisk becomes 20.9.0 then the package version should reset back to \"1\" and start over.</p>"},{"location":"developers/package-builds/#create-a-github-release","title":"Create a GitHub Release","text":"<p>Create a Release to store the <code>.deb</code> files in. The name of the release should follow the format:</p> <pre><code>ASTERISK_VERSION_asl3-RPT_VERSION-PACKAGE_VERSION\n</code></pre> <p>For the above example of Asterisk \"20.7.0\", <code>app_rpt</code> \"1.2\", and package version \"1\" the release tag and name would be:</p> <pre><code>20.7.0_asl3-1.2-1\n</code></pre> <p>NOTE: GitHub acts oddly about + signs in the tags and release names so it's converted to an underscore.</p>"},{"location":"developers/package-builds/#executing-the-github-action-to-build-packages","title":"Executing the GitHub Action to Build Packages","text":"<p>The following steps build the Debian packages:</p> <ul> <li> <p>Navigate to the GitHub repository Actions tab</p> </li> <li> <p>Under All workflows -&gt; Workflows click on <code>Make and Publish Pkgs</code></p> </li> <li> <p>To the right of the label This workflow has a workflow_dispatch event trigger click on Run workflow</p> </li> <li> <p>In the dropdown, enter the following information:</p> <ul> <li> <p>Asterisk LTS Version Base - This is the Asterisk version determined above</p> </li> <li> <p><code>app_rpt</code> Version Tag - This is the <code>app_rpt</code> version determined above</p> </li> <li> <p>Package Revision - This is the Package Version determined above</p> </li> <li> <p>Platform Architecture - Choose <code>amd64</code> or <code>arm64</code> as appropriate</p> </li> <li> <p>Debian Release Version - Choose the Debian release version to build. Note that currently the releases in GitHub do not support multiple Debian releases in the same GitHub release. This is a ToDo item (#17)</p> </li> <li> <p>Github Release Tag - This is tag release created above in Create a GitHub Release</p> </li> <li> <p>For now, leave Aptly Repository Stream and Commit Versioning at their default values</p> </li> </ul> </li> <li> <p>Click Run Workflow</p> </li> <li> <p>After a moment, a new running workflow will appear (yellow circle with a darker circling swoosh). This can be monitored for process. If the process succeeds with a green checkbox, the <code>.deb</code> files should appear in the Release. If not, there are problems that need to be diagnosed and resolved.</p> </li> </ul> <p>NOTE: As noted above, you will choose the platform architecture when starting a workflow. All workflows will create the architecture specific packages. The <code>amd64</code> workflow also creates the architecture independent (<code>all</code>) packages.  What does this mean?  If you only want <code>amd64</code> packages then you would only need to run the single workflow. But, if you want packages for an alternate architecture (e.g. <code>arm64</code>) then will need to run a workflow for that architecture AND one for the <code>amd64</code> architecture.</p>"},{"location":"developers/source-install/","title":"Source-Based Installation","text":"<p>Software developers or users who want to make changes to ASL3 or those who want/need to install ASL3 on unsupported hardware or operating systems will need to install ASL3 from the source code.</p> <p>Doing so will require you to download, compile, and install multiple projects.</p> <p>You will also need to be very comfortable using various development tools and the Linux CLI.</p>"},{"location":"developers/source-install/#where-to-get-the-asl3-source-code","title":"Where to get the ASL3 source code","text":"<p>All of the source code for ASL3 can be found in the GitHub AllStarLink repositories. The repositories include (but are not limited to):</p> Repository Description ASL3 Top-level app_rpt AllStarLink additions to Asterisk asl3-asterisk Build environment for the .deb packages of Asterisk LTS + ASL3/app_rpt asl3-menu The ASL3 menu system (asl-menu, node-setup, etc) Allmon3 Web-based monitoring and management for the AllStarLink application"},{"location":"developers/source-install/#asterisk-app_rpt","title":"Asterisk + <code>app_rpt</code>","text":"<p>Details on building Asterisk + <code>app_rpt</code> can be found in the \"docs\" directory of the GitHub asl3-asterisk repository.</p> <p>Please note that the instructions are ONLY for building Asterisk with ASL's <code>app_rpt</code>.</p> <p>The instructions does not include any helpers, <code>Allmon3</code>, <code>asl3-menu</code>, <code>asl3-nodelist</code>, etc.</p> <p>The \"docs\" directory has two sets of instructions:</p> <ul> <li>The \"build-asl3\" instructions focus is on building Asterisk + <code>ASL3/app_rpt</code> and creating our Debian packages</li> <li>The \"build-phreaknet\" instructions (and the <code>phreaknet.sh</code> script) targets those more interested in Asterisk installations with <code>app_rpt</code></li> </ul>"},{"location":"mans/","title":"Man Pages","text":"<p>This section of the manual contains the Manual Pages with detailed information for the utilities included with with ASL3.</p> <p>The Manual Pages for each utility describe what the utility does, the available options it supports, and sample usage.</p> <p>Manual Pages are also installed on your Linux system when the utility is installed. You can view the built-in Linux <code>man</code> pages facility to get help on these utilities from the Linux CLI.</p> <p>Example:</p> <pre><code>man asl-find-sound\n</code></pre>"},{"location":"mans/allmon3-passwd/","title":"allmon3-passwd","text":""},{"location":"mans/allmon3-passwd/#name","title":"NAME","text":"<p><code>allmon3-passwd</code> - Manage the <code>Allmon3</code> password file</p>"},{"location":"mans/allmon3-passwd/#synopsis","title":"SYNOPSIS","text":"<p>usage: <code>allmon3-passwd [-h|--help] [--delete] [--debug] [--file FILE] [--version] &lt;user&gt;</code></p> <p>Positional arguments:</p> <p>&lt;user&gt;: username to create/modify</p> <p>Optional arguments:</p> <p>-h, --help: show help message and exit</p> <p>--delete: delete the user specified by <code>&lt;user&gt;</code></p> <p>--debug: enable debug-level logging output</p> <p>--file FILE: alternate file to edit; default <code>/etc/allmon3/users</code></p> <p>--version: print the the version of the software</p>"},{"location":"mans/allmon3-passwd/#description","title":"DESCRIPTION","text":"<p>Allmon3's user database is managed by <code>allmon3-passwd</code>. Adding a new user or editing an existing user is the same command. If the user does not exist, it will be added. If the user does exist, the password will be updated.</p> <p>To add or edit a user's password:</p> <pre><code>allmon3-passwd allmon3\n Enter the password for allmon3: password\n Confirm the password for allmon3: password\n</code></pre> <p>The <code>/etc/allmon3/users</code> file is readable to see that the Argon2 hash has changed for the user.</p> <p>To delete a user, add the <code>--delete</code> flag to the command:</p> <pre><code>allmon3-passwd --delete allmon3\n</code></pre>"},{"location":"mans/allmon3-passwd/#bugs","title":"BUGS","text":"<p>Report bugs to https://github.com/AllStarLink/Allmon3/issues</p>"},{"location":"mans/allmon3-passwd/#copyright","title":"COPYRIGHT","text":"<p>Copyright (C) 2025 Jason McCormick and AllStarLink under the terms of the AGPL v3.</p>"},{"location":"mans/asl-find-sound/","title":"asl-find-sound","text":""},{"location":"mans/asl-find-sound/#name","title":"NAME","text":"<p><code>asl-find-sound</code> - Display <code>app_rpt</code>-compatible sound devices</p>"},{"location":"mans/asl-find-sound/#synopsis","title":"SYNOPSIS","text":"<p>usage: <code>asl-find-sound</code></p>"},{"location":"mans/asl-find-sound/#description","title":"DESCRIPTION","text":"<p>asl-find-sound - Display <code>app_rpt</code>-compatible sound devices</p>"},{"location":"mans/asl-find-sound/#bugs","title":"BUGS","text":"<p>Report bugs to https://github.com/AllStarLink/ASL3/issues</p>"},{"location":"mans/asl-find-sound/#copyright","title":"COPYRIGHT","text":"<p>Copyright (C) 2025 Jason McCormick and AllStarLink under the terms of the AGPL v3.</p>"},{"location":"mans/asl-node-lookup/","title":"asl-node-lookup","text":""},{"location":"mans/asl-node-lookup/#name","title":"NAME","text":"<p><code>asl-node-lookup</code> - Display AllStarLink node information</p>"},{"location":"mans/asl-node-lookup/#synopsis","title":"SYNOPSIS","text":"<p>usage: <code>asl-node-lookup [--help] [--verbose] [--ns &lt;name-server&gt;] &lt;node#&gt;</code></p> <p>Required arguments:</p> <p>&lt;node#&gt;: ASL node number to query</p> <p>Optional arguments:</p> <p>--help: show help</p> <p>--verbose: report additional information including the DNS \"SOA\" and \"NS\" records</p> <p>--ns: issue DNS queries to the specified name server</p> <p>NOTE: This command will also report <code>Asterisk/rpt</code> node lookup results if executed as <code>root</code> (or <code>asterisk</code>).</p>"},{"location":"mans/asl-node-lookup/#description","title":"DESCRIPTION","text":"<p>asl-node-lookup - Display AllStarLink node information</p>"},{"location":"mans/asl-node-lookup/#bugs","title":"BUGS","text":"<p>Report bugs to https://github.com/AllStarLink/ASL3/issues</p>"},{"location":"mans/asl-node-lookup/#copyright","title":"COPYRIGHT","text":"<p>Copyright (C) 2025 Allan Nathanson and AllStarLink under the terms of the AGPL v3.</p>"},{"location":"mans/asl-play-arn/","title":"asl-play-arn","text":""},{"location":"mans/asl-play-arn/#name","title":"NAME","text":"<p><code>asl-play-arn</code> - Play Amateur Radio Newsline</p>"},{"location":"mans/asl-play-arn/#synopsis","title":"SYNOPSIS","text":"<p>usage: <code>asl-play-arn [-h] --node [ --when WHEN ] [ --debug ]</code></p> <p>Optional arguments:</p> <p>-h, --help: show this help message and exit</p> <p>--node NODE: Allstar Node # to play audio</p> <p>--when WHEN: when to play in 24 hour format NNNN - not specifying <code>--when</code> will result in the audio playing immediately</p> <p>--debug: enable debug-level logging in <code>syslog</code></p>"},{"location":"mans/asl-play-arn/#description","title":"DESCRIPTION","text":"<p>Basic use is either immediately from the command line:</p> <pre><code>allstar-play-arn --node 1999\n</code></pre> <p>Depending on the processing speed of the device and Internet connectivity, the start of playback may take a significant time. If the desire is for precision on the start time, use the <code>--when</code> command and execute <code>allstar-play-arn</code> a few minutes before the desired start time.</p> <p>The script is silent except on errors like all good Unix utilities. Some useful troubleshooting may be done with the <code>--debug</code> option if an error is not revealing.</p>"},{"location":"mans/asl-play-arn/#sceheduling-the-playback","title":"Sceheduling the Playback","text":"<p>The best way to schedule the playback is as follows as the root user.</p> <ol> <li> <p><code>cp /usr/share/asl3/asl-play-arn.* /etc/systemd/system</code></p> </li> <li> <p>Edit the <code>OnCalendar=</code> entry of <code>/etc/systemd/system/asl-play-arn.timer</code> for the timing of the playback desired</p> </li> <li> <p>Edit the value for \"NODE\" in <code>/etc/systemd/system/asl-play-arn.service</code> for the node to execute the playback upon</p> </li> <li> <p>Enable the timer unit:</p> </li> </ol> <pre><code>systemctl daemon-reload\nsystemctl enable asl-play-arn.timer\n</code></pre>"},{"location":"mans/asl-play-arn/#asteriskapp_rpt-configuration","title":"<code>Asterisk/app_rpt</code> Configuration","text":"<p>Usually the timeout timer in <code>app_rpt</code> will be too short to accommodate the playing of the full news file. The following commands can be added to <code>/etc/asterisk/rpt.conf</code> to enable and disable the TOT:</p> <pre><code>907=cop,7    ; Time out timer enable\n908=cop,8    ; Time out timer disable\n</code></pre> <p>These appear as commented-out options in the stock <code>rpt.conf</code>.</p>"},{"location":"mans/asl-play-arn/#bugs","title":"BUGS","text":"<p>Report bugs to https://github.com/AllStarLink/ASL3/issues</p>"},{"location":"mans/asl-play-arn/#copyright","title":"COPYRIGHT","text":"<p>Copyright (C) 2025 Jason McCormick and AllStarLink under the terms of the AGPL v3.</p>"},{"location":"mans/asl-say/","title":"asl-say","text":""},{"location":"mans/asl-say/#name","title":"NAME","text":"<p><code>asl-say</code> - Cause Asterisk to speak</p>"},{"location":"mans/asl-say/#synopsis","title":"SYNOPSIS","text":"<p>usage: <code>asl-say -n NODE -w ( time | time24 | ip4 | ip6 )</code></p>"},{"location":"mans/asl-say/#description","title":"DESCRIPTION","text":"<p><code>asl-say</code> will speak the one of the following things on the node specified with <code>-n</code> as directed by <code>-w</code></p> <p>Required arguments:</p> <p>-n NODE: node number</p> <p>-w: speak what from the list of options</p> <p>time: the current time</p> <p>time24: the current time in 24-hour format</p> <p>ip4: the first IPv4 address of the system</p> <p>ip6: the first global-scope IPv6 of the system</p>"},{"location":"mans/asl-say/#example","title":"EXAMPLE","text":"<p><code>asl-say -n 1999 -w time</code> will speak the current time on node 1999.</p>"},{"location":"mans/asl-say/#bugs","title":"BUGS","text":"<p>Report bugs to https://github.com/AllStarLink/ASL3/issues</p>"},{"location":"mans/asl-say/#copyright","title":"COPYRIGHT","text":"<p>Copyright (C) 2025 Jason McCormick and AllStarLink under the terms of the AGPL v3.</p>"},{"location":"mans/asl-setup-dkms-mok/","title":"asl-setup-dkms-mok","text":""},{"location":"mans/asl-setup-dkms-mok/#name","title":"NAME","text":"<p><code>asl-setup-dkms-mok</code> - Configure the Machine Owner Key (MOK) for signing kernel packages, notably dahdi for ASL.</p>"},{"location":"mans/asl-setup-dkms-mok/#synopsis","title":"SYNOPSIS","text":"<p>usage: <code>asl-setup-dkms-mok</code></p>"},{"location":"mans/asl-setup-dkms-mok/#description","title":"DESCRIPTION","text":"<p>This script is a walkthrough script for generating a UEFI Machine Owner Key (MOK). A MOK is needed on systems with UEFI SecureBoot to properly authenticate the DAHDI-related kernel modules which are rebuilt on kernel upgrades with DKMS. See the AllStarLink manual for more information or https://wiki.debian.org/SecureBoot.</p>"},{"location":"mans/asl-setup-dkms-mok/#bugs","title":"BUGS","text":"<p>Report bugs to https://github.com/AllStarLink/ASL3/issues</p>"},{"location":"mans/asl-setup-dkms-mok/#copyright","title":"COPYRIGHT","text":"<p>Copyright (C) 2025 Jason McCormick and AllStarLink under the terms of the AGPL v3.</p>"},{"location":"pi/cockpit-basics/","title":"Cockpit Basics","text":""},{"location":"pi/cockpit-basics/#what-is-the-cockpit-web-console","title":"What is the Cockpit Web Console?","text":"<p>The <code>Cockpit</code> web console is a web-based interface designed for managing and monitoring your AllStarLink Pi Appliance.</p> <p>The <code>Cockpit</code> web console enables you to perform a wide range of administration tasks, including:</p> <ul> <li>Managing AllStarLink, Asterisk, and its related applications</li> <li>Managing services</li> <li>Managing user accounts</li> <li>Managing and monitoring system services</li> <li>Configuring network interfaces</li> <li>Reviewing system logs</li> <li>Updating software  </li> </ul> <p>The <code>Cockpit</code> web console uses the same system concepts as you would use in a terminal, and actions performed in a terminal are immediately reflected in the <code>Cockpit</code> web console. That is to say, you can use <code>Cockpit</code> and an SSH connection interchangeably as you desire.</p> <p>You can monitor the logs of application. In addition, you can change the settings directly in the web console or through the terminal. </p> <p>Throughout this documentation a host named <code>node63001.local</code> is used as the example host. Substitute that name with your own node's name as it was set during the imaging process.</p>"},{"location":"pi/cockpit-basics/#logging-in-to-the-web-console","title":"Logging In to the Web Console","text":"<ol> <li> <p>In your web browser, enter the following address to access the web console: <code>https://node63001.local:9090</code></p> </li> <li> <p>The browser may display a warning. Accept the security exception to proceed with the login</p> <p></p> </li> <li> <p>Enter the username and password set during the imaging process</p> <p></p> </li> <li> <p>Click Log In</p> </li> </ol>"},{"location":"pi/cockpit-basics/#administrative-access","title":"Administrative Access","text":"<p>The web console has a concept of Administrative access. While it does remember the access level across logins, to access certain functions you may need to enable Administrative access from Limited access.</p> <p>To do that:</p> <ol> <li> <p>Click on the bar marked Limited Access to enable admin-level access.</p> <p> You may be prompted to to enter the password again. Do so and then click Authenticate </p> </li> <li> <p>Click Close on the box reporting administrative access has been granted.</p> </li> </ol>"},{"location":"pi/cockpit-basics/#shutting-down-the-appliance","title":"Shutting Down the Appliance","text":"<p>You can use the web console to shut down the system.</p> <ol> <li> <p>Log into the web console.</p> </li> <li> <p>(optional) Click on the bar marked Limited Access to enable admin-level access.</p> <p></p> </li> <li> <p>(optional) Click Close on the box reporting administrative access has been granted.</p> </li> <li> <p>Click on the downward arrow next to Reboot and then select Shutdown</p> <p></p> </li> <li> <p>Change the Delay dropdown to No delay and click Shut down</p> <p></p> </li> <li> <p>A Disconnected message will appear. The node will shutdown is about 15-30 seconds, after which power may be removed.</p> </li> </ol>"},{"location":"pi/cockpit-basics/#rebooting-the-appliance","title":"Rebooting the Appliance","text":"<ol> <li> <p>Log into the web console.</p> </li> <li> <p>(optional) Click on the bar marked Limited Access to enable admin-level access.</p> <p></p> </li> <li> <p>(optional) Click Close on the box reporting administrative access has been granted.</p> </li> <li> <p>Click on Reboot</p> <p></p> </li> <li> <p>Change the Delay dropdown to No delay and click Reboot</p> <p></p> </li> <li> <p>A Disconnected message will appear. The node will reboot and be available again in about 15-30 seconds. After that, one can click Reconnect.</p> </li> </ol>"},{"location":"pi/cockpit-basics/#configuring-time-on-the-appliance","title":"Configuring Time on the Appliance","text":"<p>In general, the appliance should be left in the default setting of using the NTP service to automatically set the time. However, you may want to change the timezone. To change the time:</p> <ol> <li> <p>Log into the web console.</p> </li> <li> <p>(optional) Click on the bar marked Limited Access to enable admin-level access.</p> <p></p> </li> <li> <p>(optional) Click Close on the box reporting administrative access has been granted.</p> </li> <li> <p>Click on Overview and scroll down to Configuration</p> </li> <li> <p>Click on highlighted time next to System time</p> </li> <li> <p>Change the Time zone drop-down to the desired zone.</p> </li> <li> <p>Click Change.</p> </li> </ol> <p>NOTE: Some content copied from  Managing systems using the RHEL9 web console which is released under the Creative Commons Attribution\u2013Share Alike 3.0 Unported license (\"CC-BY-SA\")</p>"},{"location":"pi/cockpit-console/","title":"Terminal / Console","text":"<p>The <code>Cockpit</code> web console provides a feature-complete terminal interface in the web browser without requiring setup and configuration of an SSH client. This allows administration of the node from anywhere!</p> <p>Use of the web console Terminal and an SSH client is fully interactive and interchangeable.</p> <ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Terminal in the web console menu on the left</p> </li> <li> <p>You will be connected to a terminal of the user that you logged in with</p> <p></p> </li> <li> <p>To execute commands as root, either prefix the command with <code>sudo</code>:</p> <p></p> </li> <li> <p>One can enter a root session completely by issuing the command <code>sudo -s</code>:</p> <p></p> </li> </ol> <p>NOTE: Some content copied from  Managing systems using the RHEL9 web console which is released under the Creative Commons Attribution\u2013Share Alike 3.0 Unported license (\"CC-BY-SA\")</p>"},{"location":"pi/cockpit-firewall/","title":"Managing the Firewall","text":"<p>A firewall is a way to protect nodes from any unwanted traffic. It enables users to control incoming network traffic on host machines by defining a set of firewall rules. These rules are used to sort the incoming traffic and either block it or allow it through. </p> <p>In the AllStarLink Pi Appliance, the <code>firewalld</code> service with the <code>nftables</code> backend functions as the firewall. Through the web console, you can configure <code>firewalld</code>. </p>"},{"location":"pi/cockpit-firewall/#adding-an-inbound-port","title":"Adding an Inbound Port","text":"<p>The firewall is enabled by default with a reasonable set of default rules. The most common reasons to edit the port list would be to change the IAX2 port to be outside the range of <code>4560-4580</code> (default is <code>4569</code>) or to change the VOTER port (default <code>1667</code> in ASL3, you might need <code>667</code> for legacy reasons).</p> <ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Networking in the web console menu on the left</p> </li> <li> <p>Click Edit rules and zones in the Firewall panel</p> </li> <li> <p>Click Custom ports</p> </li> <li> <p>Enter the TCP or UDP port or ports to be permitted in the TCP or UDP fields respectively. Multiple ports can be separated with commands and a range of ports can be specified with a hyphen. It is highly suggested to include a Description for the port. For example, if adding an alternative IAX2 port on <code>14569</code>:</p> <p></p> </li> <li> <p>Click Add ports</p> </li> <li> <p>The change is immediate.</p> </li> </ol>"},{"location":"pi/cockpit-firewall/#removing-an-inbound-port","title":"Removing an Inbound Port","text":"<p>The firewall is enabled by default with a reasonable set of default rules. If you need to remove a port from the rules list:</p> <ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Networking in the web console menu on the left</p> </li> <li> <p>Click Edit rules and zones in the Firewall panel</p> </li> <li> <p>Next to the service to delete, click on the three vertical dots and select Delete </p> <p></p> </li> <li> <p>The change is immediate.</p> </li> </ol>"},{"location":"pi/cockpit-firewall/#enabling-and-disabling","title":"Enabling and Disabling","text":"<p>The firewall is enabled by default with a reasonable set of default rules. Unless you are familiar with networking, DO NOT disable the firewall or make changes to it. If, for some reason, you need to disable/enable the firewall manually:</p> <ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Networking in the web console menu on the left</p> </li> <li> <p>To enable the firewall, slide the toggle to the right. This is the default setting and should not be changes unless you're 100% sure of what you are doing</p> <p></p> </li> <li> <p>To disable the firewall, slide the toggle to the left. Do not disable the firewall unless you're 100% sure of what you are doing</p> <p></p> <p>NOTE: Some content copied from  Managing systems using the RHEL9 web console which is released under the Creative Commons Attribution\u2013Share Alike 3.0 Unported license (\"CC-BY-SA\")</p> </li> </ol>"},{"location":"pi/cockpit-get-started/","title":"Cockpit on the Pi Appliance","text":"<p>ASL3 features a modern appliance of AllStarLink while retaining the ubiquitous Raspberry Pi experience that's well-documented and familiar to the amateur radio community worldwide.</p>"},{"location":"pi/cockpit-get-started/#cockpit-web-admin-interface","title":"Cockpit Web Admin Interface","text":"<p>The AllStarLink Pi Appliance includes the user-friendly <code>Cockpit</code> system for ease of administration. <code>Cockpit</code> is accessed on port <code>9090</code> of the appliance. In these examples the hostname <code>node63001</code> is used and should be replaced with the name you set during setup. If the name <code>node63001</code> was used at setup, then pointing a browser to <code>https://node63001.local:9090/</code> will bring up the <code>Cockpit</code> interface. </p> <p>NOTE: The hostname only works when your node and your PC are on the same LAN. Otherwise, use the IP or DNS name you assigned. Login is the <code>username</code> and <code>password</code> that was setup during the Pi imaging process.</p> <p>The first connection will report a message that \"Your connection isn't private\". For the Pi appliance, this is acceptable. Click on Advanced and then Continue to node63001.local (unsafe). This only must be done the first time.</p> <p></p> <p>Enter the <code>username</code> and <code>password</code> configured during the imaging process above. Click Log in</p> <p></p> <p><code>Cockpit</code> is fairly intuitive to use, but here's are a few pointers to help get started:</p> <ul> <li>Cockpit Basics</li> <li>Terminal / Console</li> <li>Network Configuration</li> <li>Software Updates</li> <li>Services Management</li> <li>Managing the Firewall</li> </ul>"},{"location":"pi/cockpit-network/","title":"Network Configuration","text":"<p>The Networking system tool in the web console permits viewing the status of the network as well as making network configuration changes to the appliance.</p>"},{"location":"pi/cockpit-network/#observing-network-status-and-configuration","title":"Observing Network Status and Configuration","text":"<ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Networking in the web console menu on the left</p> </li> <li> <p>At the top of the screen will be the network data statistics for transmitted and receiving network traffic. This information can be helpful if there are questions about network bandwidth utilization:</p> <p></p> </li> <li> <p>The next panel down shows the current configuration of the present network adapters:</p> <p></p> </li> <li> <p>Finally, at the bottom is the logs about the current state of the network:</p> <p></p> </li> </ol>"},{"location":"pi/cockpit-network/#changing-adapter-settings","title":"Changing Adapter Settings","text":"<ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Networking in the web console menu on the left</p> </li> <li> <p>Scroll down to the Interfaces section</p> </li> <li> <p>Click on the Name of the interface</p> </li> <li> <p>Make desired changes</p> </li> <li> <p>Changes take place immediately. Be cautious when changing IP addressing because you may accidentally remove your ability to access to the console.</p> </li> </ol>"},{"location":"pi/cockpit-network/#changing-wifi-settings","title":"Changing WiFi Settings","text":"<p>Unfortunately, <code>Cockpit</code> does not have an interface for managing WiFi networks with in it. Currently WiFi network changes must be made from the web console Terminal screen.</p>"},{"location":"pi/cockpit-network/#listing-existing-wifi-networks","title":"Listing Existing WiFi Networks","text":"<p>List the existing WiFi network(s) with <code>nmcli device wifi list</code>:</p> <p></p>"},{"location":"pi/cockpit-network/#add-a-wifi-network","title":"Add a WiFi Network","text":"<ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Terminal in the web console menu on the left</p> </li> <li> <p>At the prompt enter the command:</p> <pre><code>nmcli device wifi connect MYNETWORK password MYPASSWORD\n</code></pre> <p>where <code>MYNETWORK</code> is the name (\"SSID\") and <code>MYPASSWORD</code> is the password (\"Key\"). To join the network <code>RadioSite</code> with the password <code>RF1234</code>:</p> <pre><code>nmcli device wifi connect RadioSite password RF1234\n</code></pre> <p>If there is a space in the name or password, you must use quotes around the element with the space in it.</p> </li> <li> <p>If the network is not currently active (i.e. adding a network where the appliance will be in the future) or the SSID is hidden, adding is slightly more complicated. Again, substitute <code>MYNETWORK</code> and <code>MYPASSWORD</code> with as appropriate.</p> <pre><code>nmcli conn add type wifi con-name MYNETWORK ifname wlan0 ssid MYPASSWORD\nnmcli conn modify MYNETWORK wifi-sec.key-mgmt wpa-psk wifi-sec.psk MYPASSWORD\n</code></pre> </li> </ol> <p>NOTE: DO NOT use the <code>raspi-config</code> tool to attempt to set the Wifi network and password. This will break the appliance's networking.</p> <p>NOTE: Some content copied from  Managing systems using the RHEL9 web console which is released under the Creative Commons Attribution\u2013Share Alike 3.0 Unported license (\"CC-BY-SA\")</p>"},{"location":"pi/cockpit-services/","title":"Services Management","text":"<p>The <code>Cockpit</code> web console allows the management of all of the running services. You can activate or deactivate services, restart or reload them, or manage their automatic startup.</p>"},{"location":"pi/cockpit-services/#start-stop-and-restart-services","title":"Start, Stop, and Restart Services","text":"<p>This procedure stops or starts system services using the web console interface. You can filter the services by name or description and also by Enabled, Disabled, or Static automatic startup. The interface shows the current state of the service and its recent logs.</p> <ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Services in the web console menu on the left. The default tab for Services is System Services. If you want to manage targets, sockets, timers, or paths, switch to the respective tab in the menu on top. To open service settings, click on a selected service from the list. You can tell which services are active or inactive by checking the State column</p> </li> <li> <p>To start an inactive service, click the Start button</p> <p></p> </li> <li> <p>To deactivate an active service, click the Stop button</p> <p></p> </li> <li> <p>To restart a service, click the Restart button</p> <p></p> </li> </ol>"},{"location":"pi/cockpit-services/#seeing-status-and-recent-logs-of-a-service","title":"Seeing Status and Recent Logs of a Service","text":"<p>This procedure stops or starts system services using the web console interface. You can filter the services by name or description and also by Enabled, Disabled, or Static automatic startup. The interface shows the current state of the service and its recent logs.</p> <ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Services in the web console menu on the left. The default tab for Services is System Services. If you want to manage targets, sockets, timers, or paths, switch to the respective tab in the menu on top. To open service settings, click on a selected service from the list. You can tell which services are active or inactive by checking the State column</p> </li> <li> <p>Scroll down to see Service logs. The button View All Logs can be clicked to review an extensive output of the service's logs</p> <p></p> </li> </ol> <p>NOTE: Some content copied from  Managing systems using the RHEL9 web console which is released under the Creative Commons Attribution\u2013Share Alike 3.0 Unported license (\"CC-BY-SA\")</p>"},{"location":"pi/cockpit-updates/","title":"Software Updates","text":"<p>The Software updates tool in the web console is how to install package updates to the AlLStarLink Pi appliance. This includes updating AllStarLink software and its associated items.</p>"},{"location":"pi/cockpit-updates/#checking-for-and-installing-updates","title":"Checking For and Installing Updates","text":"<ol> <li> <p>Log in to the web console with administrator privileges. For details, see Cockpit Basics</p> </li> <li> <p>Click Software Updates in the web console menu on the left</p> </li> <li> <p>Click on the cycle icon in the upper right of the panel</p> <p></p> </li> <li> <p>Available updates will be displayed. Click on Install all updates</p> <p></p> </li> <li> <p>The updates will start. Depending on the quantity of updates, the speed of the Pi hardware, and how long certain installs take, this may take quite a while to complete. For example, if there is a Linux kernel update, then the DAHDI package will be recompiled for the new kernel which can take up to 10 minutes. Be patient while updates run. You can observe the updates by clicking on View update log</p> <p></p> </li> <li> <p>When the updates are complete, you will be prompted to reboot the system. In general, it is advised to reboot the system after updates, however that is not necessarily required for most updates. Kernel updates and DAHDI updates DO require a reboot</p> <p></p> </li> <li> <p>After the updates are completed, returning to the Software Updates screen should show that the software is up to date</p> <p></p> </li> </ol>"},{"location":"user-guide/","title":"ASL3 Installation","text":"<p>Welcome to the Installation section of the manual! We know you are excited to get on with trying out the new ASL3. </p> <p>In this section of the manual, you will find instructions on how to either install the Raspberry Pi Image to create an ASL3 Pi Appliance, or install ASL3 on Debian 12. </p> <p>Use the Table of Contents on the left to jump to the type of installation you are wishing to perform, but be sure to check out the rest of the topics in this section for other important information. </p> <p>Once you've got your new ASL3 installed, be sure to check out the Basic Operation section (see the link at the top of the page).</p>"},{"location":"user-guide/asl-cmds-tools/","title":"ASL Commands and Tools","text":"<p>The following commands and tools are the primary AllStarLink ecosystem. Each entry contains a description of the command, link to the documentation, and what package provides the command or tool.</p> Command Description Documentation Package asterisk The main console for Asterisk and app_rpt Normally invoked with <code>asterisk -r</code> asl3-asterisk <code>asl-menu</code> The main text-based menu for configuring ASL Menu Use asl3 <code>asl3-update-nodelist</code> Primary engine to update the <code>/var/lib/asterisk/rpt_extnodes</code> database like for the node dictionary. Node Resolution asl3-update-nodelist <code>asl3-update-astdb</code> Universal engine to provide <code>astdb.txt</code> to various applications that require the old node name database. Use this rather than a special version for every third-party app (e.g. Supermon, Node Remote, etc.) Node Resolution asl3-update-nodelist <code>allmon3-passwd</code> Manage the user database and passwords for Allmon3 Allmon3 User Management allmon3 <code>asl-find-sound</code> Utility to help locate compatible sound devices manpage asl3 <code>asl-node-lookup</code> Utility to test node lookup when troubleshooting Asterisk/app_rpt connectivity issues manpage asl3 <code>asl-play-arn</code> Tool to play Amateur Radio Newsline manpage asl3 <code>asl-repo-switch</code> Utility to change package release streams for AllStarLink Beta Testing asl3 <code>asl-say</code> Tool for basic statements into Asterisk like the sime manpage asl3 <code>asl-show-version</code> Utility to report the package version of all related ASL3 software. Normally used in bug reports and support requests. N/A asl3 <code>asl-tts</code> Text-to-speech engine for AllStarLink Text to Speech asl3-tts <code>sa818</code> CLI tool for configuration SA818/DRA818-based radio modules. Use `sa818-menu in most cases. SA818 Page asl3 <code>sa818-menu</code> Menu for configuring SA818/DRA818-based radio modules SA818 Page asl3"},{"location":"user-guide/betatest/","title":"Beta Testing","text":"<p>Beta testing is the final phase of software testing before releasing a product to the general public. During this stage, a group of users representing the target audience validates the product. They explore its features, uncover bugs, and provide feedback.</p> <p>AllStarLink releases software packages to a beta channel on a periodic basis to address bug fixes and feature enhancements. The beta channel of packages is available to all users. However, please only select to run packages from the beta channel if you meet the following criteria:</p> <ol> <li> <p>If something goes wrong, your can easily recover your node from backups or other saved configuration</p> </li> <li> <p>You have generalized Linux skills such as understanding basic commands, ability to use the shell terminal of Linux, ability to copy/paste output data into bug reports, etc.</p> </li> <li> <p>You acknowledge that a beta release may have other bugs, incomplete fixes, or may in rare cases not work right at all for your configuration and that you can live with this</p> </li> <li> <p>You may need to edit configuration files to fix issues or test things or to roll back to previous versions of software</p> </li> </ol> <p>If you cannot adhere to the above four conditions, you should not use the beta channel software.</p>"},{"location":"user-guide/betatest/#enabling-beta-channel-software","title":"Enabling Beta Channel Software","text":"<p>Enabling beta channel software is done with the <code>asl-repo-switch</code> command as <code>root</code>. Set the channel to \"beta\" using <code>asl-repo-switch -l beta</code>. For example:</p> <pre><code>bash\n# asl-repo-switch -l beta\nSetting level beta... DONE\nRun 'apt update' to refresh the package repo cache.\n</code></pre>"},{"location":"user-guide/betatest/#disabling-beta-channel-software","title":"Disabling Beta Channel Software","text":"<p>Disabling beta channel software is done with the <code>asl-repo-switch</code> command as <code>root</code>. Set the channel to \"main\" using <code>asl-repo-switch -l main</code>.</p> <p>For example:</p> <pre><code>bash\n# asl-repo-switch -l main\nSetting level main... DONE\nRun 'apt update' to refresh the package repo cache.\n</code></pre>"},{"location":"user-guide/betatest/#installing-updates-using-beta-channel","title":"Installing Updates Using Beta Channel","text":"<p>The most common case to use the beta channel for software packages is to test a proposed fix to a problem you are having. In those cases, the following commands should be run one at a time from a terminal/console as <code>root</code> (using <code>sudo</code> or <code>sudo -s</code>):</p> <pre><code>sudo asl-repo-switch -l beta\nsudo apt update\nsudo apt upgrade -y\nsudo asl-repo-switch -l main\n</code></pre> <p>This will do a one-time installation of the packages in the beta channel and then switch back to main.</p>"},{"location":"user-guide/betatest/#resetting-installation-of-asl-back-to-production","title":"Resetting Installation of ASL Back to Production","text":"<p>To reset your packages for ASL3 back to the production-release main versions:</p> <p>For Pi Appliances:</p> <pre><code>sudo asl-repo-switch -r\nsudo apt update\nsudo apt install -y --reinstall asl3 asl3-asterisk asl3-asterisk-config \\\n  asl3-asterisk-modules asl3-menu asl3-update-nodelist \\\n  asl3-pi-appliance allmon3\n</code></pre> <p>For Debian 12 general installations:</p> <pre><code>sudo asl-repo-switch -r\nsudo apt update\nsudo apt install -y --reinstall asl3 asl3-asterisk asl3-asterisk-config \\\n  asl3-asterisk-modules asl3-menu asl3-update-nodelist\n</code></pre> <p>For DAHDI Kernel packages after doing the above, as necessary:</p> <pre><code>sudo apt install -y --reinstall dahdi-linux dahdi-dkms\n</code></pre> <p>NOTE: You may need to merge or fix configurations when rolling back from beta software to production. This is unusual but possible.</p>"},{"location":"user-guide/install/","title":"Debian 12 Install","text":"<p>These instructions are for installing ASL3 on general purpose operating systems manually. For installation on Raspberry Pis, consider using the AllStarLink 3 Pi Appliance</p> <p>Architecture Support</p> <p>Currently, the project does not support armv7l/armhf platforms because all known uses of AllStarLink is on hardware which supports the Bookworm arm64 distribution such as Raspberry Pi 3, 4, 5, and Zero 2 W. If you have a platform that can use armv7l/armhf 32-bit packages only please file an issue at ASL3 on GitHub.</p> <p>Previous Issues with Cloud Kernels</p> <p>As of DAHDI Linux 3.4.0-5, as released from AllStarLink, no longer has conflicts with the Debian \"cloud\" kernels and is fully supported.</p>"},{"location":"user-guide/install/#system-requirements","title":"System Requirements","text":"<p>The following are the system requirements for an ASL3 system:</p> Minimum Required Recommended CPU/Platform 1 CPU, 64-bit, x86_64 (amd64) or ArmV8 (arm64) 2 - 4 CPUs depending on the number of hardware devices connected to the system Memory 512M 2 G Storage 8G (for OS + software) - <p>UEFI / SecureBoot</p> <p>For x86_64/amd64 platforms, it is recommended to disable SecureBoot if you do not need that feature. While it is a good security feature, given that AllStarLink v3 requires building a kernel module, it adds likely-undesired complexity for most ASL users. If you need or want to use UEFI/SecureBoot see the advanced topic document.</p>"},{"location":"user-guide/install/#debian-12-os-install","title":"Debian 12 OS Install","text":"<p>You\u2019re going to start off by installing a new Debian 12 OS on your PC computer or virtual machine. There are instructions all over the internet that detail how to install Debian 12. Briefly you:</p> <ul> <li>Download and boot the Debian 12 netinstall.iso</li> <li>Take most of the defaults</li> <li>Do not install a <code>Debian desktop environment</code></li> <li>Do install <code>web server</code> (if you plan to use Allmon3 or other web management packages)</li> <li>Do install <code>SSH server</code></li> </ul> <p>NOTE: When setting up users and passwords you may be prompted to set the password for the <code>root</code> account. If you DO NOT provide a password then the root account will be disabled, and the system's initial user account (that will requested on the next screen) will be given the power to become <code>root</code> using the <code>sudo</code> command.  If you DO provide a password then the <code>sudo</code> command will NOT be installed on your system. Our recommendation is to NOT set the <code>root</code> password and rely on using the <code>sudo</code> command only when needed.</p>"},{"location":"user-guide/install/#allstarlink-package-repo-install","title":"AllStarLink Package Repo Install","text":"<p>Once your Debian system is up and running, install the ASL package repositories:</p> <pre><code>cd /tmp\nwget https://repo.allstarlink.org/public/asl-apt-repos.deb12_all.deb\nsudo dpkg -i asl-apt-repos.deb12_all.deb\nsudo apt update\n</code></pre>"},{"location":"user-guide/install/#asl3-packages-install","title":"ASL3 Packages Install","text":"<p>Now the packages may be installed and updated directly from the AllStarLink package repository:</p> <pre><code>sudo apt install asl3\n</code></pre> <p>This will install the complete ASL3 system including all of the Asterisk <code>app_rpt</code>-enabled packages (<code>asl3-asterisk</code>, <code>asl3-asterisk-config</code>, <code>asl3-asterisk-doc</code>, <code>asl3-asterisk-modules</code>), the Dahdi kernel module (<code>dahdi-dkms</code>, <code>dahdi-linux</code>, <code>dahdi-source</code>), the needed development tools to keep the kernel module updated, and the <code>asl3-menu</code>.</p> <p>It's important to note that the new packaging format will allow for easy, automated updates of kernels through the standard <code>apt upgrade</code> process. There is no longer any reason to hold back kernel upgrades with the ASL3 packaging.</p> <p>The following packages are also available and may be installed separately:</p> <p>Allmon3 - The updated web interface to AllStarLink which includes strong support for mobile devices and screens of all sizes and shapes. See the Allmon3 page for details.</p> <p>ASL3 Nodelist Updater - An updated node service to maintain a local copy of the AllStarLink node database (<code>rpt_extnodes</code>). While, in general, the preferred method of node lookup is DNS, some installations with slow Internet or DNS servers that have very long cache timers may benefit from this method of node lookup instead.</p> <p>Install with <code>sudo apt install asl3-update-nodelist</code>.</p>"},{"location":"user-guide/install/#node-configuration","title":"Node Configuration","text":"<p>The next step is to configure the node settings. It is recommended to use the <code>asl-menu</code> command to manage the configuration for common use cases. See ASL3 Menu for details. YouTuber Freddie Mac has a nice ASL3 RPi installation and configuration video. See the part where the <code>asl-menu</code> is shown. </p> <p>Proceed from here with the Node Settings option in order to configure your node number and choose/configure your audio interface. </p>"},{"location":"user-guide/install/#debian-12-appliance","title":"Debian 12 Appliance","text":"<p>Do This at Your Own Risk</p> <p>A Debian 12 Appliance, similar to the Raspberry Pi Appliance, is still under development. In the meantime, you can get \"close\" to the same user experience by installing and configuring some additional packages. This is not generally recommended for most users at this time.</p> <p>If you install the following packages, you\u2019ll have everything you need to use the \u201cappliance\u201d configuration:</p> <pre><code>sudo apt install asl3 asl3-update-nodelist asl3-menu allmon3\n</code></pre> <p>You will still need to do certain things like configure Allmon3 by hand.</p> <p>If you want to turn your configuration you described into the full appliance, you can try installing <code>asl3-pi-appliance</code> which will \u201ctake over\u201d your system. </p> <p>This hasn't been rigorously tested against a non-Pi installation, but it should mostly work (if not completely work) - but YMMV. A non-PI \u201cimage\u201d is in the works, but it\u2019s not ready yet.</p> <p>If you don\u2019t want to take the risk of that, but still want all the web experience, you can install:</p> <pre><code>sudo apt install cockpit cockpit-networkmanager cockpit-packagekit \\\n  cockpit-sosreport cockpit-storaged cockpit-system cockpit-ws \\\n  python3-serial firewalld\n</code></pre> <p>Which should give you an unbranded, uncustomized <code>Cockpit</code> environment.</p> <p>Again, doing the above is experimental and not generally recommended, but you are welcome to give it a try, and perhaps provide feedback on issues and changes to help push the development of a Debian 12 Appliance image along!</p>"},{"location":"user-guide/install/#docker","title":"Docker","text":"<p>Docker support will be coming in the near future.</p>"},{"location":"user-guide/known-issues-diffs/","title":"Known Issues and Differences With Legacy Versions","text":"<p>As discussed in Important Considerations, AllStarLink v3 is a gigantic leap forward in platform and software ecosystem. </p> <p>Many things are different in modern versions of Linux, Asterisk, and more. </p> <p>See the Incompatibilities, Changes, and Known Issues page for more detailed information.</p>"},{"location":"user-guide/menu/","title":"ASL3 Menu","text":"<p>Once you have installed ASL3 on your system you will want to configure your node.</p> <p>The ASL3 menu will help you get started with many common configurations including nodes with USB audio interfaces and \"hub\" nodes. The ASL3 menu will also help you maintain your system.</p> <p>Your system may have been setup to automatically start the ASL3 menu as soon as you have logged in. If not, you can access the ASL3 menu by executing the following command from the Linux shell :</p> <pre><code>asl-menu\n</code></pre> <p>NOTE: If you are not logged in as the \"root\" user you will need to use:</p> <pre><code>sudo asl-menu\n</code></pre> <p>When the ASL3 menu is running you will be presented with options to configure a node, access the Asterisk CLI, backup (or restore) your ASL settings, access the Linux CLI, perform some basic diagnostics, and perform some common system actions.</p>"},{"location":"user-guide/menu/#node-settings","title":"Node Settings","text":"<p>For new installs, you will want to select the ASL3 <code>Node Settings</code> menu option. This is where you will configure the basic settings needed to get your new node on the air. You can return to this menu later to review and/or update your node settings.</p> <p>The <code>Node Settings</code> menu allows you update key node settings including :</p> <ul> <li>Node number</li> <li>Node password</li> <li>Node Callsign/ID</li> <li>Radio interface (e.g. USB sound device, HUB node)</li> <li>Duplex type (e.g. full duplex, half duplex, telemetry)</li> <li>USB Interface tuning</li> <li>Enable/disable status posting (to http://stats.allstarlink.org)</li> </ul> <p>The <code>Node Settings</code> menu also allows you to add (or remove) additional nodes.</p> <p>NOTE: You can also use the <code>node-setup</code> command to access this menu directly from the Linux CLI.</p>"},{"location":"user-guide/menu/#asterisk-cli","title":"Asterisk CLI","text":"<p>The Asterisk Command Line Interface (CLI) provides direct access to the heart of what makes an AllStar node.</p> <p>You might use the CLI for testing, troubleshooting, or for controlling your node. You should know that many of the commands require a more in-depth knowledge of Asterisk. The good news is that many of the commonly used commands can be executed from the <code>Diagnostics Menu</code>, or with one of the web management/monitoring applications (e.g. Allmon3).</p> <p>The Asterisk CLI can be accessed directly via <code>asl-menu</code>, from the <code>Cockpit</code> terminal, or directly off the Linux command line using <code>asterisk -rvvv</code> or <code>sudo asterisk -rvvv</code>, depending on your configuration.</p>"},{"location":"user-guide/menu/#asterisl-cli-verbosity-and-debug","title":"Asterisl CLI Verbosity and Debug","text":""},{"location":"user-guide/menu/#verbosity-level","title":"Verbosity Level","text":"<p>\"Verbosity\" refers to how \"chatty\" the Asterisk CLI is. The larger the verbosity level, the more detailed the messages on the console will be. A good verbosity level is typically <code>3</code>. It provides a reasonable level of detail as Asterisk is operating.</p> <p>The verbosity level is set by the number of <code>v</code>'s when the command to connect to the CLI is invoked. As shown above, <code>asterisk -rvvv</code> would connect to the console with a verbosity level of <code>3</code>, due to the <code>vvv</code>.</p> <p>The <code>asl-menu</code> option to <code>Enter the Asterisk CLI</code> invokes the CLI with a verbosity level of <code>3</code>.</p> <p>You can see the current verbosity level once you are in the Asterisk CLI by using the <code>core show settings</code> command.</p> <p>You can change the current verbosity level once you are in the Asterisk CLI by using the <code>core set verbose &lt;level&gt;</code> command.</p> <p>The Asterisk CLI should be invoked with at least a verbosity level of <code>1</code>, otherwise you will see very few messages.</p>"},{"location":"user-guide/menu/#debug-level","title":"Debug Level","text":"<p>\"Debug\" messages are additional logging messages that developers specifically add to modules, to aid in troubleshooting. Debug messages are distinct from normal (verbosity) messages, and must be enabled separately. </p> <p>You can see the current debug level once you are in the Asterisk CLI by using the <code>core show settings</code> command. It will default to level <code>0</code>, unless specifically changed.</p> <p>You can change the current debug level once you are in the Asterisk CLI by using the <code>core set debug &lt;level&gt;</code> command. Optionally, the debug level can be configured and set for a specific module, by passing the module name in the command. For example, <code>core set debug 4 app_rpt</code> would set the debug level to <code>4</code> specifically for the <code>app_rpt</code> module, instead of the whole system. This could make things easier to read, as all the modules wouldn't be spitting out debug messages, only the <code>app_rpt</code> module.</p>"},{"location":"user-guide/menu/#backup-and-restore","title":"Backup and Restore","text":"<p>The ASL3 <code>Backup and Restore</code> menu option provides a simple option to backup (and restore) your AllStar and Asterisk configuration.</p> <p>The backup archives are stored locally on your system and optionally in the cloud.</p> <p>We encourage you to \"backup\" your configuration, especially before and after you make changes.</p> <p>NOTE: you can also use the <code>asl-backup-menu</code> command directly from the Linux CLI to access this menu.</p>"},{"location":"user-guide/menu/#diagnostics","title":"Diagnostics","text":"<p>The ASL3 <code>Diagnostics</code> menu option allows you to perform some simple/rudimentary checks of your system and node.</p> <p>These diagnostics include basic internet connectivity checks and reporting of your AllStar registrations. We also provide a way to stop, start, and restart some of the AllStar and Asterisk services that run on your system.</p> <p>NOTE: You should know that these diagnostics are not exhaustive. With a good connection to the internet and a valid configuration all \"should be\" OK.</p> <p>If the provided diagnostics don't flag an issue then you will need to dig deeper.</p> <ul> <li>Be aware of changes you make to your system and configuration.</li> <li>Be aware of software packages that you install.</li> <li>Be aware of \"upgrades\".</li> </ul> <p>If you need help, reach out to the AllStarLink Community.</p>"},{"location":"user-guide/menu/#expert-configuration","title":"Expert Configuration","text":"<p>The ASL3 <code>Expert Configuration Menu</code> option will allow you to make changes to some of the AllStar and Asterisk configuration files (in the <code>/etc/asterisk</code> directory). But, don't worry about that advanced stuff just yet.</p>"},{"location":"user-guide/menu/#bash-shell","title":"Bash Shell","text":"<p>The <code>bash</code> shell provides access to the Linux command line interface, also known as the Linux CLI. This is for experts or if you have been provided with CLI instructions.</p>"},{"location":"user-guide/passwords/","title":"Logins and Passwords","text":"<p>Yes, there are many \"different\" logins and passwords associated with AllStarLink, the ASL3 software, and the related applications. A typical ASL3 server/node will directly or indirectly use the following login/password pairs:</p> <ul> <li>AllStarLink website login (for \"node\" information)</li> <li>Linux login</li> <li>Asterisk Manager Interface (AMI) user/secret</li> <li>Web application (Allmon3) login</li> </ul>"},{"location":"user-guide/passwords/#allstarlink-website-wwwallstarlinkorg","title":"AllStarLink Website (www.allstarlink.org)","text":"<p>The AllStarLink website is where you register for an AllStarLink account, add ASL servers, and request ASL nodes.</p> <ul> <li> <p>Your AllStarLink account with have a <code>login</code> and <code>password</code></p> </li> <li> <p>Using the AllStarLink website's \"Portal\" menu you can:</p> <ul> <li> <p>Add/configure \"servers\" (computers) that will be running the ASL software. Each \"server\" specifies the IAX port used to communicate with your node. Most nodes will use the default port (4569). The most common reason to specify an alternate port would be configuring multiple servers that would be running behind a NAT router (e.g. when the servers would be sharing the same public IP).</p> </li> <li> <p>Add/configure \"nodes\" that will be running on a server. Each ASL \"node\" will have an associated password. You will use the node number and password pair when configuring your ASL node.</p> </li> </ul> </li> <li> <p>Some desktop and mobile applications use \"Web Transceiver\" to connect to AllStarLink nodes. Many of these applications use your AllStarLink website login and password for authentication.</p> </li> </ul>"},{"location":"user-guide/passwords/#linux-login","title":"Linux Login","text":"<p>Your desktop, laptop, Raspberry Pi, or Virtual Machine will be running the Linux operating system (e.g. Debian). To access the operating system on your OS you will need a login <code>user</code> and <code>password</code>.</p> <p>You will use the Linux <code>user</code> and <code>password</code> when logging in to your system:</p> <ul> <li>with the system's display/keyboard</li> <li>over the network using SSH</li> <li>over the network using the Cockpit web console</li> </ul> <p>You may have heard about the Linux \"root\" account. The root account is also called the super-user; it is a login that bypasses all security protection on your system. The root account should only be used to perform system administration, and only used for as short a time as possible. With ASL3, we are trying to limit our usage of the \"root\" account.</p>"},{"location":"user-guide/passwords/#how-do-i-setup-a-linux-login","title":"How do I setup a Linux login?","text":"<ul> <li>For those using the Raspberry Pi Imager, you will use the \"OS Customization\" to setup a new login account. Here, you will specify your login <code>user</code> and <code>password</code> (or provide an SSH public key for password-less access)</li> <li>For those installing generic Debian OS, you should be prompted to setup an initial account during the OS installation. This is where you will specify your login <code>user</code> and <code>password</code>. Note, we recommend NOT configuring a <code>root</code> account during Debian 12 installation (skip it), so that the first user account you create will be able to issue root commands using <code>sudo</code></li> <li>Some Virtual Machines (VM's) will have you use a pre-configured image with a default <code>user</code> and <code>password</code>.  Check the documentation associated with the image, or your VM host/provider for details</li> </ul> <p>NOTE: There is NO DEFAULT USER included in the ASL3 Raspberry Pi Appliance image.</p>"},{"location":"user-guide/passwords/#asterisk-manager-interface-ami","title":"Asterisk Manager Interface (AMI)","text":"<p>Your AllStarLink server system runs as process named <code>asterisk</code> that is the heart of your node(s). The Asterisk Manager Interface (AMI) is the standard management interface into your Asterisk server.</p> <p>The AMI configuration, stored in <code>/etc/asterisk/manager.conf</code>, includes <code>user</code> stanzas and associated <code>secret</code> passwords. For example:</p> <pre><code>[admin]\nsecret = my-AMI-password\n...\n</code></pre> <p>This <code>user</code> (admin) and <code>secret</code> (my-AMI-password) would need to be specified in the configuration file for any applications (such as Allmon3) that use the AMI to interact with Asterisk.</p>"},{"location":"user-guide/passwords/#web-applications-eg-allmon3","title":"Web Applications (e.g. Allmon3)","text":"<p>Many users will install one (or more) web applications that monitor/control their ASL nodes. These applications can provide access to many users on the web, and those users may have no relation to those who setup/administer/use your systems. As such, these applications typically maintain their own list of users and associated passwords.</p> <p>Please refer to the web application's instructions for information on how to manage who is allowed access to the web pages.</p> <p>Also, as mentioned above, many of these applications use AMI to interact with your Asterisk and your nodes. The web application instructions should have information on where to specify the AMI credentials.</p>"},{"location":"user-guide/pi-detailed/","title":"Raspberry Pi Install","text":"<p>The Raspberry Pi image includes the following to make a complete AllStarLink system:</p> <ul> <li>Debian 12 operating system</li> <li>Asterisk 20 LTS + <code>app_rpt</code></li> <li><code>asl-*</code> commands</li> <li>ASL3 Menu (<code>asl-menu</code>)</li> <li>Allmon3</li> <li>Web-based administration</li> <li>A nice landing page</li> </ul> <p>You must use the Raspberry Pi Imager even if you prefer another imager and carefully follow the instructions below. Failure to do so will result in a system that won't boot or that you will not be able to login to.</p> <p>You will install an image on a microSD card and go. This is the simplest install. For most nodes, the menus will walk you through the setup. Note: a minimum SD card size of 4G is required and it is recommended to use at least an 8G SD card.</p>"},{"location":"user-guide/pi-detailed/#pi-appliance-requirements","title":"Pi Appliance Requirements","text":"<p>The following are the system requirements for the Pi Appliance</p> Required Recommended Hardware Arm v8 64-bit CPU  Raspberry Pi 3, 4, 5, Zero 2 W, 400 Raspberry Pi 4B or 5B Memory Minimum 512M 4G Storage Minimum 4G or larger 8GB Class 10 <p>The ASL3 Appliance been tested on Raspberry Pi 3, 4, 5, and Zero 2W.</p>"},{"location":"user-guide/pi-detailed/#step-by-step-pi-appliance-setup","title":"Step-by-Step Pi Appliance Setup","text":"<p>These directions are specific for Windows, but in general should work the same for the same tool set on MacOS and Linux. For each screenshot below, click on the image for a larger version.</p> <p>NOTE: For this example, the hostname used shall be <code>node63001</code> and the node number is <code>63001</code>. Replace \"63001\" with your node number as you proceed through these directions.</p> <ol> <li> <p>If you do not already have it installed, install the Raspberry Pi Imager</p> </li> <li> <p>Download the latest release image. This will be named <code>allstar3-arm64-X.Y.Z.img.xz</code> where \"X.Y.Z\" is the version. The version will be something like 3.0.17. Save it to your local <code>Downloads</code> directory</p> </li> <li> <p>Launch Raspberry Pi Imager from the start menu</p> <p></p> </li> <li> <p>Click on CHOOSE DEVICE and choose the type of Pi hardware on which AllStarLink 3 Appliance is being installed</p> <p></p> </li> <li> <p>Click on CHOOSE OS. Scroll to the bottom of the list that appears and select Use custom</p> <p></p> </li> <li> <p>A Select image dialog box will appear. Navigate to the Downloads folder on your computer and select the image downloaded in Step 2. It will be named something like allstar3-arm64-3.0.17.img.xz. Then click Open</p> <p></p> </li> <li> <p>Connect the SD card or the SD card in a USB adapter to the computer. Then click on CHOOSE STORAGE. An option will be presented named something such as \"Mass Storage Device USB Device - 16.0 GB\". Click on that entry</p> <p></p> </li> <li> <p>Click NEXT</p> </li> <li> <p>A box labelled \"Use OS customisation?\" will appear. Click on EDIT SETTINGS</p> <p></p> </li> <li> <p>Check the box next to Set hostname and enter a hostname for the device to appear as on the network. In this example, <code>node63001</code> is used. Unless you have another naming convention for AllStarLink nodes, use the nodeNNNNN format</p> </li> <li> <p>Check the box next to Set username and password and enter a username and password. It is recommended to set the username to <code>asl</code> if you have no strong feeling about the username. Choose a good password and record the password somewhere safe. NOTE: There is NO DEFAULT USER for the image. Failure to set an account will require a re-image of the SD card with the proper settings</p> </li> <li> <p>If the device will be connected to WiFi, check the box \"Configure wireless LAN\" and then enter the name of the wireless network in SSID and the password for that network in Password. Change the \"Wireless LAN country\" to US or another country, as appropriate. Wireless configuration is not necessary if the Pi will use a network cable rather than wireless</p> </li> <li> <p>Check the box next to Set locale settings and change the \"Time zone\" to the desired region. The timezone settings will control any time-based announcements and schedule jobs. After completing Steps 10-13, the customization should look something like:</p> <p></p> </li> <li> <p>Click SAVE in \"OS Customization\"</p> </li> <li> <p>Click YES for \"Use OS customization?\"</p> </li> <li> <p>Click YES to continue to write the image to the SD card</p> <p></p> </li> <li> <p>Depending on the speed of the computer and the type of SD card, one will have time for a beverage of their choice. When the write is complete, eject the card, remove the card from computer and insert it into the Pi. If using a USB adapter for the SD card, remove the SD card from the adapter and insert the card into the Pi. The Pi will not use the SD card in the USB adapter</p> </li> <li> <p>Power on the Pi. Wait approximately 2 to 5 minutes for the Pi to boot and perform the various first boot tasks. Depending on the type of a Pi board used, this process could be lengthy. If there is a screen connected to the Pi, it will be noted that Pi will reboot several times. This is normal and expected</p> </li> <li> <p>(Optional) Network connectivity may be tested using the command to ping the hostname set in Step 10. For example, if the hostname set was <code>node63001</code> then do <code>ping -4 node63001.local</code> from a command prompt or PowerShell window. When you get a response, the host is connected to the network</p> <p></p> </li> <li> <p>Open the browser on your computer and navigate to <code>https://nodeNNNNN.local</code>. In this example the name was <code>node63001</code> then one would enter <code>https://node63001.local</code>. Your Pi and your computer must be on the same LAN for this to work. Use the IP address rather than the hostname if the Pi is on a remote network or the hostname is unreachable. Depending on your network and browser, one may have to enter the name several times until the page is displayed. The first connection will report a message that \"Your connection isn't private\". For the Pi appliance, this is acceptable. Click on Advanced and then Continue to node63001.local (unsafe). This only must be done the first time</p> <p></p> </li> <li> <p>The AllStarLink Launchpad will appear. Clicking on Web Admin Portal will take one to the web-based administration portal that includes a web-based SSH client for using <code>asl-menu</code> and other commands. Clicking on Node Links will take one to the Allmon3 interface. Clicking on ASL Manual will take one to the top of this manual</p> <p></p> </li> <li> <p>To setup the new node, click on Web Admin Portal. Similar to Step 20, click Advanced and Continue to node63001.local (unsafe) to see the logon box. This only must be done the first time. Enter the <code>username</code> and <code>password</code> configured during the imaging process above. Click Log in</p> <p></p> </li> <li> <p>The Overview tab is displayed. Using the Web Admin Portal (<code>Cockpit</code>) with AllStarLink is covered in the manual. At the top,  click on Turn on administrative access</p> <p></p> <p>Enter the password again when prompted and click Authenticate</p> <p></p> </li> <li> <p>The web-based SSH console appears as Terminal at the bottom of the left scrollable menu. Click it and an SSH terminal console will appear:</p> <p></p> </li> </ol> <p>The Terminal window is a complete interface to AllStarLink, Asterisk, and more. No SSH client is required although use of SSH directly is fully supported.</p>"},{"location":"user-guide/pi-detailed/#quick-config-via-asl-menu","title":"Quick Config via ASL-Menu","text":"<p>The node may now be configured. New users or those wanting a quick start experience should use the <code>asl-menu</code> utility with <code>sudo asl-menu</code>.</p> <p></p> <p>The menu will appear:</p> <p></p> <p>Proceed from here with the Node Settings option in order to configure your node number and choose/configure your audio interface. </p>"},{"location":"user-guide/pi-detailed/#asterisk-console","title":"Asterisk Console","text":"<p>To start the asterisk console from the Terminal window enter <code>sudo asterisk -rv</code>.</p> <p></p>"},{"location":"user-guide/pi-detailed/#software-updates","title":"Software Updates","text":"<p>One should also apply any latest updates and reboot the device as described in Cockpit Updates.</p>"},{"location":"user-guide/pi-detailed/#allmon3-default-login","title":"Allmon3 Default Login","text":"<p>The default-configured username and password combination is <code>allmon3 / password</code>.</p> <p>You must delete this and add a new one:</p> <ul> <li>Launch Web Admin Portal (aka <code>Cockpit</code>) by going to <code>https://node63001.local:9090</code></li> <li>Open the Terminal</li> <li>Type <code>sudo allmon3-passwd --delete allmon3</code> to remove the default login</li> <li>Type <code>sudo allmon3-passwd &lt;new user login&gt;</code> to set the new user login. Type the new password when prompted.</li> <li>Type <code>sudo systemctl restart allmon3</code> to load the new login.</li> </ul> <p>Details on updating the login(s) and other Allmon3 settings can be found in the Allmon3 section of the manual.</p>"},{"location":"user-guide/pi-detailed/#logging-out","title":"Logging Out","text":"<p>When finished with the admin system, click on Session in the upper right and then choose Logout.</p>"},{"location":"user-guide/pi-detailed/#node-configuration","title":"Node Configuration","text":"<p>If you haven't already, the next step is to configure your node settings. YouTuber Freddie Mac has a nice ASL3 installation and configuration video. See https://youtu.be/aeuj-yI8qrU. Also see ASL3 Menu for details.</p>"},{"location":"user-guide/support/","title":"ASL3 Support","text":""},{"location":"user-guide/support/#support","title":"Support","text":"<p>Primary support for all versions of ASL (including ASL3) continues to be the AllStarLink Community.</p> <p>Please do not use the ASL Helpdesk for technical help. Support for ASL3 will NOT be handled by the ASL Helpdesk. All Helpdesk tickets will be closed with a referral to the AllStarLink Community or the AllStarLink GitHub.</p> <p>See Basic Troubleshooting Tips in this section for further information on what information is necessary to effectively get support.</p>"},{"location":"user-guide/support/#bug-reporting","title":"Bug Reporting","text":"<p>Bug reports for ASL3 and surrounding issues are best handled through GitHub \"Issues\" to the source code projects at AllStarLink GitHub.</p> <p>There are numerous ASL3 repositories. If you're not sure which repository to use for reporting a given issue then start at ASL3. You can also ask for guidance in the AllStarLink Community.</p> <p>When reporting an issue we ask that you be comfortable enough with Linux to edit files, restart services, and perhaps copy a potentially fixed file onto your system.</p> <p>NOTE: To raise issues about ASL3 problems and interact with the developers you must create (or use an existing) GitHub account.</p>"},{"location":"user-guide/support/#enhancement-requests","title":"Enhancement Requests","text":"<p>Obviously, we cannot promise anything but we do want to hear your ideas. Please file a GitHub \"Issue\" :-)</p>"},{"location":"user-guide/support/#contributing","title":"Contributing","text":"<p>Have you identified a problem and have a solution? We welcome your help. Please file a GitHub Issue with all the details. Even better, create a GitHub \"Pull Request\" for us to review.</p>"},{"location":"user-guide/troubleshooting/","title":"Basic Troubleshooting Tips","text":"<p>When asking for help on AllStarLink Community or in a GitHub Issue here are some tips on how to ask for help and how to get common troubleshooting information that is often needed to understand your specific issues.</p>"},{"location":"user-guide/troubleshooting/#tips-on-asking-for-help","title":"Tips on Asking for Help","text":"<p>Keep in mind that when asking for help, the pool of people likely able to help have no understanding of your personal setup, situation, skills, etc. In order to get good help, you need to ask a good question. Make sure when asking for help that you hit the following points:</p>"},{"location":"user-guide/troubleshooting/#explain-precisely-what-is-not-working-properly","title":"Explain Precisely What is not Working Properly","text":"<p>Requests for help such as \"ASL doesn't work\" or \"my Pi crashes\" or \"I can't do X\" without any further details or information is unable to be diagnosed and assisted.</p> <p>Examples of GOOD ways to ask a question:</p> <ul> <li> <p>I just built a new ASL3 Pi and when I try to connect to the interface I get this particular error.</p> </li> <li> <p>After I configured my node, I am trying to do this particular thing and it doesn't work because of this particular error.</p> </li> <li> <p>I am trying to configure this particular feature in <code>rpt.conf</code> and when I do, this particular thing happens.</p> </li> <li> <p>I used to be able to do this thing and after I change this other thing then this thing stopped working.</p> </li> </ul> <p>Basically, before submitting your question to Community, make sure your post contains the basics of \"what am I trying to do\", \"what do I think should be happening\", and \"what is happening instead\". If you are filing an issue on GitHub, use the Issue Templates - they ask for information for a reason.</p>"},{"location":"user-guide/troubleshooting/#be-ready-to-provide-requested-basic-troubleshooting-info","title":"Be Ready to Provide Requested Basic Troubleshooting Info","text":"<p>If you are going to ask for help, be ready and willing to provide the basic troubleshooting information that is requested. For example, if you're having a problem linking to another node, be ready to provide - or even better provide in advance - the basic troubleshooting information needed to help with your problem.</p> <p>Items that may be requested include elements such as:</p> <ul> <li> <p>How is your node connected to the Internet?</p> </li> <li> <p>What IAX2 port is configured?</p> </li> <li> <p>What client are you using?</p> </li> <li> <p>What radio type are you using?</p> </li> <li> <p>What is your IP address?</p> </li> <li> <p>Is the time correct on your system?</p> </li> <li> <p>Can you put a monitor on the device and tell what the screen says</p> </li> <li> <p>What did the log say about...?</p> </li> </ul>"},{"location":"user-guide/troubleshooting/#allstarlink-does-not-support-certain-other-projectstools","title":"AllStarLink Does Not Support Certain Other Projects/Tools","text":"<p>Core AllStarLink does not support certain other projects/tools such as HamVOIP, Supermon/Supermon2, SkyWarnPlus, or AllScan. Some of the developers of these tools such as SkyWarnPlus and AllScan are active and answer questions on the Community, and others are not.</p> <p>If you are told, \"that isn't supported but have you tried doing it in this supported way\", consider giving it a try. </p>"},{"location":"user-guide/troubleshooting/#allstarlink-v3-contains-14-years-of-changes","title":"AllStarLink v3 Contains 14+ Years of Changes","text":"<p>The release of AllStarLink v3 uses modern Asterisk 20 LTS. Legacy installs use Asterisk 1.4 which was end of life in 2012. Thus, there are literally 14+ years of changes of how Asterisk operates that <code>app_rpt</code> (the main engine behind ASL) had to conform to. Notably, the configuration syntax which changed gradually over time for users staying current with Asterisk, is an \"all of a sudden\" change in ASL3. One cannot paste old configurations into modern ASL3 and expect it to \"just work\".</p> <p>Additionally, Asterisk no longer runs as the root user on Linux which means that its ability to do things to the system such as make OS changes is purposefully restricted. ASL3 and Asterisk are very security conscious as many of our users run ASL3 systems on the open Internet.</p>"},{"location":"user-guide/troubleshooting/#give-questioners-the-benefit-of-the-doubt","title":"Give Questioners the Benefit of the Doubt","text":"<p>In general, if people are asking questions about the details of your problem, they are likely trying to help and not nitpick. In general, if many people are having the problem, it is already known and likely documented.</p> <p>If it's not, then likely your issue is unique to your setup and providing the requested troubleshooting is needed to help you further.</p>"},{"location":"user-guide/troubleshooting/#basic-troubleshooting","title":"Basic Troubleshooting","text":""},{"location":"user-guide/troubleshooting/#gathering-logs","title":"Gathering Logs","text":"<p>If you are asked to provide logs, there are two standard ways to provide logs, using <code>Cockpit</code> or using the <code>journalctl</code> tool from the  Linux CLI.</p>"},{"location":"user-guide/troubleshooting/#gathering-logs-with-cockpit","title":"Gathering Logs with Cockpit","text":"<p>In the Cockpit interface, click Services on the left navbar. The service list will display. Wait for the full list to load and then click on the blue link name of the service. The common services are:</p> <ul> <li> <p><code>allmon3</code> - Allmon3</p> </li> <li> <p><code>asl3-update-astdb</code> - Maintenance of the <code>astdb.txt</code> file used by third-party apps</p> </li> <li> <p><code>asl3-update-nodelist</code> - Maintenance of the \"file\" based lookup database, if installed</p> </li> <li> <p><code>asterisk</code> - Core <code>Asterisk/app_rpt</code></p> </li> <li> <p><code>networking</code> - Information about network interfaces</p> </li> <li> <p><code>NetworkManager</code> - Information about network items of all sorts</p> </li> <li> <p><code>systemd-timesyncd</code> - Information about network time synchronization</p> </li> </ul> <p>After clicking on one of the links, wait until Service logs fills in and then view the logs. Clicking View all logs will show more logs.</p>"},{"location":"user-guide/troubleshooting/#gathering-logs-with-clissh","title":"Gathering Logs with CLI/SSH","text":"<p>Use the <code>journalctl -xeu</code> command to provide logging output. For example:</p> <pre><code>journalctl -xeu asterisk.service\n</code></pre> <p>Common services are:</p> <ul> <li> <p><code>allmon3.service</code> - Allmon3</p> </li> <li> <p><code>asl3-update-astdb.service</code> - Maintenance of the <code>astdb.txt</code> file used by third-party apps</p> </li> <li> <p><code>asl3-update-nodelist.service</code> - Maintenance of the \"file\" based lookup database, if installed</p> </li> <li> <p><code>asterisk.service</code> - Core <code>Asterisk/app_rpt</code></p> </li> <li> <p><code>networking.service</code> - Information about network interfaces</p> </li> <li> <p><code>NetworkManager.service</code> - Information about network items of all sorts</p> </li> <li> <p><code>systemd-timesyncd.service</code> - Information about network time synchronization</p> </li> </ul>"},{"location":"user-guide/troubleshooting/#gathering-configs","title":"Gathering Configs","text":"<p>It is often needed to gather certain configuration details. Use the Cockpit Console or the SSH/CLI interface. People asking for information will likely provide the filename needed in their request. However, here are some easy ways to get the data requested:</p> <ul> <li> <p><code>tail -n50 FILE</code> - Print the last 50 lines of <code>FILE</code></p> </li> <li> <p><code>tail -F FILE</code> - Print the output of <code>FILE</code> as it is written to (useful for watching logs live). Press Ctrl+c to exit</p> </li> <li> <p><code>more FILE</code> - Print <code>FILE</code> by pages</p> </li> <li> <p><code>less FILE</code> - Less is more than more... Less is an interactive scroller and searching interface. For example typing <code>/SOMETHING</code> will search for the string \"SOMETHING\" forward from where you are in the file and <code>?SOMETHING</code> will search backwards. Enter CTRL+c to exit</p> </li> <li> <p><code>grep SOMETHING FILE</code> - This is for basic searching within a file. For example, you can use <code>grep</code> to answer the question \"what does the line with FOO in FILE say?\". This command would be <code>grep FOO FILE</code>. Note that by default, your <code>grep</code> searches are case-sensitive, use the <code>-i</code> flag for case-insensitive searches, i.e. <code>grep -i FOO FILE</code> will find all instances of \"foo\", \"FOO\", \"FoO\", etc. </p> </li> </ul> <p>When possible, please copy/paste log and search text instead of attaching screenshots into systems for troubleshooting. Text is far easier to deal with (can be quoted in replies), and will make your trouble show up in search engines to help \"the next person\".</p>"},{"location":"user-guide/updates/","title":"Updating ASL3","text":"<p>All of the software components that make up ASL3 are provided by software packages (Debian <code>.deb</code> files) from an centralized Apt repository. This makes upgrades quick and painless for users.</p>"},{"location":"user-guide/updates/#standard-debian-upgrades","title":"Standard Debian Upgrades","text":"<p>Whether ASL3 is installed on a standard Debian 12 installation or you are using the Pi Appliance image, updates follow the standard Debian format:</p> <pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre> <p>This will update all ASL3 software as well as the underlying operating system. AllStarLink will never release any update that is a \"breaking change\" through the <code>apt</code> system that doesn't have either an automated upgrade process or a well-documented manual step-by-step process.</p> <p>A reboot is only needed when a new Linux kernel has been installed.</p> <p>Sometimes an update may ask what to do with a configuration file. It is generally best to answer such questions with <code>N</code> meaning, \"keep your currently-installed version\". Such a question will look like:</p> <pre><code>Configuration file '/etc/asterisk/rpt.conf'\n ==&gt; Modified (by you or by a script) since installation.\n ==&gt; Package distributor has shipped an updated version.\n   What would you like to do about it ?  Your options are:\n    Y or I  : install the package maintainer's version\n    N or O  : keep your currently-installed version\n      D     : show the differences between the versions\n      Z     : start a shell to examine the situation\n The default action is to keep your current version.\n*** rpt.conf (Y/I/N/O/D/Z) [default=N] ? N\n</code></pre> <p>AllStarLink will clearly announce when there is a change that may break existing configurations.</p> <p>If you want updates to install without any questions being asked specify the <code>DEBIAN_FRONTEND=noninteractive</code> variable:</p> <pre><code>DEBIAN_FRONTEND=noninteractive sudo apt update\nDEBIAN_FRONTEND=noninteractive sudo apt upgrade -y\n</code></pre> <p>Using this command will automatically choose <code>N</code> to any question about configuration - i.e. it will always keep your installed version.</p>"},{"location":"user-guide/updates/#note-on-dahdi","title":"Note on DAHDI","text":"<p>In the past, managing the DAHDI kernel module needed by <code>app_rpt</code> had been problematic during kernel upgrades. Previously, the recommendation had been to never upgrade the kernel. This advice is no longer valid and should not be followed for security and practicality reasons.</p> <p>ASL3 automatically manages and rebuilds the DAHDI kernel modules during software updates using the DKMS system. After an upgrade, rebooting into a new version of the Linux kernel will \"just work\".</p> <p>If, for some strange reason, you need to manually rebuild and install the DAHDI kernel modules, try the following:</p> <pre><code>sudo apt install -y --reinstall dahdi-linux dahdi-dkms\n</code></pre>"},{"location":"user-guide/whats-new/","title":"What's New?","text":"<p>Ready to get on with installation? We thought so, but first consider that ASL3 is very new. You'll probably want to install on removable media or on a non-production system. You probably don't want to install a production system right away. Give yourself some time to test that everything works as you'd expect.</p> <p>NOTE: If you have installed an earlier version of ASL, you need to know that ASL3 has many changes and that there's a bit of a learning curve. For those who have used ASL2 or other versions of AllStar you should be aware of a few important details:</p> <ul> <li>At the risk of repeating ourselves, ASL3 now runs on Asterisk 20!  We are no longer stuck in the past. We're so proud!!!</li> <li>There is no update or migration path from ASL2 to ASL3</li> <li>Many of the ASL3 configuration files are different<ul> <li>The configuration files now support templates</li> <li>We now favor node registration using HTTP</li> <li>The SimpleUSB and USBRadio tune settings have been moved into their respective configuration (.conf) files. We no longer have separate per-node tune setting files.</li> </ul> </li> <li>EchoLink changes<ul> <li>EchoLink chat has been enabled</li> <li>EchoLink now honors the <code>app_rpt</code> timeout timer. A text message is sent to the client when they time out</li> <li>EchoLink no longer allows clients to double. A text message is sent to the client when they are doubling</li> </ul> </li> </ul> <p>The AllStar two node numbers per user policy remains in effect. Node numbers are a limited resource. Please make a best effort to use new media, a new server, or NNX to build a node for testing. We do make exceptions on a case by case basis but we'd really appreciate it if you could use a resource you already have.</p>"},{"location":"user-guide/whats-new/#menu-changes","title":"Menu Changes","text":"<p>The ASL3 menu utility (<code>asl-menu</code>) has been updated. Our goal is to provide an easy way for you to configure your node and to minimize the need to edit any configuration files.</p> <p>At the same time, we have removed most of the \"OS\" configuration options found in earlier implementations. Historically, ASL has been installed on many OS variants and the OS commands that work on one version do not always work on others. For that reason there are no OS related commands in the ASL3 menu.</p> <p>See Menu for details.</p>"},{"location":"user-guide/whats-new/#configuration-changes","title":"Configuration Changes","text":"<p>The first thing to know about ASL3 configuration is that <code>asl-menu</code> can be used to make and view common changes. Here are the highlights. You may want to read about Advanced Topics and New Commands details later.</p> <ul> <li>You may edit the <code>.conf</code> files without concern of switching between editing and using the menu. The tune menus are removing leading white space from comments (we're hoping to fix this).</li> <li>An Asterisk template is now used within <code>rpt.conf</code>, <code>simpleusb.conf</code>, and <code>usbradio.conf</code>. Editing is much easier, but it's different than with other versions of AllStar. Node settings are much simpler with only a few lines needed to be added/updated for each node. The ASL3 menu handles the new templated configuration.</li> <li>AllStar registration is now set in <code>rpt_http_registration.conf</code>, not in <code>iax.conf</code>. IAX registration still works but is discouraged. Please do not configure your node for both HTTP and IAX registration. The new Asterisk CLI command to show the registration status of your nodes is <code>rpt show registrations</code>.  This command can be performed from the ASL3 menu.</li> <li>The USB configuration files now contain the tune settings. There is no tune file for each node as in ASL2. The tune menus and the Asterisk CLI write to the new tune setting locations.</li> <li>There is no need to edit or use a script to update the access list, formerly known as the blacklist and whitelist. The settings are different because the access list is now per node rather than for all nodes as in other AllStar versions. It's also much easier to use the ASL3 menu to build the access lists.</li> </ul>"},{"location":"user-guide/whats-new/#ap-measurement","title":"A&amp;P Measurement","text":"<p>Adoption and Performance measurements are to help ASL understand growth and technical aspects of ASL3. No sensitive or private information is collected. For details see GitHub/AllStarLink/ASL3-Usage. Reports are available at repo.allstarlink.org/reports/.</p>"}]}